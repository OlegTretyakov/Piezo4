unit Vodopad.gsl22;
(*
  GNU GSL 2.2 Pascal Unit
  Author : Chen Liping
  Date   : 2010-3-5
  Email  : Mr.chenliping@gmail.com
*)

{$DebugInfo OFF}
{$LocalSymbols OFF}
{$ReferenceInfo OFF}
{$RangeChecks OFF}
{$OverflowChecks OFF}
{$Optimization ON}
interface

uses
Winapi.Windows, 
System.Sysutils;

const
  gsl_dll = 'libgsl-22.dll';
  cblas_dll = 'libgslcblas-0.dll';

const
  //__GSL_VERSION_H__
  GSL_VERSION = '2.2';

  //gsl_const_cgs.h
  GSL_CONST_CGS_SPEED_OF_LIGHT = (2.99792458e10) ;
  GSL_CONST_CGS_GRAVITATIONAL_CONSTANT = (6.673e-8) ;
  GSL_CONST_CGS_PLANCKS_CONSTANT_H = (6.62606876e-27) ;
  GSL_CONST_CGS_PLANCKS_CONSTANT_HBAR = (1.05457159642e-27) ;
  GSL_CONST_CGS_ASTRONOMICAL_UNIT = (1.49597870691e13) ;
  GSL_CONST_CGS_LIGHT_YEAR = (9.46053620707e17) ;
  GSL_CONST_CGS_PARSEC = (3.08567758135e18) ;
  GSL_CONST_CGS_GRAV_ACCEL = (9.80665e2) ;
  GSL_CONST_CGS_ELECTRON_VOLT = (1.602176462e-12) ;
  GSL_CONST_CGS_MASS_ELECTRON = (9.10938188e-28) ;
  GSL_CONST_CGS_MASS_MUON = (1.88353109e-25) ;
  GSL_CONST_CGS_MASS_PROTON = (1.67262158e-24) ;
  GSL_CONST_CGS_MASS_NEUTRON = (1.67492716e-24) ;
  GSL_CONST_CGS_RYDBERG = (2.17987190389e-11) ;
  GSL_CONST_CGS_BOLTZMANN = (1.3806503e-16) ;
  GSL_CONST_CGS_BOHR_MAGNETON = (9.27400899e-20) ;
  GSL_CONST_CGS_NUCLEAR_MAGNETON = (5.05078317e-23) ;
  GSL_CONST_CGS_ELECTRON_MAGNETIC_MOMENT = (9.28476362e-20) ;
  GSL_CONST_CGS_PROTON_MAGNETIC_MOMENT = (1.410606633e-22) ;
  GSL_CONST_CGS_MOLAR_GAS = (8.314472e7) ;
  GSL_CONST_CGS_STANDARD_GAS_VOLUME = (2.2710981e4) ;
  GSL_CONST_CGS_MINUTE = (6e1) ;
  GSL_CONST_CGS_HOUR = (3.6e3) ;
  GSL_CONST_CGS_DAY = (8.64e4) ;
  GSL_CONST_CGS_WEEK = (6.048e5) ;
  GSL_CONST_CGS_INCH = (2.54e0) ;
  GSL_CONST_CGS_FOOT = (3.048e1) ;
  GSL_CONST_CGS_YARD = (9.144e1) ;
  GSL_CONST_CGS_MILE = (1.609344e5) ;
  GSL_CONST_CGS_NAUTICAL_MILE = (1.852e5) ;
  GSL_CONST_CGS_FATHOM = (1.8288e2) ;
  GSL_CONST_CGS_MIL = (2.54e-3) ;
  GSL_CONST_CGS_POINT = (3.52777777778e-2) ;
  GSL_CONST_CGS_TEXPOINT = (3.51459803515e-2) ;
  GSL_CONST_CGS_MICRON = (1e-4) ;
  GSL_CONST_CGS_ANGSTROM = (1e-8) ;
  GSL_CONST_CGS_HECTARE = (1e8) ;
  GSL_CONST_CGS_ACRE = (4.04685642241e7) ;
  GSL_CONST_CGS_BARN = (1e-24) ;
  GSL_CONST_CGS_LITER = (1e3) ;
  GSL_CONST_CGS_US_GALLON = (3.78541178402e3) ;
  GSL_CONST_CGS_QUART = (9.46352946004e2) ;
  GSL_CONST_CGS_PINT = (4.73176473002e2) ;
  GSL_CONST_CGS_CUP = (2.36588236501e2) ;
  GSL_CONST_CGS_FLUID_OUNCE = (2.95735295626e1) ;
  GSL_CONST_CGS_TABLESPOON = (1.47867647813e1) ;
  GSL_CONST_CGS_TEASPOON = (4.92892159375e0) ;
  GSL_CONST_CGS_CANADIAN_GALLON = (4.54609e3) ;
  GSL_CONST_CGS_UK_GALLON = (4.546092e3) ;
  GSL_CONST_CGS_MILES_PER_HOUR = (4.4704e1) ;
  GSL_CONST_CGS_KILOMETERS_PER_HOUR = (2.77777777778e1) ;
  GSL_CONST_CGS_KNOT = (5.14444444444e1) ;
  GSL_CONST_CGS_POUND_MASS = (4.5359237e2) ;
  GSL_CONST_CGS_OUNCE_MASS = (2.8349523125e1) ;
  GSL_CONST_CGS_TON = (9.0718474e5) ;
  GSL_CONST_CGS_METRIC_TON = (1e6) ;
  GSL_CONST_CGS_UK_TON = (1.0160469088e6) ;
  GSL_CONST_CGS_TROY_OUNCE = (3.1103475e1) ;
  GSL_CONST_CGS_CARAT = (2e-1) ;
  GSL_CONST_CGS_UNIFIED_ATOMIC_MASS = (1.66053873e-24) ;
  GSL_CONST_CGS_GRAM_FORCE = (9.80665e2) ;
  GSL_CONST_CGS_POUND_FORCE = (4.44822161526e5) ;
  GSL_CONST_CGS_KILOPOUND_FORCE = (4.44822161526e8) ;
  GSL_CONST_CGS_POUNDAL = (1.38255e4) ;
  GSL_CONST_CGS_CALORIE = (4.1868e7) ;
  GSL_CONST_CGS_BTU = (1.05505585262e10) ;
  GSL_CONST_CGS_THERM = (1.05506e15) ;
  GSL_CONST_CGS_HORSEPOWER = (7.457e9) ;
  GSL_CONST_CGS_BAR = (1e6) ;
  GSL_CONST_CGS_STD_ATMOSPHERE = (1.01325e6) ;
  GSL_CONST_CGS_TORR = (1.33322368421e3) ;
  GSL_CONST_CGS_METER_OF_MERCURY = (1.33322368421e6) ;
  GSL_CONST_CGS_INCH_OF_MERCURY = (3.38638815789e4) ;
  GSL_CONST_CGS_INCH_OF_WATER = (2.490889e3) ;
  GSL_CONST_CGS_PSI = (6.89475729317e4) ;
  GSL_CONST_CGS_POISE = (1e0) ;
  GSL_CONST_CGS_STOKES = (1e0) ;
  GSL_CONST_CGS_FARADAY = (9.6485341472e4) ;
  GSL_CONST_CGS_ELECTRON_CHARGE = (1.602176462e-19) ;
  GSL_CONST_CGS_GAUSS = (1e-1) ;
  GSL_CONST_CGS_STILB = (1e0) ;
  GSL_CONST_CGS_LUMEN = (1e0) ;
  GSL_CONST_CGS_LUX = (1e-4) ;
  GSL_CONST_CGS_PHOT = (1e0) ;
  GSL_CONST_CGS_FOOTCANDLE = (1.076e-3) ;
  GSL_CONST_CGS_LAMBERT = (1e0) ;
  GSL_CONST_CGS_FOOTLAMBERT = (1.07639104e-3) ;
  GSL_CONST_CGS_CURIE = (3.7e10) ;
  GSL_CONST_CGS_ROENTGEN = (2.58e-7) ;
  GSL_CONST_CGS_RAD = (1e2) ;
  GSL_CONST_CGS_SOLAR_MASS = (1.98892e33) ;
  GSL_CONST_CGS_BOHR_RADIUS = (5.291772083e-9) ;
  GSL_CONST_CGS_NEWTON = (1e5) ;
  GSL_CONST_CGS_DYNE = (1e0) ;
  GSL_CONST_CGS_JOULE = (1e7) ;
  GSL_CONST_CGS_ERG = (1e0) ;
  GSL_CONST_CGS_STEFAN_BOLTZMANN_CONSTANT = (5.67039934436e-5) ;
  GSL_CONST_CGS_THOMSON_CROSS_SECTION = (6.65245853542e-25) ;

  //__GSL_CONST_CGSM__
  GSL_CONST_CGSM_SPEED_OF_LIGHT = (2.99792458e10) ;
  GSL_CONST_CGSM_GRAVITATIONAL_CONSTANT = (6.673e-8) ;
  GSL_CONST_CGSM_PLANCKS_CONSTANT_H = (6.62606876e-27) ;
  GSL_CONST_CGSM_PLANCKS_CONSTANT_HBAR = (1.05457159642e-27) ;
  GSL_CONST_CGSM_ASTRONOMICAL_UNIT = (1.49597870691e13) ;
  GSL_CONST_CGSM_LIGHT_YEAR = (9.46053620707e17) ;
  GSL_CONST_CGSM_PARSEC = (3.08567758135e18) ;
  GSL_CONST_CGSM_GRAV_ACCEL = (9.80665e2) ;
  GSL_CONST_CGSM_ELECTRON_VOLT = (1.602176462e-12) ;
  GSL_CONST_CGSM_MASS_ELECTRON = (9.10938188e-28) ;
  GSL_CONST_CGSM_MASS_MUON = (1.88353109e-25) ;
  GSL_CONST_CGSM_MASS_PROTON = (1.67262158e-24) ;
  GSL_CONST_CGSM_MASS_NEUTRON = (1.67492716e-24) ;
  GSL_CONST_CGSM_RYDBERG = (2.17987190389e-11) ;
  GSL_CONST_CGSM_BOLTZMANN = (1.3806503e-16) ;
  GSL_CONST_CGSM_BOHR_MAGNETON = (9.27400899e-21) ;
  GSL_CONST_CGSM_NUCLEAR_MAGNETON = (5.05078317e-24) ;
  GSL_CONST_CGSM_ELECTRON_MAGNETIC_MOMENT = (9.28476362e-21) ;
  GSL_CONST_CGSM_PROTON_MAGNETIC_MOMENT = (1.410606633e-23) ;
  GSL_CONST_CGSM_MOLAR_GAS = (8.314472e7) ;
  GSL_CONST_CGSM_STANDARD_GAS_VOLUME = (2.2710981e4) ;
  GSL_CONST_CGSM_MINUTE = (6e1) ;
  GSL_CONST_CGSM_HOUR = (3.6e3) ;
  GSL_CONST_CGSM_DAY = (8.64e4) ;
  GSL_CONST_CGSM_WEEK = (6.048e5) ;
  GSL_CONST_CGSM_INCH = (2.54e0) ;
  GSL_CONST_CGSM_FOOT = (3.048e1) ;
  GSL_CONST_CGSM_YARD = (9.144e1) ;
  GSL_CONST_CGSM_MILE = (1.609344e5) ;
  GSL_CONST_CGSM_NAUTICAL_MILE = (1.852e5) ;
  GSL_CONST_CGSM_FATHOM = (1.8288e2) ;
  GSL_CONST_CGSM_MIL = (2.54e-3) ;
  GSL_CONST_CGSM_POINT = (3.52777777778e-2) ;
  GSL_CONST_CGSM_TEXPOINT = (3.51459803515e-2) ;
  GSL_CONST_CGSM_MICRON = (1e-4) ;
  GSL_CONST_CGSM_ANGSTROM = (1e-8) ;
  GSL_CONST_CGSM_HECTARE = (1e8) ;
  GSL_CONST_CGSM_ACRE = (4.04685642241e7) ;
  GSL_CONST_CGSM_BARN = (1e-24) ;
  GSL_CONST_CGSM_LITER = (1e3) ;
  GSL_CONST_CGSM_US_GALLON = (3.78541178402e3) ;
  GSL_CONST_CGSM_QUART = (9.46352946004e2) ;
  GSL_CONST_CGSM_PINT = (4.73176473002e2) ;
  GSL_CONST_CGSM_CUP = (2.36588236501e2) ;
  GSL_CONST_CGSM_FLUID_OUNCE = (2.95735295626e1) ;
  GSL_CONST_CGSM_TABLESPOON = (1.47867647813e1) ;
  GSL_CONST_CGSM_TEASPOON = (4.92892159375e0) ;
  GSL_CONST_CGSM_CANADIAN_GALLON = (4.54609e3) ;
  GSL_CONST_CGSM_UK_GALLON = (4.546092e3) ;
  GSL_CONST_CGSM_MILES_PER_HOUR = (4.4704e1) ;
  GSL_CONST_CGSM_KILOMETERS_PER_HOUR = (2.77777777778e1) ;
  GSL_CONST_CGSM_KNOT = (5.14444444444e1) ;
  GSL_CONST_CGSM_POUND_MASS = (4.5359237e2) ;
  GSL_CONST_CGSM_OUNCE_MASS = (2.8349523125e1) ;
  GSL_CONST_CGSM_TON = (9.0718474e5) ;
  GSL_CONST_CGSM_METRIC_TON = (1e6) ;
  GSL_CONST_CGSM_UK_TON = (1.0160469088e6) ;
  GSL_CONST_CGSM_TROY_OUNCE = (3.1103475e1) ;
  GSL_CONST_CGSM_CARAT = (2e-1) ;
  GSL_CONST_CGSM_UNIFIED_ATOMIC_MASS = (1.66053873e-24) ;
  GSL_CONST_CGSM_GRAM_FORCE = (9.80665e2) ;
  GSL_CONST_CGSM_POUND_FORCE = (4.44822161526e5) ;
  GSL_CONST_CGSM_KILOPOUND_FORCE = (4.44822161526e8) ;
  GSL_CONST_CGSM_POUNDAL = (1.38255e4) ;
  GSL_CONST_CGSM_CALORIE = (4.1868e7) ;
  GSL_CONST_CGSM_BTU = (1.05505585262e10) ;
  GSL_CONST_CGSM_THERM = (1.05506e15) ;
  GSL_CONST_CGSM_HORSEPOWER = (7.457e9) ;
  GSL_CONST_CGSM_BAR = (1e6) ;
  GSL_CONST_CGSM_STD_ATMOSPHERE = (1.01325e6) ;
  GSL_CONST_CGSM_TORR = (1.33322368421e3) ;
  GSL_CONST_CGSM_METER_OF_MERCURY = (1.33322368421e6) ;
  GSL_CONST_CGSM_INCH_OF_MERCURY = (3.38638815789e4) ;
  GSL_CONST_CGSM_INCH_OF_WATER = (2.490889e3) ;
  GSL_CONST_CGSM_PSI = (6.89475729317e4) ;
  GSL_CONST_CGSM_POISE = (1e0) ;
  GSL_CONST_CGSM_STOKES = (1e0) ;
  GSL_CONST_CGSM_FARADAY = (9.6485341472e3) ;
  GSL_CONST_CGSM_ELECTRON_CHARGE = (1.602176462e-20) ;
  GSL_CONST_CGSM_GAUSS = (1e0) ;
  GSL_CONST_CGSM_STILB = (1e0) ;
  GSL_CONST_CGSM_LUMEN = (1e0) ;
  GSL_CONST_CGSM_LUX = (1e-4) ;
  GSL_CONST_CGSM_PHOT = (1e0) ;
  GSL_CONST_CGSM_FOOTCANDLE = (1.076e-3) ;
  GSL_CONST_CGSM_LAMBERT = (1e0) ;
  GSL_CONST_CGSM_FOOTLAMBERT = (1.07639104e-3) ;
  GSL_CONST_CGSM_CURIE = (3.7e10) ;
  GSL_CONST_CGSM_ROENTGEN = (2.58e-8) ;
  GSL_CONST_CGSM_RAD = (1e2) ;
  GSL_CONST_CGSM_SOLAR_MASS = (1.98892e33) ;
  GSL_CONST_CGSM_BOHR_RADIUS = (5.291772083e-9) ;
  GSL_CONST_CGSM_NEWTON = (1e5) ;
  GSL_CONST_CGSM_DYNE = (1e0) ;
  GSL_CONST_CGSM_JOULE = (1e7) ;
  GSL_CONST_CGSM_ERG = (1e0) ;
  GSL_CONST_CGSM_STEFAN_BOLTZMANN_CONSTANT = (5.67039934436e-5) ;
  GSL_CONST_CGSM_THOMSON_CROSS_SECTION = (6.65245853542e-25) ;

  //__GSL_CONST_MKS__
  GSL_CONST_MKS_SPEED_OF_LIGHT = (2.99792458e8) ;
  GSL_CONST_MKS_GRAVITATIONAL_CONSTANT = (6.673e-11) ;
  GSL_CONST_MKS_PLANCKS_CONSTANT_H = (6.62606876e-34) ;
  GSL_CONST_MKS_PLANCKS_CONSTANT_HBAR = (1.05457159642e-34) ;
  GSL_CONST_MKS_ASTRONOMICAL_UNIT = (1.49597870691e11) ;
  GSL_CONST_MKS_LIGHT_YEAR = (9.46053620707e15) ;
  GSL_CONST_MKS_PARSEC = (3.08567758135e16) ;
  GSL_CONST_MKS_GRAV_ACCEL = (9.80665e0) ;
  GSL_CONST_MKS_ELECTRON_VOLT = (1.602176462e-19) ;
  GSL_CONST_MKS_MASS_ELECTRON = (9.10938188e-31) ;
  GSL_CONST_MKS_MASS_MUON = (1.88353109e-28) ;
  GSL_CONST_MKS_MASS_PROTON = (1.67262158e-27) ;
  GSL_CONST_MKS_MASS_NEUTRON = (1.67492716e-27) ;
  GSL_CONST_MKS_RYDBERG = (2.17987190389e-18) ;
  GSL_CONST_MKS_BOLTZMANN = (1.3806503e-23) ;
  GSL_CONST_MKS_BOHR_MAGNETON = (9.27400899e-24) ;
  GSL_CONST_MKS_NUCLEAR_MAGNETON = (5.05078317e-27) ;
  GSL_CONST_MKS_ELECTRON_MAGNETIC_MOMENT = (9.28476362e-24) ;
  GSL_CONST_MKS_PROTON_MAGNETIC_MOMENT = (1.410606633e-26) ;
  GSL_CONST_MKS_MOLAR_GAS = (8.314472e0) ;
  GSL_CONST_MKS_STANDARD_GAS_VOLUME = (2.2710981e-2) ;
  GSL_CONST_MKS_MINUTE = (6e1) ;
  GSL_CONST_MKS_HOUR = (3.6e3) ;
  GSL_CONST_MKS_DAY = (8.64e4) ;
  GSL_CONST_MKS_WEEK = (6.048e5) ;
  GSL_CONST_MKS_INCH = (2.54e-2) ;
  GSL_CONST_MKS_FOOT = (3.048e-1) ;
  GSL_CONST_MKS_YARD = (9.144e-1) ;
  GSL_CONST_MKS_MILE = (1.609344e3) ;
  GSL_CONST_MKS_NAUTICAL_MILE = (1.852e3) ;
  GSL_CONST_MKS_FATHOM = (1.8288e0) ;
  GSL_CONST_MKS_MIL = (2.54e-5) ;
  GSL_CONST_MKS_POINT = (3.52777777778e-4) ;
  GSL_CONST_MKS_TEXPOINT = (3.51459803515e-4) ;
  GSL_CONST_MKS_MICRON = (1e-6) ;
  GSL_CONST_MKS_ANGSTROM = (1e-10) ;
  GSL_CONST_MKS_HECTARE = (1e4) ;
  GSL_CONST_MKS_ACRE = (4.04685642241e3) ;
  GSL_CONST_MKS_BARN = (1e-28) ;
  GSL_CONST_MKS_LITER = (1e-3) ;
  GSL_CONST_MKS_US_GALLON = (3.78541178402e-3) ;
  GSL_CONST_MKS_QUART = (9.46352946004e-4) ;
  GSL_CONST_MKS_PINT = (4.73176473002e-4) ;
  GSL_CONST_MKS_CUP = (2.36588236501e-4) ;
  GSL_CONST_MKS_FLUID_OUNCE = (2.95735295626e-5) ;
  GSL_CONST_MKS_TABLESPOON = (1.47867647813e-5) ;
  GSL_CONST_MKS_TEASPOON = (4.92892159375e-6) ;
  GSL_CONST_MKS_CANADIAN_GALLON = (4.54609e-3) ;
  GSL_CONST_MKS_UK_GALLON = (4.546092e-3) ;
  GSL_CONST_MKS_MILES_PER_HOUR = (4.4704e-1) ;
  GSL_CONST_MKS_KILOMETERS_PER_HOUR = (2.77777777778e-1) ;
  GSL_CONST_MKS_KNOT = (5.14444444444e-1) ;
  GSL_CONST_MKS_POUND_MASS = (4.5359237e-1) ;
  GSL_CONST_MKS_OUNCE_MASS = (2.8349523125e-2) ;
  GSL_CONST_MKS_TON = (9.0718474e2) ;
  GSL_CONST_MKS_METRIC_TON = (1e3) ;
  GSL_CONST_MKS_UK_TON = (1.0160469088e3) ;
  GSL_CONST_MKS_TROY_OUNCE = (3.1103475e-2) ;
  GSL_CONST_MKS_CARAT = (2e-4) ;
  GSL_CONST_MKS_UNIFIED_ATOMIC_MASS = (1.66053873e-27) ;
  GSL_CONST_MKS_GRAM_FORCE = (9.80665e-3) ;
  GSL_CONST_MKS_POUND_FORCE = (4.44822161526e0) ;
  GSL_CONST_MKS_KILOPOUND_FORCE = (4.44822161526e3) ;
  GSL_CONST_MKS_POUNDAL = (1.38255e-1) ;
  GSL_CONST_MKS_CALORIE = (4.1868e0) ;
  GSL_CONST_MKS_BTU = (1.05505585262e3) ;
  GSL_CONST_MKS_THERM = (1.05506e8) ;
  GSL_CONST_MKS_HORSEPOWER = (7.457e2) ;
  GSL_CONST_MKS_BAR = (1e5) ;
  GSL_CONST_MKS_STD_ATMOSPHERE = (1.01325e5) ;
  GSL_CONST_MKS_TORR = (1.33322368421e2) ;
  GSL_CONST_MKS_METER_OF_MERCURY = (1.33322368421e5) ;
  GSL_CONST_MKS_INCH_OF_MERCURY = (3.38638815789e3) ;
  GSL_CONST_MKS_INCH_OF_WATER = (2.490889e2) ;
  GSL_CONST_MKS_PSI = (6.89475729317e3) ;
  GSL_CONST_MKS_POISE = (1e-1) ;
  GSL_CONST_MKS_STOKES = (1e-4) ;
  GSL_CONST_MKS_FARADAY = (9.6485341472e4) ;
  GSL_CONST_MKS_ELECTRON_CHARGE = (1.602176462e-19) ;
  GSL_CONST_MKS_GAUSS = (1e-4) ;
  GSL_CONST_MKS_STILB = (1e4) ;
  GSL_CONST_MKS_LUMEN = (1e0) ;
  GSL_CONST_MKS_LUX = (1e0) ;
  GSL_CONST_MKS_PHOT = (1e4) ;
  GSL_CONST_MKS_FOOTCANDLE = (1.076e1) ;
  GSL_CONST_MKS_LAMBERT = (1e4) ;
  GSL_CONST_MKS_FOOTLAMBERT = (1.07639104e1) ;
  GSL_CONST_MKS_CURIE = (3.7e10) ;
  GSL_CONST_MKS_ROENTGEN = (2.58e-4) ;
  GSL_CONST_MKS_RAD = (1e-2) ;
  GSL_CONST_MKS_SOLAR_MASS = (1.98892e30) ;
  GSL_CONST_MKS_BOHR_RADIUS = (5.291772083e-11) ;
  GSL_CONST_MKS_NEWTON = (1e0) ;
  GSL_CONST_MKS_DYNE = (1e-5) ;
  GSL_CONST_MKS_JOULE = (1e0) ;
  GSL_CONST_MKS_ERG = (1e-7) ;
  GSL_CONST_MKS_STEFAN_BOLTZMANN_CONSTANT = (5.67039934436e-8) ;
  GSL_CONST_MKS_THOMSON_CROSS_SECTION = (6.65245853542e-29) ;
  GSL_CONST_MKS_VACUUM_PERMITTIVITY = (8.854187817e-12) ;
  GSL_CONST_MKS_VACUUM_PERMEABILITY = (1.25663706144e-6) ;
  GSL_CONST_MKS_DEBYE = (3.33564095198e-30) ;

  //__GSL_CONST_MKSA__
  GSL_CONST_MKSA_SPEED_OF_LIGHT = (2.99792458e8) ;
  GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT = (6.673e-11) ;
  GSL_CONST_MKSA_PLANCKS_CONSTANT_H = (6.62606876e-34) ;
  GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR = (1.05457159642e-34) ;
  GSL_CONST_MKSA_ASTRONOMICAL_UNIT = (1.49597870691e11) ;
  GSL_CONST_MKSA_LIGHT_YEAR = (9.46053620707e15) ;
  GSL_CONST_MKSA_PARSEC = (3.08567758135e16) ;
  GSL_CONST_MKSA_GRAV_ACCEL = (9.80665e0) ;
  GSL_CONST_MKSA_ELECTRON_VOLT = (1.602176462e-19) ;
  GSL_CONST_MKSA_MASS_ELECTRON = (9.10938188e-31) ;
  GSL_CONST_MKSA_MASS_MUON = (1.88353109e-28) ;
  GSL_CONST_MKSA_MASS_PROTON = (1.67262158e-27) ;
  GSL_CONST_MKSA_MASS_NEUTRON = (1.67492716e-27) ;
  GSL_CONST_MKSA_RYDBERG = (2.17987190389e-18) ;
  GSL_CONST_MKSA_BOLTZMANN = (1.3806503e-23) ;
  GSL_CONST_MKSA_BOHR_MAGNETON = (9.27400899e-24) ;
  GSL_CONST_MKSA_NUCLEAR_MAGNETON = (5.05078317e-27) ;
  GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT = (9.28476362e-24) ;
  GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT = (1.410606633e-26) ;
  GSL_CONST_MKSA_MOLAR_GAS = (8.314472e0) ;
  GSL_CONST_MKSA_STANDARD_GAS_VOLUME = (2.2710981e-2) ;
  GSL_CONST_MKSA_MINUTE = (6e1) ;
  GSL_CONST_MKSA_HOUR = (3.6e3) ;
  GSL_CONST_MKSA_DAY = (8.64e4) ;
  GSL_CONST_MKSA_WEEK = (6.048e5) ;
  GSL_CONST_MKSA_INCH = (2.54e-2) ;
  GSL_CONST_MKSA_FOOT = (3.048e-1) ;
  GSL_CONST_MKSA_YARD = (9.144e-1) ;
  GSL_CONST_MKSA_MILE = (1.609344e3) ;
  GSL_CONST_MKSA_NAUTICAL_MILE = (1.852e3) ;
  GSL_CONST_MKSA_FATHOM = (1.8288e0) ;
  GSL_CONST_MKSA_MIL = (2.54e-5) ;
  GSL_CONST_MKSA_POINT = (3.52777777778e-4) ;
  GSL_CONST_MKSA_TEXPOINT = (3.51459803515e-4) ;
  GSL_CONST_MKSA_MICRON = (1e-6) ;
  GSL_CONST_MKSA_ANGSTROM = (1e-10) ;
  GSL_CONST_MKSA_HECTARE = (1e4) ;
  GSL_CONST_MKSA_ACRE = (4.04685642241e3) ;
  GSL_CONST_MKSA_BARN = (1e-28) ;
  GSL_CONST_MKSA_LITER = (1e-3) ;
  GSL_CONST_MKSA_US_GALLON = (3.78541178402e-3) ;
  GSL_CONST_MKSA_QUART = (9.46352946004e-4) ;
  GSL_CONST_MKSA_PINT = (4.73176473002e-4) ;
  GSL_CONST_MKSA_CUP = (2.36588236501e-4) ;
  GSL_CONST_MKSA_FLUID_OUNCE = (2.95735295626e-5) ;
  GSL_CONST_MKSA_TABLESPOON = (1.47867647813e-5) ;
  GSL_CONST_MKSA_TEASPOON = (4.92892159375e-6) ;
  GSL_CONST_MKSA_CANADIAN_GALLON = (4.54609e-3) ;
  GSL_CONST_MKSA_UK_GALLON = (4.546092e-3) ;
  GSL_CONST_MKSA_MILES_PER_HOUR = (4.4704e-1) ;
  GSL_CONST_MKSA_KILOMETERS_PER_HOUR = (2.77777777778e-1) ;
  GSL_CONST_MKSA_KNOT = (5.14444444444e-1) ;
  GSL_CONST_MKSA_POUND_MASS = (4.5359237e-1) ;
  GSL_CONST_MKSA_OUNCE_MASS = (2.8349523125e-2) ;
  GSL_CONST_MKSA_TON = (9.0718474e2) ;
  GSL_CONST_MKSA_METRIC_TON = (1e3) ;
  GSL_CONST_MKSA_UK_TON = (1.0160469088e3) ;
  GSL_CONST_MKSA_TROY_OUNCE = (3.1103475e-2) ;
  GSL_CONST_MKSA_CARAT = (2e-4) ;
  GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS = (1.66053873e-27) ;
  GSL_CONST_MKSA_GRAM_FORCE = (9.80665e-3) ;
  GSL_CONST_MKSA_POUND_FORCE = (4.44822161526e0) ;
  GSL_CONST_MKSA_KILOPOUND_FORCE = (4.44822161526e3) ;
  GSL_CONST_MKSA_POUNDAL = (1.38255e-1) ;
  GSL_CONST_MKSA_CALORIE = (4.1868e0) ;
  GSL_CONST_MKSA_BTU = (1.05505585262e3) ;
  GSL_CONST_MKSA_THERM = (1.05506e8) ;
  GSL_CONST_MKSA_HORSEPOWER = (7.457e2) ;
  GSL_CONST_MKSA_BAR = (1e5) ;
  GSL_CONST_MKSA_STD_ATMOSPHERE = (1.01325e5) ;
  GSL_CONST_MKSA_TORR = (1.33322368421e2) ;
  GSL_CONST_MKSA_METER_OF_MERCURY = (1.33322368421e5) ;
  GSL_CONST_MKSA_INCH_OF_MERCURY = (3.38638815789e3) ;
  GSL_CONST_MKSA_INCH_OF_WATER = (2.490889e2) ;
  GSL_CONST_MKSA_PSI = (6.89475729317e3) ;
  GSL_CONST_MKSA_POISE = (1e-1) ;
  GSL_CONST_MKSA_STOKES = (1e-4) ;
  GSL_CONST_MKSA_FARADAY = (9.6485341472e4) ;
  GSL_CONST_MKSA_ELECTRON_CHARGE = (1.602176462e-19) ;
  GSL_CONST_MKSA_GAUSS = (1e-4) ;
  GSL_CONST_MKSA_STILB = (1e4) ;
  GSL_CONST_MKSA_LUMEN = (1e0) ;
  GSL_CONST_MKSA_LUX = (1e0) ;
  GSL_CONST_MKSA_PHOT = (1e4) ;
  GSL_CONST_MKSA_FOOTCANDLE = (1.076e1) ;
  GSL_CONST_MKSA_LAMBERT = (1e4) ;
  GSL_CONST_MKSA_FOOTLAMBERT = (1.07639104e1) ;
  GSL_CONST_MKSA_CURIE = (3.7e10) ;
  GSL_CONST_MKSA_ROENTGEN = (2.58e-4) ;
  GSL_CONST_MKSA_RAD = (1e-2) ;
  GSL_CONST_MKSA_SOLAR_MASS = (1.98892e30) ;
  GSL_CONST_MKSA_BOHR_RADIUS = (5.291772083e-11) ;
  GSL_CONST_MKSA_NEWTON = (1e0) ;
  GSL_CONST_MKSA_DYNE = (1e-5) ;
  GSL_CONST_MKSA_JOULE = (1e0) ;
  GSL_CONST_MKSA_ERG = (1e-7) ;
  GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT = (5.67039934436e-8) ;
  GSL_CONST_MKSA_THOMSON_CROSS_SECTION = (6.65245853542e-29) ;
  GSL_CONST_MKSA_VACUUM_PERMITTIVITY = (8.854187817e-12) ;
  GSL_CONST_MKSA_VACUUM_PERMEABILITY = (1.25663706144e-6) ;
  GSL_CONST_MKSA_DEBYE = (3.33564095198e-30) ;


  //__GSL_CONST_NUM__
  GSL_CONST_NUM_FINE_STRUCTURE = (7.297352533e-3) ;
  GSL_CONST_NUM_AVOGADRO = (6.02214199e23) ;
  GSL_CONST_NUM_YOTTA = (1e24) ;
  GSL_CONST_NUM_ZETTA = (1e21) ;
  GSL_CONST_NUM_EXA = (1e18) ;
  GSL_CONST_NUM_PETA = (1e15) ;
  GSL_CONST_NUM_TERA = (1e12) ;
  GSL_CONST_NUM_GIGA = (1e9) ;
  GSL_CONST_NUM_MEGA = (1e6) ;
  GSL_CONST_NUM_KILO = (1e3) ;
  GSL_CONST_NUM_MILLI = (1e-3) ;
  GSL_CONST_NUM_MICRO = (1e-6) ;
  GSL_CONST_NUM_NANO = (1e-9) ;
  GSL_CONST_NUM_PICO = (1e-12) ;
  GSL_CONST_NUM_FEMTO = (1e-15) ;
  GSL_CONST_NUM_ATTO = (1e-18) ;
  GSL_CONST_NUM_ZEPTO = (1e-21) ;
  GSL_CONST_NUM_YOCTO = (1e-24) ;

  //__GSL_MACHINE_H__
  GSL_DBL_EPSILON = 2.2204460492503131e-16 ;
  GSL_SQRT_DBL_EPSILON = 1.4901161193847656e-08 ;
  GSL_ROOT3_DBL_EPSILON = 6.0554544523933429e-06 ;
  GSL_ROOT4_DBL_EPSILON = 1.2207031250000000e-04 ;
  GSL_ROOT5_DBL_EPSILON = 7.4009597974140505e-04 ;
  GSL_ROOT6_DBL_EPSILON = 2.4607833005759251e-03 ;
  GSL_LOG_DBL_EPSILON = (-3.6043653389117154e+01) ;
  GSL_DBL_MIN = 2.2250738585072014e-308 ;
  GSL_SQRT_DBL_MIN = 1.4916681462400413e-154 ;
  GSL_ROOT3_DBL_MIN = 2.8126442852362996e-103 ;
  GSL_ROOT4_DBL_MIN = 1.2213386697554620e-77 ;
  GSL_ROOT5_DBL_MIN = 2.9476022969691763e-62 ;
  GSL_ROOT6_DBL_MIN = 5.3034368905798218e-52 ;
  GSL_LOG_DBL_MIN = (-7.0839641853226408e+02) ;
  GSL_DBL_MAX = 1.7976931348623157e+308 ;
  GSL_SQRT_DBL_MAX = 1.3407807929942596e+154 ;
  GSL_ROOT3_DBL_MAX = 5.6438030941222897e+102 ;
  GSL_ROOT4_DBL_MAX = 1.1579208923731620e+77 ;
  GSL_ROOT5_DBL_MAX = 4.4765466227572707e+61 ;
  GSL_ROOT6_DBL_MAX = 2.3756689782295612e+51 ;
  GSL_LOG_DBL_MAX = 7.0978271289338397e+02 ;
  GSL_FLT_EPSILON = 1.1920928955078125e-07 ;
  GSL_SQRT_FLT_EPSILON = 3.4526698300124393e-04 ;
  GSL_ROOT3_FLT_EPSILON = 4.9215666011518501e-03 ;
  GSL_ROOT4_FLT_EPSILON = 1.8581361171917516e-02 ;
  GSL_ROOT5_FLT_EPSILON = 4.1234622211652937e-02 ;
  GSL_ROOT6_FLT_EPSILON = 7.0153878019335827e-02 ;
  GSL_LOG_FLT_EPSILON = (-1.5942385152878742e+01) ;
  GSL_FLT_MIN = 1.1754943508222875e-38 ;
  GSL_SQRT_FLT_MIN = 1.0842021724855044e-19 ;
  GSL_ROOT3_FLT_MIN = 2.2737367544323241e-13 ;
  GSL_ROOT4_FLT_MIN = 3.2927225399135965e-10 ;
  GSL_ROOT5_FLT_MIN = 2.5944428542140822e-08 ;
  GSL_ROOT6_FLT_MIN = 4.7683715820312542e-07 ;
  GSL_LOG_FLT_MIN = (-8.7336544750553102e+01) ;
  GSL_FLT_MAX = 3.4028234663852886e+38 ;
  GSL_SQRT_FLT_MAX = 1.8446743523953730e+19 ;
  GSL_ROOT3_FLT_MAX = 6.9814635196223242e+12 ;
  GSL_ROOT4_FLT_MAX = 4.2949672319999986e+09 ;
  GSL_ROOT5_FLT_MAX = 5.0859007855960041e+07 ;
  GSL_ROOT6_FLT_MAX = 2.6422459233807749e+06 ;
  GSL_LOG_FLT_MAX = 8.8722839052068352e+01 ;
  GSL_SFLT_EPSILON = 4.8828125000000000e-04 ;
  GSL_SQRT_SFLT_EPSILON = 2.2097086912079612e-02 ;
  GSL_ROOT3_SFLT_EPSILON = 7.8745065618429588e-02 ;
  GSL_ROOT4_SFLT_EPSILON = 1.4865088937534013e-01 ;
  GSL_ROOT5_SFLT_EPSILON = 2.1763764082403100e-01 ;
  GSL_ROOT6_SFLT_EPSILON = 2.8061551207734325e-01 ;
  GSL_LOG_SFLT_EPSILON = (-7.6246189861593985e+00) ;
  GSL_MACH_EPS = GSL_DBL_EPSILON ;
  //GSL_MACH_EPS = 1.0e-15;
  GSL_SQRT_MACH_EPS = 3.2e-08 ;
  GSL_ROOT3_MACH_EPS = 1.0e-05 ;
  GSL_ROOT4_MACH_EPS = 0.000178 ;
  GSL_ROOT5_MACH_EPS = 0.00100 ;
  GSL_ROOT6_MACH_EPS = 0.00316 ;
  GSL_LOG_MACH_EPS = (-34.54) ;


  //__GSL_MATH_H__
  M_E = 2.71828182845904523536028747135      ;
  M_LOG2E = 1.44269504088896340735992468100      ;
  M_LOG10E = 0.43429448190325182765112891892      ;
  M_SQRT2 = 1.41421356237309504880168872421      ;
  M_SQRT1_2 = 0.70710678118654752440084436210      ;
  M_SQRT3 = 1.73205080756887729352744634151      ;
  M_PI = 3.14159265358979323846264338328      ;
  M_PI_2 = 1.57079632679489661923132169164      ;
  M_PI_4 = 0.78539816339744830966156608458      ;
  M_SQRTPI = 1.77245385090551602729816748334      ;
  M_2_SQRTPI = 1.12837916709551257389615890312      ;
  M_1_PI = 0.31830988618379067153776752675      ;
  M_2_PI = 0.63661977236758134307553505349      ;
  M_LN10 = 2.30258509299404568401799145468      ;
  M_LN2 = 0.69314718055994530941723212146      ;
  M_LNPI = 1.14472988584940017414342735135      ;
  M_EULER = 0.57721566490153286060651209008      ;

  //__GSL_MESSAGE_H__
  GSL_MESSAGE_MASK = $ffffffff;

  //__GSL_MODE_H__
  GSL_PREC_DOUBLE = 0 ;
  GSL_PREC_SINGLE = 1 ;
  GSL_PREC_APPROX = 2 ;
  GSL_MODE_DEFAULT = 0 ;

  //__GSL_NAN_H__
  GSL_POSZERO = (+0) ;
  GSL_NEGZERO = (-0) ;

  //__GSL_ODEIV_H__
  GSL_ODEIV_HADJ_INC = 1  ;
  GSL_ODEIV_HADJ_NIL = 0  ;
  GSL_ODEIV_HADJ_DEC = (-1) ;

  //__GSL_PRECISION_H__
  _GSL_PREC_T_NUM = 3 ;

  //__GSL_SF_GAMMA_H__
  GSL_SF_GAMMA_XMAX = 171.0 ;
  GSL_SF_FACT_NMAX = 170 ;
  GSL_SF_DOUBLEFACT_NMAX = 297 ;

  //function call return values
  GSL_SUCCESS=0;
  GSL_FAILURE=-1;
  GSL_CONTINUE=-2;
  GSL_EDOM=1;
  GSL_ERANGE=2;
  GSL_EFAULT=3;
  GSL_EINVAL=4;
  GSL_EFAILED=5;
  GSL_EFACTOR=6;
  GSL_ESANITY=7;
  GSL_ENOMEM=8;
  GSL_EBADFUNC=9;
  GSL_ERUNAWAY=10;
  GSL_EMAXITER=11;
  GSL_EZERODIV=12;
  GSL_EBADTOL=13;
  GSL_ETOL=14;
  GSL_EUNDRFLW=15;
  GSL_EOVRFLW=16;
  GSL_ELOSS=17;
  GSL_EROUND=18;
  GSL_EBADLEN=19;
  GSL_ENOTSQR=20;
  GSL_ESING=21;
  GSL_EDIVERGE=22;
  GSL_EUNSUP=23;
  GSL_EUNIMPL=24;
  GSL_ECACHE=25;
  GSL_ETABLE=26;
  GSL_ENOPROG=27;
  GSL_ENOPROGJ=28;
  GSL_ETOLF=29;
  GSL_ETOLX=30;
  GSL_ETOLG=31;
  GSL_EOF=32;

  //Anonymous enum definition
  GSL_IEEE_TYPE_NAN=1;
  GSL_IEEE_TYPE_INF=2;
  GSL_IEEE_TYPE_NORMAL=3;
  GSL_IEEE_TYPE_DENORMAL=4;
  GSL_IEEE_TYPE_ZERO=5;

  //Anonymous enum definition
  GSL_IEEE_SINGLE_PRECISION=1;
  GSL_IEEE_DOUBLE_PRECISION=2;
  GSL_IEEE_EXTENDED_PRECISION=3;

  //Anonymous enum definition
  GSL_IEEE_ROUND_TO_NEAREST=1;
  GSL_IEEE_ROUND_DOWN=2;
  GSL_IEEE_ROUND_UP=3;
  GSL_IEEE_ROUND_TO_ZERO=4;

  //Anonymous enum definition
  GSL_IEEE_MASK_INVALID=1;
  GSL_IEEE_MASK_DENORMALIZED=2;
  GSL_IEEE_MASK_DIVISION_BY_ZERO=4;
  GSL_IEEE_MASK_OVERFLOW=8;
  GSL_IEEE_MASK_UNDERFLOW=16;
  GSL_IEEE_MASK_ALL=31;
  GSL_IEEE_TRAP_INEXACT=32;

  GSL_INTEG_GAUSS15=1;
  GSL_INTEG_GAUSS21=2;
  GSL_INTEG_GAUSS31=3;
  GSL_INTEG_GAUSS41=4;
  GSL_INTEG_GAUSS51=5;
  GSL_INTEG_GAUSS61=6;

  //Anonymous enum definition
  GSL_MESSAGE_MASK_A=1;
  GSL_MESSAGE_MASK_B=2;
  GSL_MESSAGE_MASK_C=4;
  GSL_MESSAGE_MASK_D=8;
  GSL_MESSAGE_MASK_E=16;
  GSL_MESSAGE_MASK_F=32;
  GSL_MESSAGE_MASK_G=64;
  GSL_MESSAGE_MASK_H=128;

  //Anonymous enum definition
  GSL_VEGAS_MODE_IMPORTANCE=1;
  GSL_VEGAS_MODE_IMPORTANCE_ONLY=0;
  GSL_VEGAS_MODE_STRATIFIED=-1;

type
  gsl_eigen_sort_t = Integer;
const
  GSL_EIGEN_SORT_VAL_ASC = 0;
  GSL_EIGEN_SORT_VAL_DESC = 1;
  GSL_EIGEN_SORT_ABS_ASC = 2;
  GSL_EIGEN_SORT_ABS_DESC = 3;
type
  gsl_linalg_matrix_mod_t = Integer;
const
  GSL_LINALG_MOD_NONE : gsl_linalg_matrix_mod_t = 0;
  GSL_LINALG_MOD_TRANSPOSE : gsl_linalg_matrix_mod_t = 1;
  GSL_LINALG_MOD_CONJUGATE : gsl_linalg_matrix_mod_t = 2;

type
  TPasToC_OpenArray = Array of Byte;  //paramtype, must be rewrite
  pint = ^int;
  int = Integer;

  pvoid = pointer;

  punsingedint = ^unsignedint;
  unsignedint = UINT;

  punsignedchar = ^unsignedchar;
  unsignedchar = UCHAR;

  ppdouble = ^Pdouble;
  pfloat = ^float;
  float = single;

  plongdouble = ^longdouble;
  longdouble = array[0..11] of byte;

  punsignedLong = ^unsignedLong;
  unsignedLong = ULONG;
  unsignedLongInt = unsignedLong;

  psize_t = ^size_t;
  size_t = Cardinal;
  CBLAS_INDEX = size_t;
  CBLAS_INDEX_t = CBLAS_INDEX;
  plong = ^long;
  long = LongInt;

  pshort = ^short;
  short = windows.SHORT;
  punsignedshort = ^ushort;
  ushort = Word;    //0..65535
  unsignedShort = Word;

  PUnsignedInt = ^UINT;

  gsl_mode_t = UINT;

 (* MICROSOFT VC++ STDIO'S FILE DEFINITION*)
        _iobuf = packed record
                _ptr: Pchar;
                _cnt: integer;
                _base: Pchar;
                _flag: integer;
                _file: integer;
                _charbuf: integer;
                _bufsiz: integer;
                _tmpfname: Pchar;
        end;


        PFile = ^TFile;
        TFile = _iobuf;

  //gsl_block_char.h
pgsl_block_char_struct = ^gsl_block_char_struct;
gsl_block_char_struct = record
    size : size_t;
    data : pchar;
end;
pgsl_block_char = ^gsl_block_char;
gsl_block_char = gsl_block_char_struct;

//gsl_block_complex_double.h
pgsl_block_complex_struct = ^gsl_block_complex;
gsl_block_complex_struct = record
    size : size_t;
    data : pdouble;
end;
pgsl_block_complex = ^gsl_block_complex;
gsl_block_complex = gsl_block_complex_struct;

//gsl_block_complex_float.h
pgsl_block_complex_float_struct = ^gsl_block_complex_float_struct;
gsl_block_complex_float_struct = record
    size : size_t;
    data : pfloat;
end;
pgsl_block_complex_float = gsl_block_complex_float_struct;
gsl_block_complex_float = gsl_block_complex_float_struct;


//gsl_block_complex_long_double.h
pgsl_block_complex_long_double_struct = ^gsl_block_complex_long_double_struct;
gsl_block_complex_long_double_struct = record
    size : size_t;
    data : plongdouble;
end;
pgsl_block_complex_long_double = ^gsl_block_complex_long_double;
gsl_block_complex_long_double = gsl_block_complex_long_double_struct;


//gsl_block_double.h
pgsl_block_struct = ^gsl_block_struct;
gsl_block_struct = record
    size : size_t;
    data : pdouble;
end;
pgsl_block = ^gsl_block;
gsl_block = gsl_block_struct;


//gsl_block_float.h
pgsl_block_float_struct = ^gsl_block_float_struct;
gsl_block_float_struct = record
    size : size_t;
    data : pfloat;
end;
pgsl_block_float = ^gsl_block_float;
gsl_block_float = gsl_block_float_struct;


//gsl_block_int.h
pgsl_block_int_struct = ^gsl_block_int_struct;
gsl_block_int_struct = record
    size : size_t;
    data : pint;
end;
pgsl_block_int = ^gsl_block_int;
gsl_block_int = gsl_block_int_struct;

//gsl_block_long.h
pgsl_block_long_struct = ^gsl_block_long_struct;
gsl_block_long_struct = record
    size : size_t;
    data : plong;
end;
pgsl_block_long = ^gsl_block_long;
gsl_block_long = gsl_block_long_struct;


//gsl_block_long_double.h
pgsl_block_long_double_struct = ^gsl_block_long_double_struct;
gsl_block_long_double_struct = record
    size : size_t;
    data : plongdouble;
end;
pgsl_block_long_double = ^gsl_block_long_double;
gsl_block_long_double = gsl_block_long_double_struct;


//gsl_block_short.h
pgsl_block_short_struct = ^gsl_block_short_struct;
gsl_block_short_struct = record
    size : size_t;
    data : pshort;
end;
pgsl_block_short = ^gsl_block_short;
gsl_block_short = gsl_block_short_struct;


//gsl_block_uchar.h
pgsl_block_uchar_struct = ^gsl_block_uchar_struct;
gsl_block_uchar_struct = record
    size : size_t;
    data : PUChar;
end;
pgsl_block_uchar = ^gsl_block_uchar;
gsl_block_uchar = gsl_block_uchar_struct;


//gsl_block_uint.h
pgsl_block_uint_struct = ^gsl_block_uint_struct;
gsl_block_uint_struct = record
    size : size_t;
    data : PCardinal;
end;
pgsl_block_uint = ^gsl_block_uint;
gsl_block_uint = gsl_block_uint_struct;


//gsl_block_ulong.h
pgsl_block_ulong_struct = ^gsl_block_ulong_struct;
gsl_block_ulong_struct = record
    size : size_t;
    data : PULONG;
end;
pgsl_block_ulong = ^gsl_block_ulong;
gsl_block_ulong = gsl_block_ulong_struct;


//gsl_block_ushort.h
pgsl_block_ushort_struct = ^gsl_block_ushort_struct;
gsl_block_ushort_struct = record
    size : size_t;
    data : punsignedshort;
end;
pgsl_block_ushort = ^gsl_block_ushort;
gsl_block_ushort = gsl_block_ushort_struct;


//gsl_cblas.h

//gsl_cdf.h

//gsl_chebyshev.h
pgsl_cheb_series_struct = ^gsl_cheb_series_struct;
gsl_cheb_series_struct = record
    c : pdouble;
    order : size_t;
    a : double;
    b : double;
    order_sp : size_t;
    f : pdouble;
end;
pgsl_cheb_series = ^gsl_cheb_series;
gsl_cheb_series = gsl_cheb_series_struct;


//gsl_check_range.h

//gsl_combination.h

pgsl_combination_struct = ^gsl_combination_struct;
gsl_combination_struct = record
    n : size_t;
    k : size_t;
    data : psize_t;
end;
pgsl_combination = ^gsl_combination;
gsl_combination = gsl_combination_struct;


//gsl_complex.h
pgsl_complex_long_double = ^gsl_complex_long_double;
gsl_complex_long_double = record
    dat : array [0..2-1] of longdouble;
end;

pgsl_complex = ^gsl_complex;
gsl_complex = record
    dat : array [0..2-1] of double;
end;

pgsl_complex_float = ^gsl_complex_float;
gsl_complex_float = record
    dat : array [0..2-1] of float;
end;

gsl_complex_packed_array = pdouble;
gsl_complex_packed_array_float = pfloat;
gsl_complex_packed_array_long_double = plongdouble;

gsl_const_complex_packed_array = pdouble;  //const
gsl_const_complex_packed_array_float = pfloat;//const
gsl_const_complex_packed_array_long_double = plongdouble; //const

gsl_complex_packed_ptr = pdouble;
gsl_complex_packed_float_ptr = pfloat;
gsl_complex_packed_long_double_ptr = plongdouble;

//gsl_complex_math.h

//gsl_const.h

//gsl_const_cgs.h

//gsl_const_cgsm.h

//gsl_const_mks.h

//gsl_const_mksa.h

//gsl_const_num.h

//gsl_deriv.h

//gsl_dft_complex.h

//gsl_dft_complex_float.h

//gsl_dht.h
pgsl_dht_struct = ^gsl_dht_struct;
gsl_dht_struct = record
    size : size_t;
    nu : double;
    xmax : double;
    kmax : double;
    j : pdouble;
    Jjj : pdouble;
    J2 : pdouble;
end;
pgsl_dht = ^gsl_dht;
gsl_dht = gsl_dht_struct;


//gsl_diff.h

//gsl_eigen.h
pgsl_eigen_symm_workspace = ^gsl_eigen_symm_workspace;
gsl_eigen_symm_workspace = record
    size : size_t;
    d : pdouble;
    sd : pdouble;
end;

pgsl_eigen_symmv_workspace = ^gsl_eigen_symmv_workspace;
gsl_eigen_symmv_workspace = record
    size : size_t;
    d : pdouble;
    sd : pdouble;
    gc : pdouble;
    gs : pdouble;
end;

pgsl_eigen_herm_workspace = ^gsl_eigen_herm_workspace;
gsl_eigen_herm_workspace = record
    size : size_t;
    d : pdouble;
    sd : pdouble;
    tau : pdouble;
end;

pgsl_eigen_hermv_workspace = ^gsl_eigen_hermv_workspace;
gsl_eigen_hermv_workspace = record
    size : size_t;
    d : pdouble;
    sd : pdouble;
    tau : pdouble;
    gc : pdouble;
    gs : pdouble;
end;


//gsl_errno.h

//gsl_fft.h
  gsl_fft_direction = Integer;
const
  forwardV : gsl_fft_direction = -1;
  backward : gsl_fft_direction = 1;
  gsl_fft_forward : gsl_fft_direction = -1;
  gsl_fft_backward : gsl_fft_direction = 1;
type
//gsl_fft_complex.h
pgsl_complex64array = ^gsl_complex64array;
gsl_complex64array = array [0..64-1] of gsl_complex;

pgsl_fft_complex_wavetable = ^gsl_fft_complex_wavetable;
gsl_fft_complex_wavetable = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex64array;
    trig : pgsl_complex;
end;

pgsl_fft_complex_workspace = ^gsl_fft_complex_workspace;
gsl_fft_complex_workspace = record
    n : size_t;
    scratch : pdouble;
end;


//gsl_fft_complex_float.h
pgsl_complex_float64array = ^gsl_complex_float64array;
gsl_complex_float64array = array [0..64-1] of gsl_complex_float;

pgsl_fft_complex_wavetable_float = ^gsl_fft_complex_wavetable_float;
gsl_fft_complex_wavetable_float = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex_float64array;
    trig : pgsl_complex_float;
end;

pgsl_fft_complex_workspace_float = ^gsl_fft_complex_workspace_float;
gsl_fft_complex_workspace_float = record
    n : size_t;
    scratch : pfloat;
end;


//gsl_fft_halfcomplex.h
pgsl_fft_halfcomplex_wavetable = ^gsl_fft_halfcomplex_wavetable;
gsl_fft_halfcomplex_wavetable = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex64array; // parray [0..64-1] of gsl_complex;
    trig : pgsl_complex;
end;


//gsl_fft_halfcomplex_float.h
pgsl_fft_halfcomplex_wavetable_float = ^gsl_fft_halfcomplex_wavetable_float;
gsl_fft_halfcomplex_wavetable_float = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex_float64array;
    trig : pgsl_complex_float;
end;


//gsl_fft_real.h
pgsl_fft_real_wavetable = ^gsl_fft_real_wavetable;
gsl_fft_real_wavetable = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex64array; // parray [0..64-1] of gsl_complex;
    trig : pgsl_complex;
end;

pgsl_fft_real_workspace = ^gsl_fft_real_workspace;
gsl_fft_real_workspace = record
    n : size_t;
    scratch : pdouble;
end;


//gsl_fft_real_float.h
pgsl_fft_real_wavetable_float = ^gsl_fft_real_wavetable_float;
gsl_fft_real_wavetable_float = record
    n : size_t;
    nf : size_t;
    factor : array [0..64-1] of size_t;
    twiddle : pgsl_complex_float64array;
    trig : pgsl_complex_float;
end;

pgsl_fft_real_workspace_float = ^gsl_fft_real_workspace_float;
gsl_fft_real_workspace_float = record
    n : size_t;
    scratch : pfloat;
end;


//gsl_fit.h

//gsl_heapsort.h

gsl_comparison_fn_t = function(const x, y : pvoid) : Integer;cdecl;

//gsl_histogram2d.h
pgsl_histogram2d = ^gsl_histogram2d;
gsl_histogram2d = record
    nx, ny : size_t;
    xrange : pdouble;
    yrange : pdouble;
    bin : pdouble;
end;

pgsl_histogram2d_pdf = ^gsl_histogram2d_pdf;
gsl_histogram2d_pdf = record
    nx, ny : size_t;
    xrange : pdouble;
    yrange : pdouble;
    sum : pdouble;
end;


//gsl_histogram.h
pgsl_histogram = ^gsl_histogram;
gsl_histogram = record
    n : size_t;
    range : pdouble;
    bin : pdouble;
end;

pgsl_histogram_pdf = ^gsl_histogram_pdf;
gsl_histogram_pdf = record
    n : size_t;
    range : pdouble;
    sum : pdouble;
end;


//gsl_ieee_utils.h
pgsl_ieee_float_rep = ^gsl_ieee_float_rep;
gsl_ieee_float_rep = record
    sign : Integer;
    mantissa : array [0..24-1] of ansichar;
    exponent : Integer;
    typevalue : Integer;
end;

pgsl_ieee_double_rep = ^gsl_ieee_double_rep;
gsl_ieee_double_rep = record
    sign : Integer;
    mantissa : array [0..53-1] of Ansichar;
    exponent : Integer;
    typeValue : Integer;
end;


//gsl_integration.h
  gsl_integration_qawo_enum = Integer;
const
  GSL_INTEG_COSINE : gsl_integration_qawo_enum = 0;
  GSL_INTEG_SINE : gsl_integration_qawo_enum = 1;

type
pgsl_integration_workspace  = ^gsl_integration_workspace;
gsl_integration_workspace = record
    limit : size_t;
    size : size_t;
    nrmax : size_t;
    i : size_t;
    maximum_level : size_t;
    alist : pdouble;
    blist : pdouble;
    rlist : pdouble;
    elist : pdouble;
    order : psize_t;
    level : psize_t;
end;

pgsl_integration_qaws_table = ^gsl_integration_qaws_table;
gsl_integration_qaws_table = record
    alpha : double;
    beta : double;
    mu : Integer;
    nu : Integer;
    ri : array [0..25-1] of double;
    rj : array [0..25-1] of double;
    rg : array [0..25-1] of double;
    rh : array [0..25-1] of double;
end;

pgsl_integration_qawo_table = ^gsl_integration_qawo_table;
gsl_integration_qawo_table = record
    n : size_t;
    omega : double;
    L : double;
    par : double;
    sine : gsl_integration_qawo_enum;
    chebmo : pdouble;
end;


//gsl_interp.h
pgsl_interp_accel = ^gsl_interp_accel;
gsl_interp_accel = record
    cache : size_t;
    miss_count : size_t;
    hit_count : size_t;
end;

pgsl_alloc = ^gsl_alloc;
gsl_alloc = function(size : size_t) : pointer;
pgsl_init = ^gsl_init;
gsl_init = function(p : Pointer; const xa, ya : array of double; size : size_t) : Integer;
pgsl_eval = ^gsl_eval;
gsl_eval = function(const p : Pointer; const xa, ya : array of double; size : size_t; x : double;
                    accel : pgsl_interp_accel; py : PDouble) : Integer;
pgsl_eval_deriv = ^gsl_eval_deriv;
gsl_eval_deriv = function(const p : Pointer; const xa, ya : array of double; size : size_t; x : double;
                    accel : pgsl_interp_accel; py_p : PDouble) : Integer;
pgsl_eval_deriv2 = ^gsl_eval_deriv2;
gsl_eval_deriv2 = function(const p : Pointer; const xa, ya : array of double; size : size_t; x : double;
                    accel : pgsl_interp_accel; py_pp : PDouble) : Integer;
pgsl_eval_integ = ^gsl_eval_integ;
gsl_eval_integ = function(const p : Pointer; const xa, ya : array of double; size : size_t;
                    accel : pgsl_interp_accel; a, b : double; presult : PDouble) : Integer;
pgsl_free = ^gsl_free;
gsl_free = procedure(p : Pointer);

pgsl_interp_type = ^gsl_interp_type;
gsl_interp_type = record
    name : pansichar;  //const
    min_size : ushort;
    alloc : pgsl_alloc;   //void * ( * alloc ) ( size_t size ) ;
    init : pgsl_init;  // int ( * init ) ( void * , const double xa [ ] , const double ya [ ] , size_t size ) ;
    eval : pgsl_eval;  // int ( * eval ) ( const void * , const double xa [ ] ,
                       //const double ya [ ] , size_t size , double x , gsl_interp_accel * , double * y ) ;
    eval_deriv : pgsl_eval_deriv;  // int ( * eval_deriv ) ( const void * , const double xa [ ] , const double ya [ ] , size_t size ,
                                   //double x , gsl_interp_accel * , double * y_p ) ;
    eval_deriv2 : pgsl_eval_deriv2; // int ( * eval_deriv2 ) ( const void * , const double xa [ ] , const double ya [ ] , size_t size ,
                                    //double x , gsl_interp_accel * , double * y_pp ) ;
    eval_integ : pgsl_eval_integ; // int ( * eval_integ ) ( const void * , const double xa [ ] , const double ya [ ] , size_t size ,
                                  //gsl_interp_accel * , double a , double b , double * result ) ;
    free : pgsl_free; // void ( * free ) ( void * ) ;
end;

pgsl_interp = ^gsl_interp;
gsl_interp = record
    typeValue : pgsl_interp_type;  //const
    xmin : double;
    xmax : double;
    size : size_t;
    state : pvoid;
end;


//gsl_interp2d.h
p_alloc_interp2d = ^alloc_interp2d;
alloc_interp2d = function(xsize, ysize: size_t) : pointer;

p_init_interp2d = ^init_interp2d;
init_interp2d = function(p : Pointer; const xa, ya, za : array of double; xsize, ysize : size_t) : Integer;

p_eval_interp2d = ^eval_interp2d;
eval_interp2d = function(const p : Pointer; const xa, ya, za : array of double; xsize, ysize : size_t; x, y : double;
                    accelx,  accely: pgsl_interp_accel; z : PDouble) : Integer;

p_eval_deriv_interp2d = ^eval_deriv_interp2d;
eval_deriv_interp2d = function(const p : Pointer; const xa, ya, za : array of double; xsize, ysize : size_t; x, y : double;
                    accelx, accely : pgsl_interp_accel; z_p : PDouble) : Integer;

pgsl_interp2d_type = ^gsl_interp2d_type;
gsl_interp2d_type = record
    name : pansichar;  //const
    min_size : ushort;
    alloc         : p_alloc_interp2d;
    init          : p_init_interp2d;
    eval          : p_eval_interp2d;
    eval_deriv_x  :p_eval_deriv_interp2d;
    eval_deriv_y  :p_eval_deriv_interp2d;
    eval_deriv_xx :p_eval_deriv_interp2d;
    eval_deriv_xy :p_eval_deriv_interp2d;
    eval_deriv_yy :p_eval_deriv_interp2d;
    free : pgsl_free;
end;

pgsl_interp2d = ^gsl_interp2d;
gsl_interp2d = record
    typeValue : pgsl_interp2d_type;  (* interpolation type *)
    xmin  : double;                  {minimum value of x for which data have been provided}
    xmax  : double;                  {maximum value of x for which data have been provided}
    ymin  : double;                  {minimum value of y for which data have been provided}
    ymax  : double;                  {maximum value of y for which data have been provided}
    xsize : size_t;                  {number of x values provided}
    ysize : size_t;                  {number of y values provided}
    state : pvoid;                   {internal state object specific to the interpolation type}
end;

//gsl_linalg.h

//gsl_machine.h

//gsl_math.h
pgsl_function_A = ^gsl_function_A;
gsl_function_A = function(x : double; params : pvoid) : double; cdecl;
pgsl_function_B = ^gsl_function_B;
gsl_function_B = procedure(x : double; params : pvoid; f, df : pdouble); cdecl;

pgsl_function_struct = ^gsl_function_struct;
gsl_function_struct = record
    func : pgsl_function_A;
    params : pvoid;
end;
pgsl_function = ^gsl_function;
gsl_function = gsl_function_struct;

pgsl_function_fdf_struct = ^gsl_function_fdf_struct;
gsl_function_fdf_struct = record
    f : pgsl_function_A;   //double ( * f ) ( double x , void * params ) ;
    df : pgsl_function_A;  // double ( * df ) ( double x , void * params ) ;
    fdf : pgsl_function_B; // void ( * fdf ) ( double x , void * params , double * f , double * df ) ;
    params : pvoid;
end;
pgsl_function_fdf = ^gsl_function_fdf;
gsl_function_fdf = gsl_function_fdf_struct;

pgsl_function_vec = ^gsl_function_vec;
gsl_function_vec = function(x : double; y : array of double; params : pvoid) : Integer; cdecl;

gsl_function_vec_struct = record
    func : pgsl_function_vec;  //int ( * function ) ( double x , double y [ ] , void * params ) ;
    params : pvoid;
end;


//gsl_matrix.h

//gsl_matrix_char.h
pgsl_matrix_char = ^gsl_matrix_char;
gsl_matrix_char = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pchar;
    block : pgsl_block_char;
    owner : Integer;
end;

p_gsl_matrix_char_view = ^_gsl_matrix_char_view;
_gsl_matrix_char_view = record
    matrix : gsl_matrix_char;
end;

p_gsl_matrix_char_const_view = ^_gsl_matrix_char_const_view;
_gsl_matrix_char_const_view = record
    matrix : gsl_matrix_char;
end;


//gsl_matrix_complex_double.h
pgsl_matrix_complex = ^gsl_matrix_complex;
gsl_matrix_complex = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pdouble;
    block : pgsl_block_complex;
    owner : Integer;
end;

p_gsl_matrix_complex_view = ^_gsl_matrix_complex_view;
_gsl_matrix_complex_view = record
    matrix : gsl_matrix_complex;
end;

p_gsl_matrix_complex_const_view = ^_gsl_matrix_complex_const_view;
_gsl_matrix_complex_const_view = record
    matrix : gsl_matrix_complex;
end;


//gsl_matrix_complex_float.h
pgsl_matrix_complex_float = ^gsl_matrix_complex_float;
gsl_matrix_complex_float = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pfloat;
    block : pgsl_block_complex_float;
    owner : Integer;
end;

p_gsl_matrix_complex_float_view = ^_gsl_matrix_complex_float_view;
_gsl_matrix_complex_float_view = record
    matrix : gsl_matrix_complex_float;
end;

p_gsl_matrix_complex_float_const_view = ^_gsl_matrix_complex_float_const_view;
_gsl_matrix_complex_float_const_view = record
    matrix : gsl_matrix_complex_float;
end;


//gsl_matrix_complex_long_double.h
pgsl_matrix_complex_long_double = ^gsl_matrix_complex_long_double;
gsl_matrix_complex_long_double = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : plongdouble;
    block : pgsl_block_complex_long_double;
    owner : Integer;
end;

p_gsl_matrix_complex_long_double_view = ^_gsl_matrix_complex_long_double_view;
_gsl_matrix_complex_long_double_view = record
    matrix : gsl_matrix_complex_long_double;
end;

_gsl_matrix_complex_long_double_const_view = record
    matrix : gsl_matrix_complex_long_double;
end;


//gsl_matrix_double.h
pgsl_matrix = ^gsl_matrix;
gsl_matrix = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pdouble;
    block : pgsl_block;
    owner : Integer;
end;

p_gsl_matrix_view = ^_gsl_matrix_view;
_gsl_matrix_view = record
    matrix : gsl_matrix;
end;

p_gsl_matrix_const_view = ^_gsl_matrix_const_view;
_gsl_matrix_const_view = record
    matrix : gsl_matrix;
end;


//gsl_matrix_float.h
pgsl_matrix_float = ^gsl_matrix_float;
gsl_matrix_float = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pfloat;
    block : pgsl_block_float;
    owner : Integer;
end;

p_gsl_matrix_float_view = ^_gsl_matrix_float_view;
_gsl_matrix_float_view = record
    matrix : gsl_matrix_float;
end;

p_gsl_matrix_float_const_view = ^_gsl_matrix_float_const_view;
_gsl_matrix_float_const_view = record
    matrix : gsl_matrix_float;
end;


//gsl_matrix_int.h
pgsl_matrix_int = ^gsl_matrix_int;
gsl_matrix_int = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pInteger;
    block : pgsl_block_Int;
    owner : Integer;
end;

_gsl_matrix_int_view = record
    matrix : gsl_matrix_Int;
end;

_gsl_matrix_int_const_view = record
    matrix : gsl_matrix_Int;
end;


//gsl_matrix_long.h
pgsl_matrix_long = ^gsl_matrix_long;
gsl_matrix_long = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : plong;
    block : pgsl_block_long;
    owner : Integer;
end;

p_gsl_matrix_long_view = ^_gsl_matrix_long_view;
_gsl_matrix_long_view = record
    matrix : gsl_matrix_long;
end;

_gsl_matrix_long_const_view = record
    matrix : gsl_matrix_long;
end;


//gsl_matrix_long_double.h
pgsl_matrix_long_double = ^gsl_matrix_long_double;
gsl_matrix_long_double = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : plongdouble;
    block : pgsl_block_long_double;
    owner : Integer;
end;

_gsl_matrix_long_double_view = record
    matrix : gsl_matrix_long_double;
end;

_gsl_matrix_long_double_const_view = record
    matrix : gsl_matrix_long_double;
end;


//gsl_matrix_short.h
pgsl_matrix_short = ^gsl_matrix_short;
gsl_matrix_short = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : pshort;
    block : pgsl_block_short;
    owner : Integer;
end;

_gsl_matrix_short_view = record
    matrix : gsl_matrix_short;
end;

_gsl_matrix_short_const_view = record
    matrix : gsl_matrix_short;
end;


//gsl_matrix_uchar.h
pgsl_matrix_uchar = ^gsl_matrix_uchar;
gsl_matrix_uchar = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : PUChar;
    block : pgsl_block_uchar;
    owner : Integer;
end;

_gsl_matrix_uchar_view = record
    matrix : gsl_matrix_uchar;
end;

_gsl_matrix_uchar_const_view = record
    matrix : gsl_matrix_uchar;
end;


//gsl_matrix_uint.h
pgsl_matrix_uint = ^gsl_matrix_uint;
gsl_matrix_uint = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : PCardinal;
    block : pgsl_block_uInt;
    owner : Integer;
end;

_gsl_matrix_uint_view = record
    matrix : gsl_matrix_uInt;
end;

_gsl_matrix_uint_const_view = record
    matrix : gsl_matrix_uInt;
end;


//gsl_matrix_ulong.h
pgsl_matrix_ulong = ^gsl_matrix_ulong;
gsl_matrix_ulong = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : PULong;
    block : pgsl_block_ulong;
    owner : Integer;
end;

_gsl_matrix_ulong_view = record
    matrix : gsl_matrix_ulong;
end;

_gsl_matrix_ulong_const_view = record
    matrix : gsl_matrix_ulong;
end;


//gsl_matrix_ushort.h
pgsl_matrix_ushort = ^gsl_matrix_ushort;
gsl_matrix_ushort = record
    size1 : size_t;
    size2 : size_t;
    tda : size_t;
    data : punsignedshort;
    block : pgsl_block_ushort;
    owner : Integer;
end;

_gsl_matrix_ushort_view = record
    matrix : gsl_matrix_ushort;
end;

_gsl_matrix_ushort_const_view = record
    matrix : gsl_matrix_ushort;
end;


//gsl_message.h

//gsl_min.h
pgsl_min_set_function = ^gsl_min_set_function;
gsl_min_set_function = function(state : pvoid; f : pgsl_function; x_minimum , f_minimum , x_lower ,
                                f_lower , x_upper , f_upper : double) : Integer;cdecl;
pgsl_min_iterate_function = ^gsl_min_iterate_function;
gsl_min_iterate_function = function(state : pvoid; f : pgsl_function; pminx, pminf, pxLow,
                                pfLow, pxUpper, pfUpper : PDouble) : Integer; cdecl;

pgsl_min_fminimizer_type = ^gsl_min_fminimizer_type;
gsl_min_fminimizer_type = record
    name : pchar;  //const
    size : size_t;
    // int ( * set ) ( void * state , gsl_function * f , double x_minimum , double f_minimum , double x_lower , double f_lower , double x_upper , double f_upper ) ;
    //    f_set : pgsl_min_set_function;
    iterate : pgsl_min_iterate_function;
    //     int ( * iterate ) ( void * state , gsl_function * f , double * x_minimum , double * f_minimum ,
    //              double * x_lower , double * f_lower , double * x_upper , double * f_upper ) ;
end;

pgsl_min_fminimizer = ^gsl_min_fminimizer;
gsl_min_fminimizer = record
    typevalue : pgsl_min_fminimizer_type;  //const
    func : pgsl_function;
    x_minimum : double;
    x_lower : double;
    x_upper : double;
    f_minimum, f_lower, f_upper : double;
    state : pvoid;
end;


//gsl_mode.h

//gsl_monte.h
pgsl_monte_function = ^gsl_monte_function;
gsl_monte_function = function(x_array : pdouble; dim : size_t; param : pvoid) : double;
pgsl_monte_function_struct = ^gsl_monte_function_struct;
gsl_monte_function_struct = record
    f : pgsl_monte_function; // double ( * f ) ( double * x_array , size_t dim , void * params ) ;
    dim : size_t;
    params : pvoid;
end;


//gsl_monte_miser.h
pgsl_monte_miser_state = ^gsl_monte_miser_state;
gsl_monte_miser_state = record
    min_calls : size_t;
    min_calls_per_bisection : size_t;
    dither : double;
    estimate_frac : double;
    alpha : double;
    dim : size_t;
    estimate_style : Integer;
    depth : Integer;
    verbose : Integer;
    x : pdouble;
    xmid : pdouble;
    sigma_l : pdouble;
    sigma_r : pdouble;
    fmax_l : pdouble;
    fmax_r : pdouble;
    fmin_l : pdouble;
    fmin_r : pdouble;
    fsum_l : pdouble;
    fsum_r : pdouble;
    fsum2_l : pdouble;
    fsum2_r : pdouble;
    hits_l : psize_t;
    hits_r : psize_t;
end;


//gsl_monte_plain.h
pgsl_monte_plain_state = ^gsl_monte_plain_state;
gsl_monte_plain_state = record
    dim : size_t;
    x : pdouble;
end;


//gsl_monte_vegas.h
pgsl_monte_vegas_state = ^gsl_monte_vegas_state;
gsl_monte_vegas_state = record
    dim : size_t;
    bins_max : size_t;
    bins : Cardinal;
    boxes : Cardinal;   //unsigned int ????
    xi : pdouble;
    xin : pdouble;
    delx : pdouble;
    weight : pdouble;
    vol : double;
    x : pdouble;
    bin : pInteger;
    box : pInteger;
    d : pdouble;
    alpha : double;
    mode : Integer;
    verbose : Integer;
    iterations : Cardinal;
    stage : Integer;
    jac : double;
    wtd_int_sum : double;
    sum_wgts : double;
    chi_sum : double;
    chisq : double;
    result : double;
    sigma : double;
    it_start : Cardinal;
    it_num : Cardinal;
    samples : Cardinal;
    calls_per_box : Cardinal;
    ostream : pFILE;
end;

//gsl_nan.h

//gsl_ntuple.h
pgsl_ntuple = ^gsl_ntuple;
gsl_ntuple = record
    fileHandle : pFILE;
    ntuple_data : pvoid;
    size : size_t;
end;

//int ( * function ) ( void * ntuple_data , void * params ) ;
pgsl_ntuple_select_function = ^gsl_ntuple_select_function;
gsl_ntuple_select_function = function(ntuple_data, param : pvoid) : Integer; cdecl;

pgsl_ntuple_select_fn = ^gsl_ntuple_select_fn;
gsl_ntuple_select_fn = record
    f : pgsl_ntuple_select_function;
    params : pvoid;
end;

pgsl_ntuple_value_fn = ^gsl_ntuple_value_fn;
gsl_ntuple_value_fn = record
    func : pgsl_ntuple_select_function; //double ( * function ) ( void * ntuple_data , void * params ) ;
    params : pvoid;
end;


//gsl_odeiv.h
pgsl_odeiv_system_function = ^gsl_odeiv_system_function;
gsl_odeiv_system_function = function(t : double; const y : array of double; dydt : array of double; params : pvoid) : Integer;cdecl;
pgsl_odeiv_system_jacobian = ^gsl_odeiv_system_jacobian;
gsl_odeiv_system_jacobian = function(t : double; const y : array of double; dfdy : pdouble; dfdt : array of double; params : pvoid) : Integer; cdecl;

pgsl_odeiv_system = ^gsl_odeiv_system;
gsl_odeiv_system = record
    func : pgsl_odeiv_system_function; // int ( * function ) ( double t , const double y [ ] , double dydt [ ] , void * params ) ;
    jacobian : pgsl_odeiv_system_jacobian; // int ( * jacobian ) ( double t , const double y [ ] , double * dfdy , double dfdt [ ] , void * params ) ;
    dimension : size_t;
    params : pvoid;
end;

//int ( * apply ) ( void * state , size_t dim , double t , double h ,
//double y [ ] , double yerr [ ] , const double dydt_in [ ] , double dydt_out [ ] ,
//const gsl_odeiv_system * dydt ) ;
pgsl_odeiv_step_function = ^gsl_odeiv_step_function;
gsl_odeiv_step_function = function(state : pvoid; dim : size_t; t, h : double;
                                   y, yerr : array of double;
                                   const dydt_in : array of double;
                                   dydt_out : array of double;
                                   const dydt : pgsl_odeiv_system_function) : Integer; cdecl;
// int ( * reset ) ( void * state , size_t dim ) ;
pgsl_odeiv_reset_function = ^gsl_odeiv_reset_function;
gsl_odeiv_reset_function = function(state : pvoid; dim : size_t) : Integer;
//unsigned int ( * order ) ( void * state ) ;
pgsl_odeiv_order_function = ^gsl_odeiv_order_function;
gsl_odeiv_order_function = function(state : pvoid) : UINT;

pgsl_odeiv_step_type = ^gsl_odeiv_step_type;
gsl_odeiv_step_type = record
    name : pchar;  //const
    can_use_dydt_in : Integer;
    gives_exact_dydt_out : Integer;
    alloc : pgsl_alloc;  //void * ( * alloc ) ( size_t dim ) ;
    arrly : pgsl_odeiv_step_function;
    reset : pgsl_odeiv_reset_function;
    order : pgsl_odeiv_order_function;
    free  : pgsl_free;  //void ( * free ) ( void * state ) ;
end;

pgsl_odeiv_step = ^gsl_odeiv_step;
gsl_odeiv_step = record
    typevalue : pgsl_odeiv_step_type;  //const
    dimension : size_t;
    state : pvoid;
end;

pgsl_alloc_odeiv = ^gsl_alloc_odeiv;
gsl_alloc_odeiv = function : pvoid; cdecl;
//int ( * init ) ( void * state , double eps_abs , double eps_rel , double a_y , double a_dydt ) ;
pgsl_init_odeiv_function = ^gsl_init_odeiv_function;
gsl_init_odeiv_function = function(state : pvoid; eps_abs, eps_rel, a_y, a_dydt : double) : Integer; cdecl;
// int ( * hadjust ) ( void * state , size_t dim , unsigned int ord ,
//                     const double y [ ] , const double yerr [ ] , const double yp [ ] , double * h ) ;
pgsl_hadjust_odeiv_function = ^gsl_hadjust_odeiv_function;
gsl_hadjust_odeiv_function = function(state : pvoid; dim  : size_t; ord : UINT;
                       const y, yerr, yp : array of double; h : pdouble) : Integer; cdecl;
pgsl_odeiv_control_type = ^gsl_odeiv_control_type;
gsl_odeiv_control_type = record
    name : pchar;  //const
    alloc : pgsl_alloc_odeiv; // void * ( * alloc ) ( void ) ;
    init : pgsl_init_odeiv_function;
    hadjust : pgsl_hadjust_odeiv_function;
    free : pgsl_free;  // void ( * free ) ( void * state ) ;
end;

pgsl_odeiv_control = ^gsl_odeiv_control;
gsl_odeiv_control = record
    typeValue : pgsl_odeiv_control_type; //const
    state : pvoid;
end;

pgsl_odeiv_evolve = ^gsl_odeiv_evolve;
gsl_odeiv_evolve = record
    dimension : size_t;
    y0 : pdouble;
    yerr : pdouble;
    dydt_in : pdouble;
    dydt_out : pdouble;
    last_step : double;
    count : Ulong; // unsignedlongInt;
    failed_steps : ULong; // unsignedlongInteger;
end;


//gsl_permutation.h
pgsl_permutation_struct = ^gsl_permutation_struct;
gsl_permutation_struct = record
    size : size_t;
    data : psize_t;
end;
pgsl_permutation = ^gsl_permutation;
gsl_permutation = gsl_permutation_struct;


//gsl_permute.h

//gsl_permute_char.h

//gsl_permute_complex_double.h

//gsl_permute_complex_float.h

//gsl_permute_complex_long_double.h

//gsl_permute_double.h

//gsl_permute_float.h

//gsl_permute_int.h

//gsl_permute_long.h

//gsl_permute_long_double.h

//gsl_permute_short.h

//gsl_permute_uchar.h

//gsl_permute_uint.h

//gsl_permute_ulong.h

//gsl_permute_ushort.h

//gsl_permute_vector.h

//gsl_permute_vector_char.h

//gsl_permute_vector_complex_double.h

//gsl_permute_vector_complex_float.h

//gsl_permute_vector_complex_long_double.h

//gsl_permute_vector_double.h

//gsl_permute_vector_float.h

//gsl_permute_vector_int.h

//gsl_permute_vector_long.h

//gsl_permute_vector_long_double.h

//gsl_permute_vector_short.h

//gsl_permute_vector_uchar.h

//gsl_permute_vector_uint.h

//gsl_permute_vector_ulong.h

//gsl_permute_vector_ushort.h

//gsl_poly.h
pgsl_poly_complex_workspace = ^gsl_poly_complex_workspace;
gsl_poly_complex_workspace = record
    nc : size_t;
    matrix : pdouble;
end;


//gsl_pow_int.h

//gsl_precision.h

//gsl_qrng.h
pgsl_statesize_qrng_function = ^gsl_statesize_qrng_function;
//size_t ( * state_size ) ( unsigned int dimension ) ;
gsl_statesize_qrng_function = function(dim : UINT) : size_t; cdecl;
//int ( * init_state ) ( void * state , unsigned int dimension ) ;
pgsl_initState_qrng_function = ^gsl_initState_qrng_function;
gsl_initState_qrng_function = function(state : pvoid; dim : uint) : Integer; cdecl;
//int ( * get ) ( void * state , unsigned int dimension , double x [ ] ) ;
pgsl_get_qrng_function = ^gsl_get_qrng_function;
gsl_get_qrng_function = function(state : pvoid; dim : uint; x : array of double) : Integer; cdecl;

pgsl_qrng_type = ^gsl_qrng_type;
gsl_qrng_type = record
    name : pchar;  //const
    max_dimension : Cardinal;
    state_size : pgsl_statesize_qrng_function;
    init_state : pgsl_initState_qrng_function;
    getFunc : pgsl_get_qrng_function;
end;

pgsl_qrng = ^gsl_qrng;
gsl_qrng = record
    typeValue : pgsl_qrng_type;
    dimension : Cardinal;
    state_size : size_t;
    state : pvoid;
end;


//gsl_randist.h
pgsl_ran_discrete_t = ^gsl_ran_discrete_t;
gsl_ran_discrete_t = record
    K : size_t;
    A : psize_t;
    F : pdouble;
end;


//gsl_rng.h
//void ( * set ) ( void * state , unsigned long int seed ) ;
pgsl_set_rng_function = ^gsl_set_rng_function;
gsl_set_rng_function = procedure(state : pvoid; seed : ULONG); cdecl;
//unsigned long int ( * get ) ( void * state ) ;
pgsl_get_rng_function = ^gsl_get_rng_function;
gsl_get_rng_function = function(state : pvoid) : ULONG; cdecl;
//double ( * get_double ) ( void * state ) ;
pgsl_get_double_function = ^gsl_get_double_function;
gsl_get_double_function = function(state : pvoid) : double; cdecl;

ppgsl_rng_type = ^pgsl_rng_type;
pgsl_rng_type = ^gsl_rng_type;
gsl_rng_type = record
    name : pchar;
    max : ULONG; // unsignedlongInteger;
    min : ULong;
    size : size_t;
    setFunc : pgsl_set_rng_function;
    getFunc : pgsl_get_rng_function;
    getDoubleFunc : pgsl_get_double_function;
end;

pgsl_rng = ^gsl_rng;
gsl_rng = record
    typeValue : pgsl_rng_type;
    state : pvoid;
end;


CBLAS_ORDER = ( CblasRowMajor=101,CblasColMajor=102);
enumCBLAS_ORDER = CBLAS_ORDER;
CBLAS_ORDER_t = CBLAS_ORDER;

CBLAS_TRANSPOSE = ( CblasNoTrans=111,CblasTrans=112,CblasConjTrans=113);
enumCBLAS_TRANSPOSE = CBLAS_TRANSPOSE;
CBLAS_TRANSPOSE_t = CBLAS_TRANSPOSE;

CBLAS_UPLO = ( CblasUpper=121,CblasLower=122);
CBLAS_UPLO_t = CBLAS_UPLO;
enumCBLAS_UPLO = CBLAS_UPLO;

CBLAS_DIAG = ( CblasNonUnit=131,CblasUnit=132);
CBLAS_DIAG_t = CBLAS_DIAG;
enumCBLAS_DIAG = CBLAS_DIAG;

CBLAS_SIDE = ( CblasLeft=141,CblasRight=142);
CBLAS_SIDE_t = CBLAS_SIDE;
enumCBLAS_SIDE = CBLAS_SIDE;


//gsl_roots.h
//int ( * set ) ( void * state , gsl_function * f , double * root , double x_lower , double x_upper ) ;
pgsl_set_root_fsolver_function = ^gsl_set_root_fsolver_function;
gsl_set_root_fsolver_function = function(state : pvoid; f : pgsl_function; root : pdouble; x_lower, x_upper : double) : Integer; cdecl;
//int ( * iterate ) ( void * state , gsl_function * f , double * root , double * x_lower , double * x_upper ) ;
pgsl_iterate_root_fsolver_function = ^gsl_iterate_root_fsolver_function;
gsl_iterate_root_fsolver_function = function(state : pvoid; f : gsl_function; root, x_lower, x_upper : PDouble) : Integer; cdecl;

pgsl_root_fsolver_type = ^gsl_root_fsolver_type;
gsl_root_fsolver_type = record
    name : pchar;
    size : size_t;
    setFunc : pgsl_set_root_fsolver_function;
    iterateFunc : pgsl_iterate_root_fsolver_function;
end;

pgsl_root_fsolver = ^gsl_root_fsolver;
gsl_root_fsolver = record
    typeValue : pgsl_root_fsolver_type;
    func : pgsl_function;
    root : double;
    x_lower : double;
    x_upper : double;
    state : pvoid;
end;

// int ( * set ) ( void * state , gsl_function_fdf * f , double * root ) ;
pgsl_set_root_fdfsolver_function = ^gsl_set_root_fdfsolver_function;
gsl_set_root_fdfsolver_function = function(state : pvoid; f : pgsl_function_fdf; root : pdouble) : Integer; cdecl;
//int ( * iterate ) ( void * state , gsl_function_fdf * f , double * root ) ;
pgsl_iterate_fdfsolver_function = ^gsl_iterate_fdfsolver_function;
gsl_iterate_fdfsolver_function = function(state : pvoid; f : pgsl_function_fdf; root : pdouble) : Integer; cdecl;

pgsl_root_fdfsolver_type = ^gsl_root_fdfsolver_type;
gsl_root_fdfsolver_type = record
    name : pchar;
    size : size_t;
    setFunc : pgsl_set_root_fdfsolver_function;
    iterateFunc : pgsl_iterate_fdfsolver_function;
end;

pgsl_root_fdfsolver = ^gsl_root_fdfsolver;
gsl_root_fdfsolver = record
    typeValue : pgsl_root_fdfsolver_type;
    fdf : pgsl_function_fdf;
    root : double;
    state : pvoid;
end;


//gsl_sf.h

//gsl_sf_airy.h

//gsl_sf_bessel.h

//gsl_sf_clausen.h

//gsl_sf_coulomb.h

//gsl_sf_coupling.h

//gsl_sf_dawson.h

//gsl_sf_debye.h

//gsl_sf_dilog.h

//gsl_sf_elementary.h

//gsl_sf_ellint.h

//gsl_sf_elljac.h

//gsl_sf_erf.h

//gsl_sf_exp.h

//gsl_sf_expint.h

//gsl_sf_fermi_dirac.h

//gsl_sf_gamma.h

//gsl_sf_gegenbauer.h

//gsl_sf_hyperg.h

//gsl_sf_laguerre.h

//gsl_sf_lambert.h

//gsl_sf_legendre.h

//gsl_sf_log.h

//gsl_sf_pow_int.h

//gsl_sf_psi.h

//gsl_sf_result.h

pgsl_sf_result_struct = ^gsl_sf_result_struct;
gsl_sf_result_struct = record
    val : double;
    err : double;
end;
pgsl_sf_result = ^gsl_sf_result;
gsl_sf_result = gsl_sf_result_struct;

pgsl_sf_result_e10_struct = ^gsl_sf_result_e10_struct;
gsl_sf_result_e10_struct = record
    val : double;
    err : double;
    e10 : Integer;
end;
pgsl_sf_result_e10 = ^gsl_sf_result_e10;
gsl_sf_result_e10 = gsl_sf_result_e10_struct;

//gsl_sf_synchrotron.h

//gsl_sf_transport.h

//gsl_sf_trig.h

//gsl_sf_zeta.h

//gsl_siman.h
pgsl_siman_params_t = ^gsl_siman_params_t;
gsl_siman_params_t = record
    n_tries : Integer;
    iters_fixed_T : Integer;
    step_size : double;
    k, t_initial, mu_t, t_min : double;
end;


//gsl_sort.h

//gsl_sort_char.h

//gsl_sort_double.h

//gsl_sort_float.h

//gsl_sort_int.h

//gsl_sort_long.h

//gsl_sort_long_double.h

//gsl_sort_short.h

//gsl_sort_uchar.h

//gsl_sort_uint.h

//gsl_sort_ulong.h

//gsl_sort_ushort.h

//gsl_sort_vector.h

//gsl_sort_vector_char.h

//gsl_sort_vector_double.h

//gsl_sort_vector_float.h

//gsl_sort_vector_int.h

//gsl_sort_vector_long.h

//gsl_sort_vector_long_double.h

//gsl_sort_vector_short.h

//gsl_sort_vector_uchar.h

//gsl_sort_vector_uint.h

//gsl_sort_vector_ulong.h

//gsl_sort_vector_ushort.h

//gsl_specfunc.h

//gsl_spline.h
pgsl_spline = ^gsl_spline;
gsl_spline = record
    interp : pgsl_interp;
    x : pdouble;
    y : pdouble;
    size : size_t;
end;

pgsl_spline2d = ^gsl_spline2d;
gsl_spline2d = record
    interp : pgsl_interp2d;
    x : pdouble;
    y : pdouble;
    z : pdouble;
end;



//gsl_statistics.h

//gsl_statistics_char.h

//gsl_statistics_double.h

//gsl_statistics_float.h

//gsl_statistics_int.h

//gsl_statistics_long.h

//gsl_statistics_long_double.h

//gsl_statistics_short.h

//gsl_statistics_uchar.h

//gsl_statistics_uint.h

//gsl_statistics_ulong.h

//gsl_statistics_ushort.h

//gsl_sum.h
pgsl_sum_levin_u_workspace = ^gsl_sum_levin_u_workspace;
gsl_sum_levin_u_workspace = record
    size : size_t;
    i : size_t;
    terms_used : size_t;
    sum_plain : double;
    q_num : pdouble;
    q_den : pdouble;
    dq_num : pdouble;
    dq_den : pdouble;
    dsum : pdouble;
end;

pgsl_sum_levin_utrunc_workspace = ^gsl_sum_levin_utrunc_workspace;
gsl_sum_levin_utrunc_workspace = record
    size : size_t;
    i : size_t;
    terms_used : size_t;
    sum_plain : double;
    q_num : pdouble;
    q_den : pdouble;
    dsum : pdouble;
end;


//gsl_sys.h

//gsl_test.h

//gsl_types.h

//gsl_vector.h

//gsl_vector_char.h
pgsl_vector_char = ^gsl_vector_char;
gsl_vector_char = record
    size : size_t;
    stride : size_t;
    data : pchar;
    block : pgsl_block_char;
    owner : Integer;
end;

p_gsl_vector_char_view = ^_gsl_vector_char_view;
_gsl_vector_char_view = record
    vector : gsl_vector_char;
end;

p_gsl_vector_char_const_view = ^_gsl_vector_char_const_view;
_gsl_vector_char_const_view = record
    vector : gsl_vector_char;
end;


//gsl_vector_complex.h

//gsl_vector_complex_double.h
pgsl_vector_complex = ^gsl_vector_complex;
gsl_vector_complex = record
    size : size_t;
    stride : size_t;
    data : pdouble;
    block : pgsl_block_complex;
    owner : Integer;
end;

_gsl_vector_complex_view = record
    vector : gsl_vector_complex;
end;

_gsl_vector_complex_const_view = record
    vector : gsl_vector_complex;
end;


//gsl_vector_complex_float.h
pgsl_vector_complex_float = ^gsl_vector_complex_float;
gsl_vector_complex_float = record
    size : size_t;
    stride : size_t;
    data : pfloat;
    block : pgsl_block_complex_float;
    owner : Integer;
end;

_gsl_vector_complex_float_view = record
    vector : gsl_vector_complex_float;
end;

_gsl_vector_complex_float_const_view = record
    vector : gsl_vector_complex_float;
end;


//gsl_vector_complex_long_double.h
pgsl_vector_complex_long_double = ^gsl_vector_complex_long_double;
gsl_vector_complex_long_double = record
    size : size_t;
    stride : size_t;
    data : plongdouble;
    block : pgsl_block_complex_long_double;
    owner : Integer;
end;

p_gsl_vector_complex_long_double_view = ^_gsl_vector_complex_long_double_view;
_gsl_vector_complex_long_double_view = record
    vector : gsl_vector_complex_long_double;
end;

p_gsl_vector_complex_long_double_const_view = ^_gsl_vector_complex_long_double_const_view;
_gsl_vector_complex_long_double_const_view = record
    vector : gsl_vector_complex_long_double;
end;


//gsl_vector_double.h
pgsl_vector = ^gsl_vector;
gsl_vector = record
    size : size_t;
    stride : size_t;
    data : pdouble;
    block : pgsl_block;
    owner : Integer;
end;

p_gsl_vector_view = ^_gsl_vector_view;
_gsl_vector_view = record
    vector : gsl_vector;
end;

p_gsl_vector_const_view = ^_gsl_vector_const_view;
_gsl_vector_const_view = record
    vector : gsl_vector;
end;


//gsl_vector_float.h
pgsl_vector_float = ^gsl_vector_float;
gsl_vector_float = record
    size : size_t;
    stride : size_t;
    data : pfloat;
    block : pgsl_block_float;
    owner : Integer;
end;

p_gsl_vector_float_view = ^_gsl_vector_float_view;
_gsl_vector_float_view = record
    vector : gsl_vector_float;
end;

p_gsl_vector_float_const_view = ^_gsl_vector_float_const_view;
_gsl_vector_float_const_view = record
    vector : gsl_vector_float;
end;


//gsl_vector_int.h
pgsl_vector_int = ^gsl_vector_int;
gsl_vector_int = record
    size : size_t;
    stride : size_t;
    data : pInteger;
    block : pgsl_block_Int;
    owner : Integer;
end;

p_gsl_vector_int_view = ^_gsl_vector_int_view;
_gsl_vector_int_view = record
    vector : gsl_vector_Int;
end;

p_gsl_vector_int_const_view = ^_gsl_vector_int_const_view;
_gsl_vector_int_const_view = record
    vector : gsl_vector_Int;
end;


//gsl_vector_long.h
pgsl_vector_long = ^gsl_vector_long;
gsl_vector_long = record
    size : size_t;
    stride : size_t;
    data : plong;
    block : pgsl_block_long;
    owner : Integer;
end;

p_gsl_vector_long_view = ^_gsl_vector_long_view;
_gsl_vector_long_view = record
    vector : gsl_vector_long;
end;

p_gsl_vector_long_const_view = ^_gsl_vector_long_const_view;
_gsl_vector_long_const_view = record
    vector : gsl_vector_long;
end;


//gsl_vector_long_double.h
pgsl_vector_long_double = ^gsl_vector_long_double;
gsl_vector_long_double = record
    size : size_t;
    stride : size_t;
    data : plongdouble;
    block : pgsl_block_long_double;
    owner : Integer;
end;

_gsl_vector_long_double_view = record
    vector : gsl_vector_long_double;
end;

_gsl_vector_long_double_const_view = record
    vector : gsl_vector_long_double;
end;


//gsl_vector_short.h
pgsl_vector_short = ^gsl_vector_short;
gsl_vector_short = record
    size : size_t;
    stride : size_t;
    data : pshort;
    block : pgsl_block_short;
    owner : Integer;
end;

_gsl_vector_short_view = record
    vector : gsl_vector_short;
end;

_gsl_vector_short_const_view = record
    vector : gsl_vector_short;
end;


//gsl_vector_uchar.h
pgsl_vector_uchar = ^gsl_vector_uchar;
gsl_vector_uchar = record
    size : size_t;
    stride : size_t;
    data : PUChar;
    block : pgsl_block_uchar;
    owner : Integer;
end;

_gsl_vector_uchar_view = record
    vector : gsl_vector_uchar;
end;

_gsl_vector_uchar_const_view = record
    vector : gsl_vector_uchar;
end;


//gsl_vector_uint.h
pgsl_vector_uint = ^gsl_vector_uint;
gsl_vector_uint = record
    size : size_t;
    stride : size_t;
    data : PCardinal;
    block : pgsl_block_uInt;
    owner : Integer;
end;

_gsl_vector_uint_view = record
    vector : gsl_vector_uInt;
end;

_gsl_vector_uint_const_view = record
    vector : gsl_vector_uInt;
end;


//gsl_vector_ulong.h
pgsl_vector_ulong = ^gsl_vector_ulong;
gsl_vector_ulong = record
    size : size_t;
    stride : size_t;
    data : PULong;
    block : pgsl_block_ulong;
    owner : Integer;
end;

_gsl_vector_ulong_view = record
    vector : gsl_vector_ulong;
end;

_gsl_vector_ulong_const_view = record
    vector : gsl_vector_ulong;
end;


//gsl_vector_ushort.h
pgsl_vector_ushort = ^gsl_vector_ushort;
gsl_vector_ushort = record
    size : size_t;
    stride : size_t;
    data : punsignedshort;
    block : pgsl_block_ushort;
    owner : Integer;
end;

_gsl_vector_ushort_view = record
    vector : gsl_vector_ushort;
end;

_gsl_vector_ushort_const_view = record
    vector : gsl_vector_ushort;
end;

//gsl_multimin.h

//double ( * f ) ( const gsl_vector * x , void * params ) ;
pgsl_f_multimin_function = ^gsl_f_multimin_function;
gsl_f_multimin_function = function( const x : pgsl_vector; params : pvoid) : double;

pgsl_multimin_function_struct = ^gsl_multimin_function_struct;
gsl_multimin_function_struct = record
    f : pgsl_f_multimin_function;
    n : size_t;
    params : pvoid;
end;
pgsl_multimin_function = ^gsl_multimin_function;
gsl_multimin_function = gsl_multimin_function_struct;

//     double ( * f ) ( const gsl_vector * x , void * params ) ;
//     void ( * df ) ( const gsl_vector * x , void * params , gsl_vector * df ) ;
//     void ( * fdf ) ( const gsl_vector * x , void * params , double * f , gsl_vector * df ) ;
pgsl_df_multimin_fdf_function = ^gsl_df_multimin_fdf_function;
gsl_df_multimin_fdf_function = procedure(const x : pgsl_vector; params : pvoid; df : pgsl_vector); cdecl;
pgsl_fdf_multimin_fdf_function = ^gsl_fdf_multimin_fdf_function;
gsl_fdf_multimin_fdf_function = procedure(const x : pgsl_vector; params : pvoid; f : pdouble; df : pgsl_vector); cdecl;

pgsl_multimin_function_fdf_struct = ^gsl_multimin_function_fdf_struct;
gsl_multimin_function_fdf_struct = record
    n : size_t;
    params : pvoid;
    f : pgsl_f_multimin_function;
    df : pgsl_df_multimin_fdf_function;
    fdf : pgsl_fdf_multimin_fdf_function;
end;
pgsl_multimin_function_fdf = ^gsl_multimin_function_fdf;
gsl_multimin_function_fdf = gsl_multimin_function_fdf_struct;

//int ( * alloc ) ( void * state , size_t n ) ;
//int ( * set ) ( void * state , gsl_multimin_function * f ,  const gsl_vector * x ,
//                double * size ,  const gsl_vector * step_size ) ;
//int ( * iterate ) ( void * state , gsl_multimin_function * f ,  gsl_vector * x ,  double * size ,  double * fval ) ;
//void ( * free ) ( void * state ) ;
pgsl_alloc_2_function = ^gsl_alloc_2_function;
gsl_alloc_2_function = function(state : pvoid; n : size_t) : Integer; cdecl;
pgsl_set_multimin_fminimizer_function = ^gsl_set_multimin_fminimizer_function;
gsl_set_multimin_fminimizer_function = function(state : pvoid; f : pgsl_f_multimin_function; const x : pgsl_vector;
                                                size : pdouble; const step_size : pgsl_vector) : Integer; cdecl;
pgsl_iterate_multimin_fminimizer_function = ^gsl_iterate_multimin_fminimizer_function;
gsl_iterate_multimin_fminimizer_function = function(state : pvoid; f : pgsl_f_multimin_function;
                                                    x : pgsl_vector; size, fval : pdouble) : Integer; cdecl;

pgsl_multimin_fminimizer_type = ^gsl_multimin_fminimizer_type;
gsl_multimin_fminimizer_type = packed record
    name : pchar;
    size : size_t;
    allocFunc : pgsl_alloc_2_function;
    setFunc : pgsl_set_multimin_fminimizer_function;
    iterateFunc : pgsl_iterate_multimin_fminimizer_function;
    freeFunc : pgsl_free;
end;

pgsl_multimin_fminimizer = ^gsl_multimin_fminimizer;
gsl_multimin_fminimizer = record
    typeValue : pgsl_multimin_fminimizer_type;
    f : pgsl_f_multimin_function;
    fval : double;
    x : pgsl_vector;
    size : double;
    state : pvoid;
end;

pgsl_restart_function = ^gsl_restart_function;
gsl_restart_function = function(state : pvoid) : Integer; cdecl;

//int ( * set ) ( void * state , gsl_multimin_function_fdf * fdf ,  const gsl_vector * x ,
//double * f ,  gsl_vector * gradient , double step_size , double tol ) ;
pgsl_set_multimin_fminimizer_functionA = ^gsl_set_multimin_fminimizer_functionA;
gsl_set_multimin_fminimizer_functionA = function(state : pvoid; fdf : pgsl_multimin_function_fdf; const x : pgsl_vector;
                                                f : pdouble; gradient : pgsl_vector; step_size, tol : double) : Integer; cdecl;

//int ( * iterate ) ( void * state , gsl_multimin_function_fdf * fdf ,
//gsl_vector * x , double * f ,  gsl_vector * gradient , gsl_vector * dx ) ;
pgsl_iterate_multimin_fminimizer_functionA = ^gsl_iterate_multimin_fminimizer_functionA;
gsl_iterate_multimin_fminimizer_functionA = function(state : pvoid; fdf : pgsl_f_multimin_function;
                                   x : pgsl_vector; fval : pdouble; gradient, dx : pgsl_vector) : Integer; cdecl;
pgsl_multimin_fdfminimizer_type = ^gsl_multimin_fdfminimizer_type;
gsl_multimin_fdfminimizer_type = record
    name : pchar;
    size : size_t;
    allocFunc : pgsl_alloc_2_function;  //int ( * alloc ) ( void * state , size_t n ) ;
    setFunc : pgsl_set_multimin_fminimizer_functionA;
    iterate : pgsl_iterate_multimin_fminimizer_functionA;
    restart_func : pgsl_restart_function; // int ( * restart ) ( void * state ) ;
    freeFunc : pgsl_free; //void ( * free ) ( void * state ) ;
end;

pgsl_multimin_fdfminimizer = ^gsl_multimin_fdfminimizer;
gsl_multimin_fdfminimizer = record
    typeValue : pgsl_multimin_fdfminimizer_type;
    fdf : pgsl_multimin_function_fdf;
    f : double;
    x : pgsl_vector;
    gradient : pgsl_vector;
    dx : pgsl_vector;
    state : pvoid;
end;


//gsl_multiroots.h
//int ( * f ) ( const gsl_vector * x , void * params , gsl_vector * f ) ;
pgsl_f_multiroot_function_ = ^gsl_f_multiroot_function_;
gsl_f_multiroot_function_ = function(const x : pgsl_vector; params : pvoid; f : pgsl_vector) : Integer; cdecl;

pgsl_multiroot_function_struct = ^gsl_multiroot_function_struct;
gsl_multiroot_function_struct = record
    f : pgsl_f_multiroot_function_;
    n : size_t;
    params : pvoid;
end;
pgsl_multiroot_function = ^gsl_multiroot_function;
gsl_multiroot_function = gsl_multiroot_function_struct;

//int ( * set ) ( void * state , gsl_multiroot_function * function , gsl_vector * x , gsl_vector * f , gsl_vector * dx ) ;
pgsl_set_multiroot_fsolver_functionA = ^gsl_set_multiroot_fsolver_functionA;
gsl_set_multiroot_fsolver_functionA = function(state : pvoid; func : pgsl_multiroot_function; x, f, dx : pgsl_vector) : Integer ;cdecl;
//int ( * iterate ) ( void * state , gsl_multiroot_function * function , gsl_vector * x , gsl_vector * f , gsl_vector * dx ) ;
pgsl_iterate_multiroot_fsolver_functionA = ^gsl_iterate_multiroot_fsolver_functionA;
gsl_iterate_multiroot_fsolver_functionA = function(state : pvoid; func : pgsl_multiroot_function; x, f, dx : pgsl_vector) : Integer ;cdecl;

pgsl_multiroot_fsolver_type = ^gsl_multiroot_fsolver_type;
gsl_multiroot_fsolver_type = record
    name : pchar;
    size : size_t;
    allocFunc : pgsl_alloc_2_function; //int ( * alloc ) ( void * state , size_t n ) ;
    setFunc : pgsl_set_multiroot_fsolver_functionA;
    iterate : pgsl_iterate_multiroot_fsolver_functionA;
    free : pgsl_free; // void ( * free ) ( void * state ) ;
end;

pgsl_multiroot_fsolver = ^gsl_multiroot_fsolver;
gsl_multiroot_fsolver = record
    typeValue : pgsl_multiroot_fsolver_type;
    func : pgsl_multiroot_function;
    x : pgsl_vector;
    f : pgsl_vector;
    dx : pgsl_vector;
    state : pvoid;
end;

//int ( * df ) ( const gsl_vector * x , void * params , gsl_matrix * df ) ;
pgsl_df_multiroot_function_A = ^gsl_df_multiroot_function_A;
gsl_df_multiroot_function_A = function(const x : pgsl_vector; params : pvoid; df : pgsl_matrix) : Integer; cdecl;

pgsl_multiroot_function_fdf_struct = ^gsl_multiroot_function_fdf_struct;
gsl_multiroot_function_fdf_struct = record
     f : pgsl_f_multiroot_function_; // ( * f ) ( const gsl_vector * x , void * params , gsl_vector * f ) ;
     df : pgsl_df_multiroot_function_A;
     fdf : pgsl_fdf_multimin_fdf_function;  //int ( * fdf ) ( const gsl_vector * x , void * params , gsl_vector * f , gsl_matrix * df ) ;
     n : size_t;
     params : pvoid;
end;
pgsl_multiroot_function_fdf = ^gsl_multiroot_function_fdf;
gsl_multiroot_function_fdf = gsl_multiroot_function_fdf_struct;

//int ( * set ) ( void * state , gsl_multiroot_function_fdf * fdf , gsl_vector * x , gsl_vector * f , gsl_matrix * J , gsl_vector * dx ) ;
pgsl_set_multiroot_fdfsolver_function = ^gsl_set_multiroot_fdfsolver_function;
gsl_set_multiroot_fdfsolver_function = function(state : pvoid; fdf : pgsl_multiroot_function_fdf; x, f : pgsl_vector; J : pgsl_matrix; dx : pgsl_vector) : Integer; cdecl;
//int ( * iterate ) ( void * state , gsl_multiroot_function_fdf * fdf , gsl_vector * x , gsl_vector * f , gsl_matrix * J , gsl_vector * dx ) ;
pgsl_iterate_multiroot_fsolver_functionB = ^gsl_iterate_multiroot_fsolver_functionB;
gsl_iterate_multiroot_fsolver_functionB = function(state : pvoid; fdf : pgsl_multiroot_function_fdf; x, f : pgsl_vector; J : pgsl_matrix; dx : pgsl_vector) : Integer ;cdecl;

pgsl_multiroot_fdfsolver_type = ^gsl_multiroot_fdfsolver_type;
gsl_multiroot_fdfsolver_type = record
    name : pchar;
    size : size_t;
    allocFunc : pgsl_alloc_2_function; // int ( * alloc ) ( void * state , size_t n ) ;
    setFunc : pgsl_set_multiroot_fdfsolver_function;
    iterate : pgsl_iterate_multiroot_fsolver_functionB;
    freeFunc : pgsl_free;  //void ( * free ) ( void * state ) ;
end;

pgsl_multiroot_fdfsolver = ^gsl_multiroot_fdfsolver;
gsl_multiroot_fdfsolver = record
    typeValue : pgsl_multiroot_fdfsolver_type;
    fdf : pgsl_multiroot_function_fdf;
    x : pgsl_vector;
    f : pgsl_vector;
    J : pgsl_matrix;
    dx : pgsl_vector;
    state : pvoid;
end;


//gsl_multifit.h
pgsl_multifit_linear_workspace = ^gsl_multifit_linear_workspace;
gsl_multifit_linear_workspace = record
    n : size_t;
    p : size_t;
    A : pgsl_matrix;
    Q : pgsl_matrix;
    QSI : pgsl_matrix;
    S : pgsl_vector;
    t : pgsl_vector;
    xt : pgsl_vector;
    D : pgsl_vector;
end;


//gsl_multifit_nlin.h
// int ( * f ) ( const gsl_vector * x , void * params , gsl_vector * f ) ;
pgsl_f_multifit_function = ^gsl_f_multifit_function;
gsl_f_multifit_function = function(const x : pgsl_vector; params : pvoid; f : pgsl_vector) : Integer; cdecl;

pgsl_multifit_function_struct = ^gsl_multifit_function_struct;
gsl_multifit_function_struct = record
    f : pgsl_f_multifit_function;
    n : size_t;
    p : size_t;
    params : pvoid;
end;
pgsl_multifit_function = ^gsl_multifit_function;
gsl_multifit_function = gsl_multifit_function_struct;


//int ( * alloc ) ( void * state , size_t n , size_t p ) ;
pgsl_alloc_3_multifit_fsolver_function = ^gsl_alloc_3_multifit_fsolver_function;
gsl_alloc_3_multifit_fsolver_function = function(state : pvoid; n, p : size_t) : Integer; cdecl;
//int ( * set ) ( void * state , gsl_multifit_function * function ,
//                gsl_vector * x , gsl_vector * f , gsl_vector * dx ) ;
gsl_set_multifit_fsolver_function = function(state : pvoid; func : pgsl_multifit_function;
                                                 x, f, dx : pgsl_vector) : Integer; cdecl;
//int ( * iterate ) ( void * state , gsl_multifit_function * function ,
//                                 gsl_vector * x , gsl_vector * f , gsl_vector * dx ) ;
pgsl_iterate_multifit_fsolver_function = ^gsl_iterate_multifit_fsolver_function;
gsl_iterate_multifit_fsolver_function = gsl_set_multifit_fsolver_function;

pgsl_set_multifit_fsolver_function = ^gsl_set_multifit_fsolver_function;

pgsl_multifit_fsolver_type = ^gsl_multifit_fsolver_type;
gsl_multifit_fsolver_type = record
    name : pchar;
    size : size_t;
    allocFunc : pgsl_alloc_3_multifit_fsolver_function;
    setFunc : pgsl_set_multifit_fsolver_function;
    iterate : pgsl_iterate_multifit_fsolver_function;
    freeFunc : pgsl_free;  //void ( * free ) ( void * state ) ;
end;

pgsl_multifit_fsolver = ^gsl_multifit_fsolver;
gsl_multifit_fsolver = record
    typeValue : pgsl_multifit_fsolver_type;
    func : pgsl_multifit_function;
    x : pgsl_vector;
    f : pgsl_vector;
    dx : pgsl_vector;
    state : pvoid;
end;

//// int ( * fdf ) ( const gsl_vector * x , void * params , gsl_vector * f , gsl_matrix * df ) ;
pgsl_fdf_multimin_fdf_functionA = ^gsl_fdf_multimin_fdf_functionA;
gsl_fdf_multimin_fdf_functionA = procedure(const x : pgsl_vector; params : pvoid; f : pgsl_vector;
                                 df : pgsl_matrix); cdecl;

pgsl_multifit_function_fdf_struct = ^gsl_multifit_function_fdf_struct;
gsl_multifit_function_fdf_struct = record
    f : pgsl_f_multiroot_function_;  //int ( * f ) ( const gsl_vector * x , void * params , gsl_vector * f ) ;
    df : pgsl_df_multimin_fdf_function; //int ( * df ) ( const gsl_vector * x , void * params , gsl_matrix * df ) ;
    fdf : pgsl_fdf_multimin_fdf_functionA;
    n : size_t;
    p : size_t;
    params : pvoid;
end;
pgsl_multifit_function_fdf = ^gsl_multifit_function_fdf;
gsl_multifit_function_fdf = gsl_multifit_function_fdf_struct;

// int ( * set ) ( void * state , gsl_multifit_function_fdf * fdf ,
//                 gsl_vector * x , gsl_vector * f , gsl_matrix * J , gsl_vector * dx ) ;
gsl_set_multifit_fsolver_functionA = function(state : pvoid; func : pgsl_multifit_function_fdf;
                  x, f : pgsl_vector; J : pgsl_matrix; dx : pgsl_vector) : Integer; cdecl;
//int ( * iterate ) ( void * state , gsl_multifit_function_fdf * fdf , gsl_vector * x ,
//           gsl_vector * f , gsl_matrix * J , gsl_vector * dx ) ;
pgsl_iterate_multifit_fdfsolver_function  = ^gsl_iterate_multifit_fdfsolver_function;
gsl_iterate_multifit_fdfsolver_function = gsl_set_multifit_fsolver_functionA; 
pgsl_set_multifit_fsolver_functionA = ^gsl_set_multifit_fsolver_functionA;

pgsl_multifit_fdfsolver_type = ^gsl_multifit_fdfsolver_type;
gsl_multifit_fdfsolver_type = record
     name : pchar;
     size : size_t;
     allocFunc : pgsl_alloc_3_multifit_fsolver_function; // int ( * alloc ) ( void * state , size_t n , size_t p ) ;
     setFunc : pgsl_set_multifit_fsolver_functionA;
     iterate : pgsl_iterate_multifit_fdfsolver_function;
     freeFunc : pgsl_free;  //void ( * free ) ( void * state ) ;
end;

lmder_state = record
  iter : size_t;
  xnorm : double ;
  fnorm : double ;
  delta : double ;
  par : double ;
  r : pgsl_matrix;
  tau : pgsl_vector;
  diag : pgsl_vector;
  qtf : pgsl_vector;
  newton : pgsl_vector;
  gradient : pgsl_vector;
  x_trial : pgsl_vector;
  f_trial : pgsl_vector;
  df : pgsl_vector;
  sdiag : pgsl_vector;
  rptdx : pgsl_vector;
  w : pgsl_vector;
  work1 : pgsl_vector;
  perm : pgsl_permutation;
end;

plmder_state = ^lmder_state;

pgsl_multifit_fdfsolver = ^gsl_multifit_fdfsolver;
gsl_multifit_fdfsolver = record
    typeValue : pgsl_multifit_fdfsolver_type;  //const
    fdf : pgsl_multifit_function_fdf;
    x : pgsl_vector;
    f : pgsl_vector;
    J : pgsl_matrix;
    dx : pgsl_vector;
    state : plmder_state;
end;

//gsl_version.h

//gsl_wavelet2d.h

//gsl_wavelet.h
//int ( * init ) ( const double * * h1 , const double * * g1 ,
//                 const double * * h2 , const double * * g2 ,
//                 size_t * nc ,  size_t * offset , size_t member ) ;
pgsl_init_wavelet_function = ^gsl_init_wavelet_function;
gsl_init_wavelet_function = function(h1, g1, h2, g2 : ppdouble; nc, offset : psize_t;
                                     member : size_t) : Integer; cdecl;
pgsl_wavelet_type = ^gsl_wavelet_type;
gsl_wavelet_type = record
    name : pchar;
    init : pgsl_init_wavelet_function;
end;

pgsl_wavelet = ^gsl_wavelet;
gsl_wavelet = record
    typeV : pgsl_wavelet_type;
    h1 : pdouble;
    g1 : pdouble;
    h2 : pdouble;
    g2 : pdouble;
    nc : size_t;
    offset : size_t;
end;

pgsl_wavelet_workspace = ^gsl_wavelet_workspace;
gsl_wavelet_workspace = record
    scratch : pdouble;
    n : size_t;
end;

gsl_wavelet_direction = Integer; //
//#ifndef GSL_DISABLE_DEPRECATED
//typedef enum {
//  forward = 1, backward = -1,
//  gsl_wavelet_forward = 1, gsl_wavelet_backward = -1
//}
//gsl_wavelet_direction;
//#else
//typedef enum {
//  gsl_wavelet_forward = 1, gsl_wavelet_backward = -1
//}
//gsl_wavelet_direction;

//-------------
pgsl_error_handler_t = ^gsl_error_handler_t;
gsl_error_handler_t = procedure(const x, y : PChar; i, j : Integer); cdecl;
pgsl_stream_handler_t = ^gsl_stream_handler_t;
gsl_stream_handler_t = procedure(const x, y : PChar; i : Integer; const z : PChar); cdecl;

//double (*gsl_siman_Efunc_t)(void *)
pgsl_siman_Efunc_t = ^gsl_siman_Efunc_t;
gsl_siman_Efunc_t = function : double; cdecl;

//void (*gsl_siman_step_t)(const gsl_rng *, void *, double)
pgsl_siman_step_t = ^gsl_siman_step_t;
gsl_siman_step_t = procedure(const rng : pgsl_rng; t : pvoid;  x : double); cdecl;

//double (*gsl_siman_metric_t)(void *, void *)
pgsl_siman_metric_t = ^gsl_siman_metric_t;
gsl_siman_metric_t = function(x, y : pvoid) : double;cdecl;

//void (*gsl_siman_print_t)(void *)
gsl_siman_print_t = procedure( x : pvoid );cdecl;

//void (*gsl_siman_copy_t)(void *, void *)
gsl_siman_copy_t = procedure(x, y : pvoid); cdecl;

//void *(*gsl_siman_copy_construct_t)(void *)
gsl_siman_copy_construct_t = function(x : pvoid) : pvoid; cdecl;

//void (*gsl_siman_destroy_t)(void *)
gsl_siman_destroy_t = procedure(x : pvoid);cdecl;

function gsl_rng_default : pgsl_rng_type; 

function gsl_multimin_fminimizer_nmsimplex : pGSL_multimin_fminimizer_type;
function gsl_multimin_fminimizer_nmsimplex2 : pGSL_multimin_fminimizer_type;
function gsl_multimin_fminimizer_nmsimplex2rand : pGSL_multimin_fminimizer_type;
function gsl_multimin_fdfminimizer_vector_bfgs : pgsl_multimin_fdfminimizer_type;
function gsl_multimin_fdfminimizer_conjugate_fr : pgsl_multimin_fdfminimizer_type;
function gsl_multimin_fdfminimizer_conjugate_pr : pgsl_multimin_fdfminimizer_type;
function gsl_multimin_fdfminimizer_steepest_descent : pgsl_multimin_fdfminimizer_type;
function gsl_multifit_fdfsolver_lmsder : pgsl_multifit_fdfsolver_type;
function gsl_multifit_fdfsolver_lmder : pgsl_multifit_fdfsolver_type;
//dll function declaration
//config.h

//gsl_blas.h
//GSL_EXPORT int gsl_blas_sdsdot ( float alpha , const gsl_vector_float * X , const gsl_vector_float * Y , float * result );
function gsl_blas_sdsdot( alpha : float; const X : pgsl_vector_float; const Y : pgsl_vector_float; result : pfloat ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsdot ( const gsl_vector_float * X , const gsl_vector_float * Y , double * result );
function gsl_blas_dsdot( const X : pgsl_vector_float; const Y : pgsl_vector_float; result : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_sdot ( const gsl_vector_float * X , const gsl_vector_float * Y , float * result );
function gsl_blas_sdot( const X : pgsl_vector_float; const Y : pgsl_vector_float; result : pfloat ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ddot ( const gsl_vector * X , const gsl_vector * Y , double * result );
function gsl_blas_ddot( const X : pgsl_vector; const Y : pgsl_vector; result : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cdotu ( const gsl_vector_complex_float * X , const gsl_vector_complex_float * Y , gsl_complex_float * dotu );
function gsl_blas_cdotu( const X : pgsl_vector_complex_float; const Y : pgsl_vector_complex_float; dotu : pgsl_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cdotc ( const gsl_vector_complex_float * X , const gsl_vector_complex_float * Y , gsl_complex_float * dotc );
function gsl_blas_cdotc( const X : pgsl_vector_complex_float; const Y : pgsl_vector_complex_float; dotc : pgsl_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zdotu ( const gsl_vector_complex * X , const gsl_vector_complex * Y , gsl_complex * dotu );
function gsl_blas_zdotu( const X : pgsl_vector_complex; const Y : pgsl_vector_complex; dotu : pgsl_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zdotc ( const gsl_vector_complex * X , const gsl_vector_complex * Y , gsl_complex * dotc );
function gsl_blas_zdotc( const X : pgsl_vector_complex; const Y : pgsl_vector_complex; dotc : pgsl_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_blas_snrm2 ( const gsl_vector_float * X );
function gsl_blas_snrm2( const X : pgsl_vector_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_blas_sasum ( const gsl_vector_float * X );
function gsl_blas_sasum( const X : pgsl_vector_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_blas_dnrm2 ( const gsl_vector * X );
function gsl_blas_dnrm2( const X : pgsl_vector ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_blas_dasum ( const gsl_vector * X );
function gsl_blas_dasum( const X : pgsl_vector ) : double; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_blas_scnrm2 ( const gsl_vector_complex_float * X );
function gsl_blas_scnrm2( const X : pgsl_vector_complex_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_blas_scasum ( const gsl_vector_complex_float * X );
function gsl_blas_scasum( const X : pgsl_vector_complex_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_blas_dznrm2 ( const gsl_vector_complex * X );
function gsl_blas_dznrm2( const X : pgsl_vector_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_blas_dzasum ( const gsl_vector_complex * X );
function gsl_blas_dzasum( const X : pgsl_vector_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT CBLAS_INDEX_t gsl_blas_isamax ( const gsl_vector_float * X );
function gsl_blas_isamax( const X : pgsl_vector_float ) : CBLAS_INDEX_t; cdecl; external gsl_dll;
//GSL_EXPORT CBLAS_INDEX_t gsl_blas_idamax ( const gsl_vector * X );
function gsl_blas_idamax( const X : pgsl_vector ) : CBLAS_INDEX_t; cdecl; external gsl_dll;
//GSL_EXPORT CBLAS_INDEX_t gsl_blas_icamax ( const gsl_vector_complex_float * X );
function gsl_blas_icamax( const X : pgsl_vector_complex_float ) : CBLAS_INDEX_t; cdecl; external gsl_dll;
//GSL_EXPORT CBLAS_INDEX_t gsl_blas_izamax ( const gsl_vector_complex * X );
function gsl_blas_izamax( const X : pgsl_vector_complex ) : CBLAS_INDEX_t; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_sswap ( gsl_vector_float * X , gsl_vector_float * Y );
function gsl_blas_sswap( X : pgsl_vector_float; Y : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_scopy ( const gsl_vector_float * X , gsl_vector_float * Y );
function gsl_blas_scopy( const X : pgsl_vector_float; Y : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_saxpy ( float alpha , const gsl_vector_float * X , gsl_vector_float * Y );
function gsl_blas_saxpy( alpha : float; const X : pgsl_vector_float; Y : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dswap ( gsl_vector * X , gsl_vector * Y );
function gsl_blas_dswap( X : pgsl_vector; Y : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dcopy ( const gsl_vector * X , gsl_vector * Y );
function gsl_blas_dcopy( const X : pgsl_vector; Y : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_daxpy ( double alpha , const gsl_vector * X , gsl_vector * Y );
function gsl_blas_daxpy( alpha : double; const X : pgsl_vector; Y : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cswap ( gsl_vector_complex_float * X , gsl_vector_complex_float * Y );
function gsl_blas_cswap( X : pgsl_vector_complex_float; Y : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ccopy ( const gsl_vector_complex_float * X , gsl_vector_complex_float * Y );
function gsl_blas_ccopy( const X : pgsl_vector_complex_float; Y : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_caxpy ( const gsl_complex_float alpha , const gsl_vector_complex_float * X , gsl_vector_complex_float * Y );
function gsl_blas_caxpy( const alpha : gsl_complex_float; const X : pgsl_vector_complex_float; Y : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zswap ( gsl_vector_complex * X , gsl_vector_complex * Y );
function gsl_blas_zswap( X : pgsl_vector_complex; Y : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zcopy ( const gsl_vector_complex * X , gsl_vector_complex * Y );
function gsl_blas_zcopy( const X : pgsl_vector_complex; Y : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zaxpy ( const gsl_complex alpha , const gsl_vector_complex * X , gsl_vector_complex * Y );
function gsl_blas_zaxpy( const alpha : gsl_complex; const X : pgsl_vector_complex; Y : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_srotg ( float a [ ] , float b [ ] , float c [ ] , float s [ ] );
function gsl_blas_srotg( a : array of  float; b : array of  float; c : array of  float; s : array of  float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_srotmg ( float d1 [ ] , float d2 [ ] , float b1 [ ] , float b2 , float P [ ] );
function gsl_blas_srotmg( d1 : array of  float; d2 : array of  float; b1 : array of  float; b2 : float; P : array of  float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_srot ( gsl_vector_float * X , gsl_vector_float * Y , float c , float s );
function gsl_blas_srot( X : pgsl_vector_float; Y : pgsl_vector_float; c : float; s : float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_srotm ( gsl_vector_float * X , gsl_vector_float * Y , const float P [ ] );
function gsl_blas_srotm( X : pgsl_vector_float; Y : pgsl_vector_float; const P : array of  float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_drotg ( double a [ ] , double b [ ] , double c [ ] , double s [ ] );
function gsl_blas_drotg( a : array of  double; b : array of  double; c : array of  double; s : array of  double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_drotmg ( double d1 [ ] , double d2 [ ] , double b1 [ ] , double b2 , double P [ ] );
function gsl_blas_drotmg( d1 : array of  double; d2 : array of  double; b1 : array of  double; b2 : double; P : array of  double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_drot ( gsl_vector * X , gsl_vector * Y , const double c , const double s );
function gsl_blas_drot( X : pgsl_vector; Y : pgsl_vector; const c : double; const s : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_drotm ( gsl_vector * X , gsl_vector * Y , const double P [ ] );
function gsl_blas_drotm( X : pgsl_vector; Y : pgsl_vector; const P : array of  double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_sscal ( float alpha , gsl_vector_float * X );
procedure gsl_blas_sscal( alpha : float; X : pgsl_vector_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_dscal ( double alpha , gsl_vector * X );
procedure gsl_blas_dscal( alpha : double; X : pgsl_vector ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_cscal ( const gsl_complex_float alpha , gsl_vector_complex_float * X );
procedure gsl_blas_cscal( const alpha : gsl_complex_float; X : pgsl_vector_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_zscal ( const gsl_complex alpha , gsl_vector_complex * X );
procedure gsl_blas_zscal( const alpha : gsl_complex; X : pgsl_vector_complex ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_csscal ( float alpha , gsl_vector_complex_float * X );
procedure gsl_blas_csscal( alpha : float; X : pgsl_vector_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_blas_zdscal ( double alpha , gsl_vector_complex * X );
procedure gsl_blas_zdscal( alpha : double; X : pgsl_vector_complex ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_sgemv ( CBLAS_TRANSPOSE_t TransA , float alpha , const gsl_matrix_float * A , const gsl_vector_float * X , float beta , gsl_vector_float * Y );
function gsl_blas_sgemv( TransA : CBLAS_TRANSPOSE_t; alpha : float; const A : pgsl_matrix_float; const X : pgsl_vector_float; beta : float; Y : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_strmv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_float * A , gsl_vector_float * X );
function gsl_blas_strmv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_float; X : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_strsv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_float * A , gsl_vector_float * X );
function gsl_blas_strsv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_float; X : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dgemv ( CBLAS_TRANSPOSE_t TransA , double alpha , const gsl_matrix * A , const gsl_vector * X , double beta , gsl_vector * Y );
function gsl_blas_dgemv( TransA : CBLAS_TRANSPOSE_t; alpha : double; const A : pgsl_matrix; const X : pgsl_vector; beta : double; Y : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dtrmv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix * A , gsl_vector * X );
function gsl_blas_dtrmv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix; X : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dtrsv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix * A , gsl_vector * X );
function gsl_blas_dtrsv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix; X : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cgemv ( CBLAS_TRANSPOSE_t TransA , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_vector_complex_float * X , const gsl_complex_float beta , gsl_vector_complex_float * Y );
function gsl_blas_cgemv( TransA : CBLAS_TRANSPOSE_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const X : pgsl_vector_complex_float; const beta : gsl_complex_float; Y : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ctrmv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_complex_float * A , gsl_vector_complex_float * X );
function gsl_blas_ctrmv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_complex_float; X : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ctrsv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_complex_float * A , gsl_vector_complex_float * X );
function gsl_blas_ctrsv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_complex_float; X : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zgemv ( CBLAS_TRANSPOSE_t TransA , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_vector_complex * X , const gsl_complex beta , gsl_vector_complex * Y );
function gsl_blas_zgemv( TransA : CBLAS_TRANSPOSE_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const X : pgsl_vector_complex; const beta : gsl_complex; Y : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ztrmv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_complex * A , gsl_vector_complex * X );
function gsl_blas_ztrmv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_complex; X : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ztrsv ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_matrix_complex * A , gsl_vector_complex * X );
function gsl_blas_ztrsv( Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const A : pgsl_matrix_complex; X : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssymv ( CBLAS_UPLO_t Uplo , float alpha , const gsl_matrix_float * A , const gsl_vector_float * X , float beta , gsl_vector_float * Y );
function gsl_blas_ssymv( Uplo : CBLAS_UPLO_t; alpha : float; const A : pgsl_matrix_float; const X : pgsl_vector_float; beta : float; Y : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_sger ( float alpha , const gsl_vector_float * X , const gsl_vector_float * Y , gsl_matrix_float * A );
function gsl_blas_sger( alpha : float; const X : pgsl_vector_float; const Y : pgsl_vector_float; A : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssyr ( CBLAS_UPLO_t Uplo , float alpha , const gsl_vector_float * X , gsl_matrix_float * A );
function gsl_blas_ssyr( Uplo : CBLAS_UPLO_t; alpha : float; const X : pgsl_vector_float; A : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssyr2 ( CBLAS_UPLO_t Uplo , float alpha , const gsl_vector_float * X , const gsl_vector_float * Y , gsl_matrix_float * A );
function gsl_blas_ssyr2( Uplo : CBLAS_UPLO_t; alpha : float; const X : pgsl_vector_float; const Y : pgsl_vector_float; A : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsymv ( CBLAS_UPLO_t Uplo , double alpha , const gsl_matrix * A , const gsl_vector * X , double beta , gsl_vector * Y );
function gsl_blas_dsymv( Uplo : CBLAS_UPLO_t; alpha : double; const A : pgsl_matrix; const X : pgsl_vector; beta : double; Y : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dger ( double alpha , const gsl_vector * X , const gsl_vector * Y , gsl_matrix * A );
function gsl_blas_dger( alpha : double; const X : pgsl_vector; const Y : pgsl_vector; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsyr ( CBLAS_UPLO_t Uplo , double alpha , const gsl_vector * X , gsl_matrix * A );
function gsl_blas_dsyr( Uplo : CBLAS_UPLO_t; alpha : double; const X : pgsl_vector; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsyr2 ( CBLAS_UPLO_t Uplo , double alpha , const gsl_vector * X , const gsl_vector * Y , gsl_matrix * A );
function gsl_blas_dsyr2( Uplo : CBLAS_UPLO_t; alpha : double; const X : pgsl_vector; const Y : pgsl_vector; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_chemv ( CBLAS_UPLO_t Uplo , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_vector_complex_float * X , const gsl_complex_float beta , gsl_vector_complex_float * Y );
function gsl_blas_chemv( Uplo : CBLAS_UPLO_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const X : pgsl_vector_complex_float; const beta : gsl_complex_float; Y : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cgeru ( const gsl_complex_float alpha , const gsl_vector_complex_float * X , const gsl_vector_complex_float * Y , gsl_matrix_complex_float * A );
function gsl_blas_cgeru( const alpha : gsl_complex_float; const X : pgsl_vector_complex_float; const Y : pgsl_vector_complex_float; A : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cgerc ( const gsl_complex_float alpha , const gsl_vector_complex_float * X , const gsl_vector_complex_float * Y , gsl_matrix_complex_float * A );
function gsl_blas_cgerc( const alpha : gsl_complex_float; const X : pgsl_vector_complex_float; const Y : pgsl_vector_complex_float; A : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cher ( CBLAS_UPLO_t Uplo , float alpha , const gsl_vector_complex_float * X , gsl_matrix_complex_float * A );
function gsl_blas_cher( Uplo : CBLAS_UPLO_t; alpha : float; const X : pgsl_vector_complex_float; A : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cher2 ( CBLAS_UPLO_t Uplo , const gsl_complex_float alpha , const gsl_vector_complex_float * X , const gsl_vector_complex_float * Y , gsl_matrix_complex_float * A );
function gsl_blas_cher2( Uplo : CBLAS_UPLO_t; const alpha : gsl_complex_float; const X : pgsl_vector_complex_float; const Y : pgsl_vector_complex_float; A : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zhemv ( CBLAS_UPLO_t Uplo , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_vector_complex * X , const gsl_complex beta , gsl_vector_complex * Y );
function gsl_blas_zhemv( Uplo : CBLAS_UPLO_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const X : pgsl_vector_complex; const beta : gsl_complex; Y : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zgeru ( const gsl_complex alpha , const gsl_vector_complex * X , const gsl_vector_complex * Y , gsl_matrix_complex * A );
function gsl_blas_zgeru( const alpha : gsl_complex; const X : pgsl_vector_complex; const Y : pgsl_vector_complex; A : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zgerc ( const gsl_complex alpha , const gsl_vector_complex * X , const gsl_vector_complex * Y , gsl_matrix_complex * A );
function gsl_blas_zgerc( const alpha : gsl_complex; const X : pgsl_vector_complex; const Y : pgsl_vector_complex; A : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zher ( CBLAS_UPLO_t Uplo , double alpha , const gsl_vector_complex * X , gsl_matrix_complex * A );
function gsl_blas_zher( Uplo : CBLAS_UPLO_t; alpha : double; const X : pgsl_vector_complex; A : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zher2 ( CBLAS_UPLO_t Uplo , const gsl_complex alpha , const gsl_vector_complex * X , const gsl_vector_complex * Y , gsl_matrix_complex * A );
function gsl_blas_zher2( Uplo : CBLAS_UPLO_t; const alpha : gsl_complex; const X : pgsl_vector_complex; const Y : pgsl_vector_complex; A : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_sgemm ( CBLAS_TRANSPOSE_t TransA , CBLAS_TRANSPOSE_t TransB , float alpha , const gsl_matrix_float * A , const gsl_matrix_float * B , float beta , gsl_matrix_float * C );
function gsl_blas_sgemm( TransA : CBLAS_TRANSPOSE_t; TransB : CBLAS_TRANSPOSE_t; alpha : float; const A : pgsl_matrix_float; const B : pgsl_matrix_float; beta : float; C : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssymm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , float alpha , const gsl_matrix_float * A , const gsl_matrix_float * B , float beta , gsl_matrix_float * C );
function gsl_blas_ssymm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; alpha : float; const A : pgsl_matrix_float; const B : pgsl_matrix_float; beta : float; C : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssyrk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , float alpha , const gsl_matrix_float * A , float beta , gsl_matrix_float * C );
function gsl_blas_ssyrk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : float; const A : pgsl_matrix_float; beta : float; C : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ssyr2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , float alpha , const gsl_matrix_float * A , const gsl_matrix_float * B , float beta , gsl_matrix_float * C );
function gsl_blas_ssyr2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : float; const A : pgsl_matrix_float; const B : pgsl_matrix_float; beta : float; C : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_strmm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , float alpha , const gsl_matrix_float * A , gsl_matrix_float * B );
function gsl_blas_strmm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; alpha : float; const A : pgsl_matrix_float; B : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_strsm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , float alpha , const gsl_matrix_float * A , gsl_matrix_float * B );
function gsl_blas_strsm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; alpha : float; const A : pgsl_matrix_float; B : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dgemm ( CBLAS_TRANSPOSE_t TransA , CBLAS_TRANSPOSE_t TransB , double alpha , const gsl_matrix * A , const gsl_matrix * B , double beta , gsl_matrix * C );
function gsl_blas_dgemm( TransA : CBLAS_TRANSPOSE_t; TransB : CBLAS_TRANSPOSE_t; alpha : double; const A : pgsl_matrix; const B : pgsl_matrix; beta : double; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsymm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , double alpha , const gsl_matrix * A , const gsl_matrix * B , double beta , gsl_matrix * C );
function gsl_blas_dsymm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; alpha : double; const A : pgsl_matrix; const B : pgsl_matrix; beta : double; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsyrk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , double alpha , const gsl_matrix * A , double beta , gsl_matrix * C );
function gsl_blas_dsyrk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : double; const A : pgsl_matrix; beta : double; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dsyr2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , double alpha , const gsl_matrix * A , const gsl_matrix * B , double beta , gsl_matrix * C );
function gsl_blas_dsyr2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : double; const A : pgsl_matrix; const B : pgsl_matrix; beta : double; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dtrmm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , double alpha , const gsl_matrix * A , gsl_matrix * B );
function gsl_blas_dtrmm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; alpha : double; const A : pgsl_matrix; B : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_dtrsm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , double alpha , const gsl_matrix * A , gsl_matrix * B );
function gsl_blas_dtrsm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; alpha : double; const A : pgsl_matrix; B : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cgemm ( CBLAS_TRANSPOSE_t TransA , CBLAS_TRANSPOSE_t TransB , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_matrix_complex_float * B , const gsl_complex_float beta , gsl_matrix_complex_float * C );
function gsl_blas_cgemm( TransA : CBLAS_TRANSPOSE_t; TransB : CBLAS_TRANSPOSE_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const B : pgsl_matrix_complex_float; const beta : gsl_complex_float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_csymm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_matrix_complex_float * B , const gsl_complex_float beta , gsl_matrix_complex_float * C );
function gsl_blas_csymm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const B : pgsl_matrix_complex_float; const beta : gsl_complex_float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_csyrk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_complex_float beta , gsl_matrix_complex_float * C );
function gsl_blas_csyrk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const beta : gsl_complex_float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_csyr2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_matrix_complex_float * B , const gsl_complex_float beta , gsl_matrix_complex_float * C );
function gsl_blas_csyr2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const B : pgsl_matrix_complex_float; const beta : gsl_complex_float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ctrmm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , gsl_matrix_complex_float * B );
function gsl_blas_ctrmm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; B : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ctrsm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , gsl_matrix_complex_float * B );
function gsl_blas_ctrsm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; B : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zgemm ( CBLAS_TRANSPOSE_t TransA , CBLAS_TRANSPOSE_t TransB , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_matrix_complex * B , const gsl_complex beta , gsl_matrix_complex * C );
function gsl_blas_zgemm( TransA : CBLAS_TRANSPOSE_t; TransB : CBLAS_TRANSPOSE_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const B : pgsl_matrix_complex; const beta : gsl_complex; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zsymm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_matrix_complex * B , const gsl_complex beta , gsl_matrix_complex * C );
function gsl_blas_zsymm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const B : pgsl_matrix_complex; const beta : gsl_complex; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zsyrk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_complex beta , gsl_matrix_complex * C );
function gsl_blas_zsyrk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const beta : gsl_complex; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zsyr2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_matrix_complex * B , const gsl_complex beta , gsl_matrix_complex * C );
function gsl_blas_zsyr2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const B : pgsl_matrix_complex; const beta : gsl_complex; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ztrmm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_complex alpha , const gsl_matrix_complex * A , gsl_matrix_complex * B );
function gsl_blas_ztrmm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; B : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_ztrsm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t TransA , CBLAS_DIAG_t Diag , const gsl_complex alpha , const gsl_matrix_complex * A , gsl_matrix_complex * B );
function gsl_blas_ztrsm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; TransA : CBLAS_TRANSPOSE_t; Diag : CBLAS_DIAG_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; B : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_chemm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_matrix_complex_float * B , const gsl_complex_float beta , gsl_matrix_complex_float * C );
function gsl_blas_chemm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const B : pgsl_matrix_complex_float; const beta : gsl_complex_float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cherk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , float alpha , const gsl_matrix_complex_float * A , float beta , gsl_matrix_complex_float * C );
function gsl_blas_cherk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : float; const A : pgsl_matrix_complex_float; beta : float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_cher2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex_float alpha , const gsl_matrix_complex_float * A , const gsl_matrix_complex_float * B , float beta , gsl_matrix_complex_float * C );
function gsl_blas_cher2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex_float; const A : pgsl_matrix_complex_float; const B : pgsl_matrix_complex_float; beta : float; C : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zhemm ( CBLAS_SIDE_t Side , CBLAS_UPLO_t Uplo , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_matrix_complex * B , const gsl_complex beta , gsl_matrix_complex * C );
function gsl_blas_zhemm( Side : CBLAS_SIDE_t; Uplo : CBLAS_UPLO_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const B : pgsl_matrix_complex; const beta : gsl_complex; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zherk ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , double alpha , const gsl_matrix_complex * A , double beta , gsl_matrix_complex * C );
function gsl_blas_zherk( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; alpha : double; const A : pgsl_matrix_complex; beta : double; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_blas_zher2k ( CBLAS_UPLO_t Uplo , CBLAS_TRANSPOSE_t Trans , const gsl_complex alpha , const gsl_matrix_complex * A , const gsl_matrix_complex * B , double beta , gsl_matrix_complex * C );
function gsl_blas_zher2k( Uplo : CBLAS_UPLO_t; Trans : CBLAS_TRANSPOSE_t; const alpha : gsl_complex; const A : pgsl_matrix_complex; const B : pgsl_matrix_complex; beta : double; C : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;

//gsl_blas_types.h

//gsl_block.h

//gsl_block_char.h
//GSL_EXPORT gsl_block_char * gsl_block_char_alloc ( const size_t n );
function gsl_block_char_alloc( const n : size_t ) : pgsl_block_char; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_char * gsl_block_char_calloc ( const size_t n );
function gsl_block_char_calloc( const n : size_t ) : pgsl_block_char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_char_free ( gsl_block_char * b );
procedure gsl_block_char_free( b : pgsl_block_char ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_fread ( FILE * stream , gsl_block_char * b );
function gsl_block_char_fread( stream : pFILE; b : pgsl_block_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_fwrite ( FILE * stream , const gsl_block_char * b );
function gsl_block_char_fwrite( stream : pFILE; const b : pgsl_block_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_fscanf ( FILE * stream , gsl_block_char * b );
function gsl_block_char_fscanf( stream : pFILE; b : pgsl_block_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_fprintf ( FILE * stream , const gsl_block_char * b , const char * format );
function gsl_block_char_fprintf( stream : pFILE; const b : pgsl_block_char; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_raw_fread ( FILE * stream , char * b , const size_t n , const size_t stride );
function gsl_block_char_raw_fread( stream : pFILE; b : pchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_raw_fwrite ( FILE * stream , const char * b , const size_t n , const size_t stride );
function gsl_block_char_raw_fwrite( stream : pFILE; const b : pchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_raw_fscanf ( FILE * stream , char * b , const size_t n , const size_t stride );
function gsl_block_char_raw_fscanf( stream : pFILE; b : pchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_char_raw_fprintf ( FILE * stream , const char * b , const size_t n , const size_t stride , const char * format );
function gsl_block_char_raw_fprintf( stream : pFILE; const b : pchar; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_char_size ( const gsl_block_char * b );
function gsl_block_char_size( const b : pgsl_block_char ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT char * gsl_block_char_data ( const gsl_block_char * b );
function gsl_block_char_data( const b : pgsl_block_char ) : pchar; cdecl; external gsl_dll;

//gsl_block_complex_double.h
//GSL_EXPORT gsl_block_complex * gsl_block_complex_alloc ( const size_t n );
function gsl_block_complex_alloc( const n : size_t ) : pgsl_block_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_complex * gsl_block_complex_calloc ( const size_t n );
function gsl_block_complex_calloc( const n : size_t ) : pgsl_block_complex; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_complex_free ( gsl_block_complex * b );
procedure gsl_block_complex_free( b : pgsl_block_complex ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_fread ( FILE * stream , gsl_block_complex * b );
function gsl_block_complex_fread( stream : pFILE; b : pgsl_block_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_fwrite ( FILE * stream , const gsl_block_complex * b );
function gsl_block_complex_fwrite( stream : pFILE; const b : pgsl_block_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_fscanf ( FILE * stream , gsl_block_complex * b );
function gsl_block_complex_fscanf( stream : pFILE; b : pgsl_block_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_fprintf ( FILE * stream , const gsl_block_complex * b , const char * format );
function gsl_block_complex_fprintf( stream : pFILE; const b : pgsl_block_complex; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_raw_fread ( FILE * stream , double * b , const size_t n , const size_t stride );
function gsl_block_complex_raw_fread( stream : pFILE; b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_raw_fwrite ( FILE * stream , const double * b , const size_t n , const size_t stride );
function gsl_block_complex_raw_fwrite( stream : pFILE; const b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_raw_fscanf ( FILE * stream , double * b , const size_t n , const size_t stride );
function gsl_block_complex_raw_fscanf( stream : pFILE; b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_raw_fprintf ( FILE * stream , const double * b , const size_t n , const size_t stride , const char * format );
function gsl_block_complex_raw_fprintf( stream : pFILE; const b : pdouble; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_complex_size ( const gsl_block_complex * b );
function gsl_block_complex_size( const b : pgsl_block_complex ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT double * gsl_block_complex_data ( const gsl_block_complex * b );
function gsl_block_complex_data( const b : pgsl_block_complex ) : pdouble; cdecl; external gsl_dll;

//gsl_block_complex_float.h
//GSL_EXPORT gsl_block_complex_float * gsl_block_complex_float_alloc ( const size_t n );
function gsl_block_complex_float_alloc( const n : size_t ) : pgsl_block_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_complex_float * gsl_block_complex_float_calloc ( const size_t n );
function gsl_block_complex_float_calloc( const n : size_t ) : pgsl_block_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_complex_float_free ( gsl_block_complex_float * b );
procedure gsl_block_complex_float_free( b : pgsl_block_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_fread ( FILE * stream , gsl_block_complex_float * b );
function gsl_block_complex_float_fread( stream : pFILE; b : pgsl_block_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_fwrite ( FILE * stream , const gsl_block_complex_float * b );
function gsl_block_complex_float_fwrite( stream : pFILE; const b : pgsl_block_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_fscanf ( FILE * stream , gsl_block_complex_float * b );
function gsl_block_complex_float_fscanf( stream : pFILE; b : pgsl_block_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_fprintf ( FILE * stream , const gsl_block_complex_float * b , const char * format );
function gsl_block_complex_float_fprintf( stream : pFILE; const b : pgsl_block_complex_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_raw_fread ( FILE * stream , float * b , const size_t n , const size_t stride );
function gsl_block_complex_float_raw_fread( stream : pFILE; b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_raw_fwrite ( FILE * stream , const float * b , const size_t n , const size_t stride );
function gsl_block_complex_float_raw_fwrite( stream : pFILE; const b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_raw_fscanf ( FILE * stream , float * b , const size_t n , const size_t stride );
function gsl_block_complex_float_raw_fscanf( stream : pFILE; b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_float_raw_fprintf ( FILE * stream , const float * b , const size_t n , const size_t stride , const char * format );
function gsl_block_complex_float_raw_fprintf( stream : pFILE; const b : pfloat; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_complex_float_size ( const gsl_block_complex_float * b );
function gsl_block_complex_float_size( const b : pgsl_block_complex_float ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT float * gsl_block_complex_float_data ( const gsl_block_complex_float * b );
function gsl_block_complex_float_data( const b : pgsl_block_complex_float ) : pfloat; cdecl; external gsl_dll;

//gsl_block_complex_long_double.h
//GSL_EXPORT gsl_block_complex_long_double * gsl_block_complex_long_double_alloc ( const size_t n );
function gsl_block_complex_long_double_alloc( const n : size_t ) : pgsl_block_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_complex_long_double * gsl_block_complex_long_double_calloc ( const size_t n );
function gsl_block_complex_long_double_calloc( const n : size_t ) : pgsl_block_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_complex_long_double_free ( gsl_block_complex_long_double * b );
procedure gsl_block_complex_long_double_free( b : pgsl_block_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_fread ( FILE * stream , gsl_block_complex_long_double * b );
function gsl_block_complex_long_double_fread( stream : pFILE; b : pgsl_block_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_fwrite ( FILE * stream , const gsl_block_complex_long_double * b );
function gsl_block_complex_long_double_fwrite( stream : pFILE; const b : pgsl_block_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_fscanf ( FILE * stream , gsl_block_complex_long_double * b );
function gsl_block_complex_long_double_fscanf( stream : pFILE; b : pgsl_block_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_fprintf ( FILE * stream , const gsl_block_complex_long_double * b , const char * format );
function gsl_block_complex_long_double_fprintf( stream : pFILE; const b : pgsl_block_complex_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_raw_fread ( FILE * stream , long double * b , const size_t n , const size_t stride );
function gsl_block_complex_long_double_raw_fread( stream : pFILE; b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_raw_fwrite ( FILE * stream , const long double * b , const size_t n , const size_t stride );
function gsl_block_complex_long_double_raw_fwrite( stream : pFILE; const b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_raw_fscanf ( FILE * stream , long double * b , const size_t n , const size_t stride );
function gsl_block_complex_long_double_raw_fscanf( stream : pFILE; b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_complex_long_double_raw_fprintf ( FILE * stream , const long double * b , const size_t n , const size_t stride , const char * format );
function gsl_block_complex_long_double_raw_fprintf( stream : pFILE; const b : plongdouble; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_complex_long_double_size ( const gsl_block_complex_long_double * b );
function gsl_block_complex_long_double_size( const b : pgsl_block_complex_long_double ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT long double * gsl_block_complex_long_double_data ( const gsl_block_complex_long_double * b );
function gsl_block_complex_long_double_data( const b : pgsl_block_complex_long_double ) : plongdouble; cdecl; external gsl_dll;

//gsl_block_double.h
//GSL_EXPORT gsl_block * gsl_block_alloc ( const size_t n );
function gsl_block_alloc( const n : size_t ) : pgsl_block; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block * gsl_block_calloc ( const size_t n );
function gsl_block_calloc( const n : size_t ) : pgsl_block; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_free ( gsl_block * b );
procedure gsl_block_free( b : pgsl_block ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_fread ( FILE * stream , gsl_block * b );
function gsl_block_fread( stream : pFILE; b : pgsl_block ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_fwrite ( FILE * stream , const gsl_block * b );
function gsl_block_fwrite( stream : pFILE; const b : pgsl_block ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_fscanf ( FILE * stream , gsl_block * b );
function gsl_block_fscanf( stream : pFILE; b : pgsl_block ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_fprintf ( FILE * stream , const gsl_block * b , const char * format );
function gsl_block_fprintf( stream : pFILE; const b : pgsl_block; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_raw_fread ( FILE * stream , double * b , const size_t n , const size_t stride );
function gsl_block_raw_fread( stream : pFILE; b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_raw_fwrite ( FILE * stream , const double * b , const size_t n , const size_t stride );
function gsl_block_raw_fwrite( stream : pFILE; const b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_raw_fscanf ( FILE * stream , double * b , const size_t n , const size_t stride );
function gsl_block_raw_fscanf( stream : pFILE; b : pdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_raw_fprintf ( FILE * stream , const double * b , const size_t n , const size_t stride , const char * format );
function gsl_block_raw_fprintf( stream : pFILE; const b : pdouble; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_size ( const gsl_block * b );
function gsl_block_size( const b : pgsl_block ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT double * gsl_block_data ( const gsl_block * b );
function gsl_block_data( const b : pgsl_block ) : pdouble; cdecl; external gsl_dll;

//gsl_block_float.h
//GSL_EXPORT gsl_block_float * gsl_block_float_alloc ( const size_t n );
function gsl_block_float_alloc( const n : size_t ) : pgsl_block_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_float * gsl_block_float_calloc ( const size_t n );
function gsl_block_float_calloc( const n : size_t ) : pgsl_block_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_float_free ( gsl_block_float * b );
procedure gsl_block_float_free( b : pgsl_block_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_fread ( FILE * stream , gsl_block_float * b );
function gsl_block_float_fread( stream : pFILE; b : pgsl_block_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_fwrite ( FILE * stream , const gsl_block_float * b );
function gsl_block_float_fwrite( stream : pFILE; const b : pgsl_block_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_fscanf ( FILE * stream , gsl_block_float * b );
function gsl_block_float_fscanf( stream : pFILE; b : pgsl_block_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_fprintf ( FILE * stream , const gsl_block_float * b , const char * format );
function gsl_block_float_fprintf( stream : pFILE; const b : pgsl_block_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_raw_fread ( FILE * stream , float * b , const size_t n , const size_t stride );
function gsl_block_float_raw_fread( stream : pFILE; b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_raw_fwrite ( FILE * stream , const float * b , const size_t n , const size_t stride );
function gsl_block_float_raw_fwrite( stream : pFILE; const b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_raw_fscanf ( FILE * stream , float * b , const size_t n , const size_t stride );
function gsl_block_float_raw_fscanf( stream : pFILE; b : pfloat; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_float_raw_fprintf ( FILE * stream , const float * b , const size_t n , const size_t stride , const char * format );
function gsl_block_float_raw_fprintf( stream : pFILE; const b : pfloat; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_float_size ( const gsl_block_float * b );
function gsl_block_float_size( const b : pgsl_block_float ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT float * gsl_block_float_data ( const gsl_block_float * b );
function gsl_block_float_data( const b : pgsl_block_float ) : pfloat; cdecl; external gsl_dll;

//gsl_block_int.h
//GSL_EXPORT gsl_block_int * gsl_block_int_alloc ( const size_t n );
function gsl_block_int_alloc( const n : size_t ) : pgsl_block_int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_int * gsl_block_int_calloc ( const size_t n );
function gsl_block_int_calloc( const n : size_t ) : pgsl_block_int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_int_free ( gsl_block_int * b );
procedure gsl_block_int_free( b : pgsl_block_int ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_fread ( FILE * stream , gsl_block_int * b );
function gsl_block_int_fread( stream : pFILE; b : pgsl_block_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_fwrite ( FILE * stream , const gsl_block_int * b );
function gsl_block_int_fwrite( stream : pFILE; const b : pgsl_block_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_fscanf ( FILE * stream , gsl_block_int * b );
function gsl_block_int_fscanf( stream : pFILE; b : pgsl_block_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_fprintf ( FILE * stream , const gsl_block_int * b , const char * format );
function gsl_block_int_fprintf( stream : pFILE; const b : pgsl_block_int; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_raw_fread ( FILE * stream , int * b , const size_t n , const size_t stride );
function gsl_block_int_raw_fread( stream : pFILE; b : pint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_raw_fwrite ( FILE * stream , const int * b , const size_t n , const size_t stride );
function gsl_block_int_raw_fwrite( stream : pFILE; const b : pint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_raw_fscanf ( FILE * stream , int * b , const size_t n , const size_t stride );
function gsl_block_int_raw_fscanf( stream : pFILE; b : pint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_int_raw_fprintf ( FILE * stream , const int * b , const size_t n , const size_t stride , const char * format );
function gsl_block_int_raw_fprintf( stream : pFILE; const b : pint; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_int_size ( const gsl_block_int * b );
function gsl_block_int_size( const b : pgsl_block_int ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT int * gsl_block_int_data ( const gsl_block_int * b );
function gsl_block_int_data( const b : pgsl_block_int ) : pint; cdecl; external gsl_dll;

//gsl_block_long.h
//GSL_EXPORT gsl_block_long * gsl_block_long_alloc ( const size_t n );
function gsl_block_long_alloc( const n : size_t ) : pgsl_block_long; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_long * gsl_block_long_calloc ( const size_t n );
function gsl_block_long_calloc( const n : size_t ) : pgsl_block_long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_long_free ( gsl_block_long * b );
procedure gsl_block_long_free( b : pgsl_block_long ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_fread ( FILE * stream , gsl_block_long * b );
function gsl_block_long_fread( stream : pFILE; b : pgsl_block_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_fwrite ( FILE * stream , const gsl_block_long * b );
function gsl_block_long_fwrite( stream : pFILE; const b : pgsl_block_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_fscanf ( FILE * stream , gsl_block_long * b );
function gsl_block_long_fscanf( stream : pFILE; b : pgsl_block_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_fprintf ( FILE * stream , const gsl_block_long * b , const char * format );
function gsl_block_long_fprintf( stream : pFILE; const b : pgsl_block_long; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_raw_fread ( FILE * stream , long * b , const size_t n , const size_t stride );
function gsl_block_long_raw_fread( stream : pFILE; b : plong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_raw_fwrite ( FILE * stream , const long * b , const size_t n , const size_t stride );
function gsl_block_long_raw_fwrite( stream : pFILE; const b : plong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_raw_fscanf ( FILE * stream , long * b , const size_t n , const size_t stride );
function gsl_block_long_raw_fscanf( stream : pFILE; b : plong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_raw_fprintf ( FILE * stream , const long * b , const size_t n , const size_t stride , const char * format );
function gsl_block_long_raw_fprintf( stream : pFILE; const b : plong; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_long_size ( const gsl_block_long * b );
function gsl_block_long_size( const b : pgsl_block_long ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT long * gsl_block_long_data ( const gsl_block_long * b );
function gsl_block_long_data( const b : pgsl_block_long ) : plong; cdecl; external gsl_dll;

//gsl_block_long_double.h
//GSL_EXPORT gsl_block_long_double * gsl_block_long_double_alloc ( const size_t n );
function gsl_block_long_double_alloc( const n : size_t ) : pgsl_block_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_long_double * gsl_block_long_double_calloc ( const size_t n );
function gsl_block_long_double_calloc( const n : size_t ) : pgsl_block_long_double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_long_double_free ( gsl_block_long_double * b );
procedure gsl_block_long_double_free( b : pgsl_block_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_fread ( FILE * stream , gsl_block_long_double * b );
function gsl_block_long_double_fread( stream : pFILE; b : pgsl_block_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_fwrite ( FILE * stream , const gsl_block_long_double * b );
function gsl_block_long_double_fwrite( stream : pFILE; const b : pgsl_block_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_fscanf ( FILE * stream , gsl_block_long_double * b );
function gsl_block_long_double_fscanf( stream : pFILE; b : pgsl_block_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_fprintf ( FILE * stream , const gsl_block_long_double * b , const char * format );
function gsl_block_long_double_fprintf( stream : pFILE; const b : pgsl_block_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_raw_fread ( FILE * stream , long double * b , const size_t n , const size_t stride );
function gsl_block_long_double_raw_fread( stream : pFILE; b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_raw_fwrite ( FILE * stream , const long double * b , const size_t n , const size_t stride );
function gsl_block_long_double_raw_fwrite( stream : pFILE; const b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_raw_fscanf ( FILE * stream , long double * b , const size_t n , const size_t stride );
function gsl_block_long_double_raw_fscanf( stream : pFILE; b : plongdouble; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_long_double_raw_fprintf ( FILE * stream , const long double * b , const size_t n , const size_t stride , const char * format );
function gsl_block_long_double_raw_fprintf( stream : pFILE; const b : plongdouble; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_long_double_size ( const gsl_block_long_double * b );
function gsl_block_long_double_size( const b : pgsl_block_long_double ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT long double * gsl_block_long_double_data ( const gsl_block_long_double * b );
function gsl_block_long_double_data( const b : pgsl_block_long_double ) : plongdouble; cdecl; external gsl_dll;

//gsl_block_short.h
//GSL_EXPORT gsl_block_short * gsl_block_short_alloc ( const size_t n );
function gsl_block_short_alloc( const n : size_t ) : pgsl_block_short; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_short * gsl_block_short_calloc ( const size_t n );
function gsl_block_short_calloc( const n : size_t ) : pgsl_block_short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_short_free ( gsl_block_short * b );
procedure gsl_block_short_free( b : pgsl_block_short ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_fread ( FILE * stream , gsl_block_short * b );
function gsl_block_short_fread( stream : pFILE; b : pgsl_block_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_fwrite ( FILE * stream , const gsl_block_short * b );
function gsl_block_short_fwrite( stream : pFILE; const b : pgsl_block_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_fscanf ( FILE * stream , gsl_block_short * b );
function gsl_block_short_fscanf( stream : pFILE; b : pgsl_block_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_fprintf ( FILE * stream , const gsl_block_short * b , const char * format );
function gsl_block_short_fprintf( stream : pFILE; const b : pgsl_block_short; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_raw_fread ( FILE * stream , short * b , const size_t n , const size_t stride );
function gsl_block_short_raw_fread( stream : pFILE; b : pshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_raw_fwrite ( FILE * stream , const short * b , const size_t n , const size_t stride );
function gsl_block_short_raw_fwrite( stream : pFILE; const b : pshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_raw_fscanf ( FILE * stream , short * b , const size_t n , const size_t stride );
function gsl_block_short_raw_fscanf( stream : pFILE; b : pshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_short_raw_fprintf ( FILE * stream , const short * b , const size_t n , const size_t stride , const char * format );
function gsl_block_short_raw_fprintf( stream : pFILE; const b : pshort; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_short_size ( const gsl_block_short * b );
function gsl_block_short_size( const b : pgsl_block_short ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT short * gsl_block_short_data ( const gsl_block_short * b );
function gsl_block_short_data( const b : pgsl_block_short ) : pshort; cdecl; external gsl_dll;

//gsl_block_uchar.h
//GSL_EXPORT gsl_block_uchar * gsl_block_uchar_alloc ( const size_t n );
function gsl_block_uchar_alloc( const n : size_t ) : pgsl_block_uchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_uchar * gsl_block_uchar_calloc ( const size_t n );
function gsl_block_uchar_calloc( const n : size_t ) : pgsl_block_uchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_uchar_free ( gsl_block_uchar * b );
procedure gsl_block_uchar_free( b : pgsl_block_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_fread ( FILE * stream , gsl_block_uchar * b );
function gsl_block_uchar_fread( stream : pFILE; b : pgsl_block_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_fwrite ( FILE * stream , const gsl_block_uchar * b );
function gsl_block_uchar_fwrite( stream : pFILE; const b : pgsl_block_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_fscanf ( FILE * stream , gsl_block_uchar * b );
function gsl_block_uchar_fscanf( stream : pFILE; b : pgsl_block_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_fprintf ( FILE * stream , const gsl_block_uchar * b , const char * format );
function gsl_block_uchar_fprintf( stream : pFILE; const b : pgsl_block_uchar; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_raw_fread ( FILE * stream , unsigned char * b , const size_t n , const size_t stride );
function gsl_block_uchar_raw_fread( stream : pFILE; b : punsignedchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_raw_fwrite ( FILE * stream , const unsigned char * b , const size_t n , const size_t stride );
function gsl_block_uchar_raw_fwrite( stream : pFILE; const b : punsignedchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_raw_fscanf ( FILE * stream , unsigned char * b , const size_t n , const size_t stride );
function gsl_block_uchar_raw_fscanf( stream : pFILE; b : punsignedchar; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uchar_raw_fprintf ( FILE * stream , const unsigned char * b , const size_t n , const size_t stride , const char * format );
function gsl_block_uchar_raw_fprintf( stream : pFILE; const b : punsignedchar; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_uchar_size ( const gsl_block_uchar * b );
function gsl_block_uchar_size( const b : pgsl_block_uchar ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT unsigned char * gsl_block_uchar_data ( const gsl_block_uchar * b );
function gsl_block_uchar_data( const b : pgsl_block_uchar ) : punsignedchar; cdecl; external gsl_dll;

//gsl_block_uint.h
//GSL_EXPORT gsl_block_uint * gsl_block_uint_alloc ( const size_t n );
function gsl_block_uint_alloc( const n : size_t ) : pgsl_block_uint; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_uint * gsl_block_uint_calloc ( const size_t n );
function gsl_block_uint_calloc( const n : size_t ) : pgsl_block_uint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_uint_free ( gsl_block_uint * b );
procedure gsl_block_uint_free( b : pgsl_block_uint ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_fread ( FILE * stream , gsl_block_uint * b );
function gsl_block_uint_fread( stream : pFILE; b : pgsl_block_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_fwrite ( FILE * stream , const gsl_block_uint * b );
function gsl_block_uint_fwrite( stream : pFILE; const b : pgsl_block_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_fscanf ( FILE * stream , gsl_block_uint * b );
function gsl_block_uint_fscanf( stream : pFILE; b : pgsl_block_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_fprintf ( FILE * stream , const gsl_block_uint * b , const char * format );
function gsl_block_uint_fprintf( stream : pFILE; const b : pgsl_block_uint; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_raw_fread ( FILE * stream , unsigned int * b , const size_t n , const size_t stride );
function gsl_block_uint_raw_fread( stream : pFILE; b : punsignedint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_raw_fwrite ( FILE * stream , const unsigned int * b , const size_t n , const size_t stride );
function gsl_block_uint_raw_fwrite( stream : pFILE; const b : punsignedint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_raw_fscanf ( FILE * stream , unsigned int * b , const size_t n , const size_t stride );
function gsl_block_uint_raw_fscanf( stream : pFILE; b : punsignedint; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_uint_raw_fprintf ( FILE * stream , const unsigned int * b , const size_t n , const size_t stride , const char * format );
function gsl_block_uint_raw_fprintf( stream : pFILE; const b : punsignedint; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_uint_size ( const gsl_block_uint * b );
function gsl_block_uint_size( const b : pgsl_block_uint ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT unsigned int * gsl_block_uint_data ( const gsl_block_uint * b );
function gsl_block_uint_data( const b : pgsl_block_uint ) : punsignedint; cdecl; external gsl_dll;

//gsl_block_ulong.h
//GSL_EXPORT gsl_block_ulong * gsl_block_ulong_alloc ( const size_t n );
function gsl_block_ulong_alloc( const n : size_t ) : pgsl_block_ulong; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_ulong * gsl_block_ulong_calloc ( const size_t n );
function gsl_block_ulong_calloc( const n : size_t ) : pgsl_block_ulong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_ulong_free ( gsl_block_ulong * b );
procedure gsl_block_ulong_free( b : pgsl_block_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_fread ( FILE * stream , gsl_block_ulong * b );
function gsl_block_ulong_fread( stream : pFILE; b : pgsl_block_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_fwrite ( FILE * stream , const gsl_block_ulong * b );
function gsl_block_ulong_fwrite( stream : pFILE; const b : pgsl_block_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_fscanf ( FILE * stream , gsl_block_ulong * b );
function gsl_block_ulong_fscanf( stream : pFILE; b : pgsl_block_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_fprintf ( FILE * stream , const gsl_block_ulong * b , const char * format );
function gsl_block_ulong_fprintf( stream : pFILE; const b : pgsl_block_ulong; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_raw_fread ( FILE * stream , unsigned long * b , const size_t n , const size_t stride );
function gsl_block_ulong_raw_fread( stream : pFILE; b : punsignedlong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_raw_fwrite ( FILE * stream , const unsigned long * b , const size_t n , const size_t stride );
function gsl_block_ulong_raw_fwrite( stream : pFILE; const b : punsignedlong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_raw_fscanf ( FILE * stream , unsigned long * b , const size_t n , const size_t stride );
function gsl_block_ulong_raw_fscanf( stream : pFILE; b : punsignedlong; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ulong_raw_fprintf ( FILE * stream , const unsigned long * b , const size_t n , const size_t stride , const char * format );
function gsl_block_ulong_raw_fprintf( stream : pFILE; const b : punsignedlong; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_ulong_size ( const gsl_block_ulong * b );
function gsl_block_ulong_size( const b : pgsl_block_ulong ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT unsigned long * gsl_block_ulong_data ( const gsl_block_ulong * b );
function gsl_block_ulong_data( const b : pgsl_block_ulong ) : punsignedlong; cdecl; external gsl_dll;

//gsl_block_ushort.h
//GSL_EXPORT gsl_block_ushort * gsl_block_ushort_alloc ( const size_t n );
function gsl_block_ushort_alloc( const n : size_t ) : pgsl_block_ushort; cdecl; external gsl_dll;
//GSL_EXPORT gsl_block_ushort * gsl_block_ushort_calloc ( const size_t n );
function gsl_block_ushort_calloc( const n : size_t ) : pgsl_block_ushort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_block_ushort_free ( gsl_block_ushort * b );
procedure gsl_block_ushort_free( b : pgsl_block_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_fread ( FILE * stream , gsl_block_ushort * b );
function gsl_block_ushort_fread( stream : pFILE; b : pgsl_block_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_fwrite ( FILE * stream , const gsl_block_ushort * b );
function gsl_block_ushort_fwrite( stream : pFILE; const b : pgsl_block_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_fscanf ( FILE * stream , gsl_block_ushort * b );
function gsl_block_ushort_fscanf( stream : pFILE; b : pgsl_block_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_fprintf ( FILE * stream , const gsl_block_ushort * b , const char * format );
function gsl_block_ushort_fprintf( stream : pFILE; const b : pgsl_block_ushort; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_raw_fread ( FILE * stream , unsigned short * b , const size_t n , const size_t stride );
function gsl_block_ushort_raw_fread( stream : pFILE; b : punsignedshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_raw_fwrite ( FILE * stream , const unsigned short * b , const size_t n , const size_t stride );
function gsl_block_ushort_raw_fwrite( stream : pFILE; const b : punsignedshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_raw_fscanf ( FILE * stream , unsigned short * b , const size_t n , const size_t stride );
function gsl_block_ushort_raw_fscanf( stream : pFILE; b : punsignedshort; const n : size_t; const stride : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_block_ushort_raw_fprintf ( FILE * stream , const unsigned short * b , const size_t n , const size_t stride , const char * format );
function gsl_block_ushort_raw_fprintf( stream : pFILE; const b : punsignedshort; const n : size_t; const stride : size_t; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_block_ushort_size ( const gsl_block_ushort * b );
function gsl_block_ushort_size( const b : pgsl_block_ushort ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT unsigned short * gsl_block_ushort_data ( const gsl_block_ushort * b );
function gsl_block_ushort_data( const b : pgsl_block_ushort ) : punsignedshort; cdecl; external gsl_dll;

//gsl_cblas.h
//GSL_EXPORT float cblas_sdsdot ( const int N , const float alpha , const float * X , const int incX , const float * Y , const int incY );
function cblas_sdsdot( const N : int; const alpha : float; const X : pfloat; const incX : int; const Y : pfloat; const incY : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_dsdot ( const int N , const float * X , const int incX , const float * Y , const int incY );
function cblas_dsdot( const N : int; const X : pfloat; const incX : int; const Y : pfloat; const incY : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT float cblas_sdot ( const int N , const float * X , const int incX , const float * Y , const int incY );
function cblas_sdot( const N : int; const X : pfloat; const incX : int; const Y : pfloat; const incY : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_ddot ( const int N , const double * X , const int incX , const double * Y , const int incY );
function cblas_ddot( const N : int; const X : pdouble; const incX : int; const Y : pdouble; const incY : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cdotu_sub ( const int N , const void * X , const int incX , const void * Y , const int incY , void * dotu );
procedure cblas_cdotu_sub( const N : int; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; dotu : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cdotc_sub ( const int N , const void * X , const int incX , const void * Y , const int incY , void * dotc );
procedure cblas_cdotc_sub( const N : int; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; dotc : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zdotu_sub ( const int N , const void * X , const int incX , const void * Y , const int incY , void * dotu );
procedure cblas_zdotu_sub( const N : int; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; dotu : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zdotc_sub ( const int N , const void * X , const int incX , const void * Y , const int incY , void * dotc );
procedure cblas_zdotc_sub( const N : int; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; dotc : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT float cblas_snrm2 ( const int N , const float * X , const int incX );
function cblas_snrm2( const N : int; const X : pfloat; const incX : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT float cblas_sasum ( const int N , const float * X , const int incX );
function cblas_sasum( const N : int; const X : pfloat; const incX : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_dnrm2 ( const int N , const double * X , const int incX );
function cblas_dnrm2( const N : int; const X : pdouble; const incX : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_dasum ( const int N , const double * X , const int incX );
function cblas_dasum( const N : int; const X : pdouble; const incX : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT float cblas_scnrm2 ( const int N , const void * X , const int incX );
function cblas_scnrm2( const N : int; const X : pvoid; const incX : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT float cblas_scasum ( const int N , const void * X , const int incX );
function cblas_scasum( const N : int; const X : pvoid; const incX : int ) : float; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_dznrm2 ( const int N , const void * X , const int incX );
function cblas_dznrm2( const N : int; const X : pvoid; const incX : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT double cblas_dzasum ( const int N , const void * X , const int incX );
function cblas_dzasum( const N : int; const X : pvoid; const incX : int ) : double; cdecl; external cblas_dll;
//GSL_EXPORT CBLAS_INDEX cblas_isamax ( const int N , const float * X , const int incX );
function cblas_isamax( const N : int; const X : pfloat; const incX : int ) : CBLAS_INDEX; cdecl; external cblas_dll;
//GSL_EXPORT CBLAS_INDEX cblas_idamax ( const int N , const double * X , const int incX );
function cblas_idamax( const N : int; const X : pdouble; const incX : int ) : CBLAS_INDEX; cdecl; external cblas_dll;
//GSL_EXPORT CBLAS_INDEX cblas_icamax ( const int N , const void * X , const int incX );
function cblas_icamax( const N : int; const X : pvoid; const incX : int ) : CBLAS_INDEX; cdecl; external cblas_dll;
//GSL_EXPORT CBLAS_INDEX cblas_izamax ( const int N , const void * X , const int incX );
function cblas_izamax( const N : int; const X : pvoid; const incX : int ) : CBLAS_INDEX; cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sswap ( const int N , float * X , const int incX , float * Y , const int incY );
procedure cblas_sswap( const N : int; X : pfloat; const incX : int; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_scopy ( const int N , const float * X , const int incX , float * Y , const int incY );
procedure cblas_scopy( const N : int; const X : pfloat; const incX : int; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_saxpy ( const int N , const float alpha , const float * X , const int incX , float * Y , const int incY );
procedure cblas_saxpy( const N : int; const alpha : float; const X : pfloat; const incX : int; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dswap ( const int N , double * X , const int incX , double * Y , const int incY );
procedure cblas_dswap( const N : int; X : pdouble; const incX : int; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dcopy ( const int N , const double * X , const int incX , double * Y , const int incY );
procedure cblas_dcopy( const N : int; const X : pdouble; const incX : int; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_daxpy ( const int N , const double alpha , const double * X , const int incX , double * Y , const int incY );
procedure cblas_daxpy( const N : int; const alpha : double; const X : pdouble; const incX : int; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cswap ( const int N , void * X , const int incX , void * Y , const int incY );
procedure cblas_cswap( const N : int; X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ccopy ( const int N , const void * X , const int incX , void * Y , const int incY );
procedure cblas_ccopy( const N : int; const X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_caxpy ( const int N , const void * alpha , const void * X , const int incX , void * Y , const int incY );
procedure cblas_caxpy( const N : int; const alpha : pvoid; const X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zswap ( const int N , void * X , const int incX , void * Y , const int incY );
procedure cblas_zswap( const N : int; X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zcopy ( const int N , const void * X , const int incX , void * Y , const int incY );
procedure cblas_zcopy( const N : int; const X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zaxpy ( const int N , const void * alpha , const void * X , const int incX , void * Y , const int incY );
procedure cblas_zaxpy( const N : int; const alpha : pvoid; const X : pvoid; const incX : int; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_srotg ( float * a , float * b , float * c , float * s );
procedure cblas_srotg( a : pfloat; b : pfloat; c : pfloat; s : pfloat ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_srotmg ( float * d1 , float * d2 , float * b1 , const float b2 , float * P );
procedure cblas_srotmg( d1 : pfloat; d2 : pfloat; b1 : pfloat; const b2 : float; P : pfloat ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_srot ( const int N , float * X , const int incX , float * Y , const int incY , const float c , const float s );
procedure cblas_srot( const N : int; X : pfloat; const incX : int; Y : pfloat; const incY : int; const c : float; const s : float ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_srotm ( const int N , float * X , const int incX , float * Y , const int incY , const float * P );
procedure cblas_srotm( const N : int; X : pfloat; const incX : int; Y : pfloat; const incY : int; const P : pfloat ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_drotg ( double * a , double * b , double * c , double * s );
procedure cblas_drotg( a : pdouble; b : pdouble; c : pdouble; s : pdouble ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_drotmg ( double * d1 , double * d2 , double * b1 , const double b2 , double * P );
procedure cblas_drotmg( d1 : pdouble; d2 : pdouble; b1 : pdouble; const b2 : double; P : pdouble ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_drot ( const int N , double * X , const int incX , double * Y , const int incY , const double c , const double s );
procedure cblas_drot( const N : int; X : pdouble; const incX : int; Y : pdouble; const incY : int; const c : double; const s : double ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_drotm ( const int N , double * X , const int incX , double * Y , const int incY , const double * P );
procedure cblas_drotm( const N : int; X : pdouble; const incX : int; Y : pdouble; const incY : int; const P : pdouble ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sscal ( const int N , const float alpha , float * X , const int incX );
procedure cblas_sscal( const N : int; const alpha : float; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dscal ( const int N , const double alpha , double * X , const int incX );
procedure cblas_dscal( const N : int; const alpha : double; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cscal ( const int N , const void * alpha , void * X , const int incX );
procedure cblas_cscal( const N : int; const alpha : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zscal ( const int N , const void * alpha , void * X , const int incX );
procedure cblas_zscal( const N : int; const alpha : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_csscal ( const int N , const float alpha , void * X , const int incX );
procedure cblas_csscal( const N : int; const alpha : float; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zdscal ( const int N , const double alpha , void * X , const int incX );
procedure cblas_zdscal( const N : int; const alpha : double; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sgemv ( const enum CBLAS_ORDER order , const enum CBLAS_TRANSPOSE TransA , const int M , const int N , const float alpha , const float * A , const int lda , const float * X , const int incX , const float beta , float * Y , const int incY );
procedure cblas_sgemv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const alpha : float; const A : pfloat; const lda : int; const X : pfloat; const incX : int; const beta : float; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sgbmv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const int KL , const int KU , const float alpha , const float * A , const int lda , const float * X , const int incX , const float beta , float * Y , const int incY );
procedure cblas_sgbmv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const KL : int; const KU : int; const alpha : float; const A : pfloat; const lda : int; const X : pfloat; const incX : int; const beta : float; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_strmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const float * A , const int lda , float * X , const int incX );
procedure cblas_strmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pfloat; const lda : int; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_stbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const float * A , const int lda , float * X , const int incX );
procedure cblas_stbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pfloat; const lda : int; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_stpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const float * Ap , float * X , const int incX );
procedure cblas_stpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pfloat; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_strsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const float * A , const int lda , float * X , const int incX );
procedure cblas_strsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pfloat; const lda : int; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_stbsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const float * A , const int lda , float * X , const int incX );
procedure cblas_stbsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pfloat; const lda : int; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_stpsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const float * Ap , float * X , const int incX );
procedure cblas_stpsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pfloat; X : pfloat; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dgemv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const double alpha , const double * A , const int lda , const double * X , const int incX , const double beta , double * Y , const int incY );
procedure cblas_dgemv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const alpha : double; const A : pdouble; const lda : int; const X : pdouble; const incX : int; const beta : double; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dgbmv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const int KL , const int KU , const double alpha , const double * A , const int lda , const double * X , const int incX , const double beta , double * Y , const int incY );
procedure cblas_dgbmv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const KL : int; const KU : int; const alpha : double; const A : pdouble; const lda : int; const X : pdouble; const incX : int; const beta : double; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtrmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const double * A , const int lda , double * X , const int incX );
procedure cblas_dtrmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pdouble; const lda : int; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const double * A , const int lda , double * X , const int incX );
procedure cblas_dtbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pdouble; const lda : int; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const double * Ap , double * X , const int incX );
procedure cblas_dtpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pdouble; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtrsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const double * A , const int lda , double * X , const int incX );
procedure cblas_dtrsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pdouble; const lda : int; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtbsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const double * A , const int lda , double * X , const int incX );
procedure cblas_dtbsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pdouble; const lda : int; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtpsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const double * Ap , double * X , const int incX );
procedure cblas_dtpsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pdouble; X : pdouble; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cgemv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_cgemv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cgbmv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const int KL , const int KU , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_cgbmv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const KL : int; const KU : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctrmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * A , const int lda , void * X , const int incX );
procedure cblas_ctrmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const void * A , const int lda , void * X , const int incX );
procedure cblas_ctbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * Ap , void * X , const int incX );
procedure cblas_ctpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctrsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * A , const int lda , void * X , const int incX );
procedure cblas_ctrsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctbsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const void * A , const int lda , void * X , const int incX );
procedure cblas_ctbsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctpsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * Ap , void * X , const int incX );
procedure cblas_ctpsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zgemv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_zgemv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zgbmv ( const enumCBLAS_ORDER order , const enumCBLAS_TRANSPOSE TransA , const int M , const int N , const int KL , const int KU , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_zgbmv( const order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const M : int; const N : int; const KL : int; const KU : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztrmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * A , const int lda , void * X , const int incX );
procedure cblas_ztrmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const void * A , const int lda , void * X , const int incX );
procedure cblas_ztbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * Ap , void * X , const int incX );
procedure cblas_ztpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztrsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * A , const int lda , void * X , const int incX );
procedure cblas_ztrsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztbsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const int K , const void * A , const int lda , void * X , const int incX );
procedure cblas_ztbsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const K : int; const A : pvoid; const lda : int; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztpsv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int N , const void * Ap , void * X , const int incX );
procedure cblas_ztpsv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const N : int; const Ap : pvoid; X : pvoid; const incX : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssymv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * A , const int lda , const float * X , const int incX , const float beta , float * Y , const int incY );
procedure cblas_ssymv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const A : pfloat; const lda : int; const X : pfloat; const incX : int; const beta : float; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const int K , const float alpha , const float * A , const int lda , const float * X , const int incX , const float beta , float * Y , const int incY );
procedure cblas_ssbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const K : int; const alpha : float; const A : pfloat; const lda : int; const X : pfloat; const incX : int; const beta : float; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sspmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * Ap , const float * X , const int incX , const float beta , float * Y , const int incY );
procedure cblas_sspmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const Ap : pfloat; const X : pfloat; const incX : int; const beta : float; Y : pfloat; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sger ( const enumCBLAS_ORDER order , const int M , const int N , const float alpha , const float * X , const int incX , const float * Y , const int incY , float * A , const int lda );
procedure cblas_sger( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : float; const X : pfloat; const incX : int; const Y : pfloat; const incY : int; A : pfloat; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssyr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * X , const int incX , float * A , const int lda );
procedure cblas_ssyr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pfloat; const incX : int; A : pfloat; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sspr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * X , const int incX , float * Ap );
procedure cblas_sspr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pfloat; const incX : int; Ap : pfloat ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssyr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * X , const int incX , const float * Y , const int incY , float * A , const int lda );
procedure cblas_ssyr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pfloat; const incX : int; const Y : pfloat; const incY : int; A : pfloat; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sspr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const float * X , const int incX , const float * Y , const int incY , float * A );
procedure cblas_sspr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pfloat; const incX : int; const Y : pfloat; const incY : int; A : pfloat ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsymv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * A , const int lda , const double * X , const int incX , const double beta , double * Y , const int incY );
procedure cblas_dsymv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const A : pdouble; const lda : int; const X : pdouble; const incX : int; const beta : double; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const int K , const double alpha , const double * A , const int lda , const double * X , const int incX , const double beta , double * Y , const int incY );
procedure cblas_dsbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const K : int; const alpha : double; const A : pdouble; const lda : int; const X : pdouble; const incX : int; const beta : double; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dspmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * Ap , const double * X , const int incX , const double beta , double * Y , const int incY );
procedure cblas_dspmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const Ap : pdouble; const X : pdouble; const incX : int; const beta : double; Y : pdouble; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dger ( const enumCBLAS_ORDER order , const int M , const int N , const double alpha , const double * X , const int incX , const double * Y , const int incY , double * A , const int lda );
procedure cblas_dger( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : double; const X : pdouble; const incX : int; const Y : pdouble; const incY : int; A : pdouble; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsyr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * X , const int incX , double * A , const int lda );
procedure cblas_dsyr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pdouble; const incX : int; A : pdouble; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dspr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * X , const int incX , double * Ap );
procedure cblas_dspr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pdouble; const incX : int; Ap : pdouble ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsyr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * X , const int incX , const double * Y , const int incY , double * A , const int lda );
procedure cblas_dsyr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pdouble; const incX : int; const Y : pdouble; const incY : int; A : pdouble; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dspr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const double * X , const int incX , const double * Y , const int incY , double * A );
procedure cblas_dspr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pdouble; const incX : int; const Y : pdouble; const incY : int; A : pdouble ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chemv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_chemv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const int K , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_chbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * Ap , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_chpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const Ap : pvoid; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cgeru ( const enumCBLAS_ORDER order , const int M , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_cgeru( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cgerc ( const enumCBLAS_ORDER order , const int M , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_cgerc( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cher ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const void * X , const int incX , void * A , const int lda );
procedure cblas_cher( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pvoid; const incX : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chpr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const float alpha , const void * X , const int incX , void * A );
procedure cblas_chpr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : float; const X : pvoid; const incX : int; A : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cher2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_cher2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chpr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * Ap );
procedure cblas_chpr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; Ap : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhemv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_zhemv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhbmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const int K , const void * alpha , const void * A , const int lda , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_zhbmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhpmv ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * Ap , const void * X , const int incX , const void * beta , void * Y , const int incY );
procedure cblas_zhpmv( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const Ap : pvoid; const X : pvoid; const incX : int; const beta : pvoid; Y : pvoid; const incY : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zgeru ( const enumCBLAS_ORDER order , const int M , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_zgeru( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zgerc ( const enumCBLAS_ORDER order , const int M , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_zgerc( const order : enumCBLAS_ORDER; const M : int; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zher ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const void * X , const int incX , void * A , const int lda );
procedure cblas_zher( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pvoid; const incX : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhpr ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const double alpha , const void * X , const int incX , void * A );
procedure cblas_zhpr( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : double; const X : pvoid; const incX : int; A : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zher2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * A , const int lda );
procedure cblas_zher2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; A : pvoid; const lda : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhpr2 ( const enumCBLAS_ORDER order , const enumCBLAS_UPLO Uplo , const int N , const void * alpha , const void * X , const int incX , const void * Y , const int incY , void * Ap );
procedure cblas_zhpr2( const order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const N : int; const alpha : pvoid; const X : pvoid; const incX : int; const Y : pvoid; const incY : int; Ap : pvoid ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_sgemm ( const enumCBLAS_ORDER Order , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_TRANSPOSE TransB , const int M , const int N , const int K , const float alpha , const float * A , const int lda , const float * B , const int ldb , const float beta , float * C , const int ldc );
procedure cblas_sgemm( const Order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const TransB : enumCBLAS_TRANSPOSE; const M : int; const N : int; const K : int; const alpha : float; const A : pfloat; const lda : int; const B : pfloat; const ldb : int; const beta : float; C : pfloat; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssymm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const float alpha , const float * A , const int lda , const float * B , const int ldb , const float beta , float * C , const int ldc );
procedure cblas_ssymm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : float; const A : pfloat; const lda : int; const B : pfloat; const ldb : int; const beta : float; C : pfloat; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssyrk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const float alpha , const float * A , const int lda , const float beta , float * C , const int ldc );
procedure cblas_ssyrk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : float; const A : pfloat; const lda : int; const beta : float; C : pfloat; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ssyr2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const float alpha , const float * A , const int lda , const float * B , const int ldb , const float beta , float * C , const int ldc );
procedure cblas_ssyr2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : float; const A : pfloat; const lda : int; const B : pfloat; const ldb : int; const beta : float; C : pfloat; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_strmm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const float alpha , const float * A , const int lda , float * B , const int ldb );
procedure cblas_strmm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : float; const A : pfloat; const lda : int; B : pfloat; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_strsm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const float alpha , const float * A , const int lda , float * B , const int ldb );
procedure cblas_strsm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : float; const A : pfloat; const lda : int; B : pfloat; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dgemm ( const enumCBLAS_ORDER Order , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_TRANSPOSE TransB , const int M , const int N , const int K , const double alpha , const double * A , const int lda , const double * B , const int ldb , const double beta , double * C , const int ldc );
procedure cblas_dgemm( const Order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const TransB : enumCBLAS_TRANSPOSE; const M : int; const N : int; const K : int; const alpha : double; const A : pdouble; const lda : int; const B : pdouble; const ldb : int; const beta : double; C : pdouble; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsymm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const double alpha , const double * A , const int lda , const double * B , const int ldb , const double beta , double * C , const int ldc );
procedure cblas_dsymm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : double; const A : pdouble; const lda : int; const B : pdouble; const ldb : int; const beta : double; C : pdouble; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsyrk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const double alpha , const double * A , const int lda , const double beta , double * C , const int ldc );
procedure cblas_dsyrk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : double; const A : pdouble; const lda : int; const beta : double; C : pdouble; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dsyr2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const double alpha , const double * A , const int lda , const double * B , const int ldb , const double beta , double * C , const int ldc );
procedure cblas_dsyr2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : double; const A : pdouble; const lda : int; const B : pdouble; const ldb : int; const beta : double; C : pdouble; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtrmm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const double alpha , const double * A , const int lda , double * B , const int ldb );
procedure cblas_dtrmm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : double; const A : pdouble; const lda : int; B : pdouble; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_dtrsm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const double alpha , const double * A , const int lda , double * B , const int ldb );
procedure cblas_dtrsm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : double; const A : pdouble; const lda : int; B : pdouble; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cgemm ( const enumCBLAS_ORDER Order , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_TRANSPOSE TransB , const int M , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_cgemm( const Order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const TransB : enumCBLAS_TRANSPOSE; const M : int; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_csymm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_csymm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_csyrk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * beta , void * C , const int ldc );
procedure cblas_csyrk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_csyr2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_csyr2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctrmm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const void * alpha , const void * A , const int lda , void * B , const int ldb );
procedure cblas_ctrmm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; B : pvoid; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ctrsm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const void * alpha , const void * A , const int lda , void * B , const int ldb );
procedure cblas_ctrsm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; B : pvoid; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zgemm ( const enumCBLAS_ORDER Order , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_TRANSPOSE TransB , const int M , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_zgemm( const Order : enumCBLAS_ORDER; const TransA : enumCBLAS_TRANSPOSE; const TransB : enumCBLAS_TRANSPOSE; const M : int; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zsymm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_zsymm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zsyrk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * beta , void * C , const int ldc );
procedure cblas_zsyrk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zsyr2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_zsyr2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztrmm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const void * alpha , const void * A , const int lda , void * B , const int ldb );
procedure cblas_ztrmm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; B : pvoid; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_ztrsm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE TransA , const enumCBLAS_DIAG Diag , const int M , const int N , const void * alpha , const void * A , const int lda , void * B , const int ldb );
procedure cblas_ztrsm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const TransA : enumCBLAS_TRANSPOSE; const Diag : enumCBLAS_DIAG; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; B : pvoid; const ldb : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_chemm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_chemm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cherk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const float alpha , const void * A , const int lda , const float beta , void * C , const int ldc );
procedure cblas_cherk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : float; const A : pvoid; const lda : int; const beta : float; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_cher2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const float beta , void * C , const int ldc );
procedure cblas_cher2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : float; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zhemm ( const enumCBLAS_ORDER Order , const enumCBLAS_SIDE Side , const enumCBLAS_UPLO Uplo , const int M , const int N , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const void * beta , void * C , const int ldc );
procedure cblas_zhemm( const Order : enumCBLAS_ORDER; const Side : enumCBLAS_SIDE; const Uplo : enumCBLAS_UPLO; const M : int; const N : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : pvoid; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zherk ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const double alpha , const void * A , const int lda , const double beta , void * C , const int ldc );
procedure cblas_zherk( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : double; const A : pvoid; const lda : int; const beta : double; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_zher2k ( const enumCBLAS_ORDER Order , const enumCBLAS_UPLO Uplo , const enumCBLAS_TRANSPOSE Trans , const int N , const int K , const void * alpha , const void * A , const int lda , const void * B , const int ldb , const double beta , void * C , const int ldc );
procedure cblas_zher2k( const Order : enumCBLAS_ORDER; const Uplo : enumCBLAS_UPLO; const Trans : enumCBLAS_TRANSPOSE; const N : int; const K : int; const alpha : pvoid; const A : pvoid; const lda : int; const B : pvoid; const ldb : int; const beta : double; C : pvoid; const ldc : int ); cdecl; external cblas_dll;
//GSL_EXPORT void cblas_xerbla ( int p , const char * rout , const char * form , . . . );

//OpenArray of Pascal
procedure cblas_xerbla( p : int; const rout : pchar; const form : pchar; args : array of const ); cdecl; external cblas_dll;

//gsl_cdf.h
//GSL_EXPORT double gsl_cdf_ugaussian_P ( const double x );
function gsl_cdf_ugaussian_P( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_ugaussian_Q ( const double x );
function gsl_cdf_ugaussian_Q( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_ugaussian_Pinv ( const double P );
function gsl_cdf_ugaussian_Pinv( const P : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_ugaussian_Qinv ( const double Q );
function gsl_cdf_ugaussian_Qinv( const Q : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gaussian_P ( const double x , const double sigma );
function gsl_cdf_gaussian_P( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gaussian_Q ( const double x , const double sigma );
function gsl_cdf_gaussian_Q( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gaussian_Pinv ( const double P , const double sigma );
function gsl_cdf_gaussian_Pinv( const P : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gaussian_Qinv ( const double Q , const double sigma );
function gsl_cdf_gaussian_Qinv( const Q : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gamma_P ( const double x , const double a , const double b );
function gsl_cdf_gamma_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gamma_Q ( const double x , const double a , const double b );
function gsl_cdf_gamma_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gamma_Pinv ( const double P , const double a , const double b );
function gsl_cdf_gamma_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gamma_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_gamma_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_cauchy_P ( const double x , const double a );
function gsl_cdf_cauchy_P( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_cauchy_Q ( const double x , const double a );
function gsl_cdf_cauchy_Q( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_cauchy_Pinv ( const double P , const double a );
function gsl_cdf_cauchy_Pinv( const P : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_cauchy_Qinv ( const double Q , const double a );
function gsl_cdf_cauchy_Qinv( const Q : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_laplace_P ( const double x , const double a );
function gsl_cdf_laplace_P( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_laplace_Q ( const double x , const double a );
function gsl_cdf_laplace_Q( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_laplace_Pinv ( const double P , const double a );
function gsl_cdf_laplace_Pinv( const P : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_laplace_Qinv ( const double Q , const double a );
function gsl_cdf_laplace_Qinv( const Q : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_rayleigh_P ( const double x , const double sigma );
function gsl_cdf_rayleigh_P( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_rayleigh_Q ( const double x , const double sigma );
function gsl_cdf_rayleigh_Q( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_rayleigh_Pinv ( const double P , const double sigma );
function gsl_cdf_rayleigh_Pinv( const P : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_rayleigh_Qinv ( const double Q , const double sigma );
function gsl_cdf_rayleigh_Qinv( const Q : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_chisq_P ( const double x , const double nu );
function gsl_cdf_chisq_P( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_chisq_Q ( const double x , const double nu );
function gsl_cdf_chisq_Q( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_chisq_Pinv ( const double P , const double nu );
function gsl_cdf_chisq_Pinv( const P : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_chisq_Qinv ( const double Q , const double nu );
function gsl_cdf_chisq_Qinv( const Q : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exponential_P ( const double x , const double mu );
function gsl_cdf_exponential_P( const x : double; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exponential_Q ( const double x , const double mu );
function gsl_cdf_exponential_Q( const x : double; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exponential_Pinv ( const double P , const double mu );
function gsl_cdf_exponential_Pinv( const P : double; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exponential_Qinv ( const double Q , const double mu );
function gsl_cdf_exponential_Qinv( const Q : double; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exppow_P ( const double x , const double a , const double b );
function gsl_cdf_exppow_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_exppow_Q ( const double x , const double a , const double b );
function gsl_cdf_exppow_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_tdist_P ( const double x , const double nu );
function gsl_cdf_tdist_P( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_tdist_Q ( const double x , const double nu );
function gsl_cdf_tdist_Q( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_tdist_Pinv ( const double P , const double nu );
function gsl_cdf_tdist_Pinv( const P : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_tdist_Qinv ( const double Q , const double nu );
function gsl_cdf_tdist_Qinv( const Q : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_fdist_P ( const double x , const double nu1 , const double nu2 );
function gsl_cdf_fdist_P( const x : double; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_fdist_Q ( const double x , const double nu1 , const double nu2 );
function gsl_cdf_fdist_Q( const x : double; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_fdist_Pinv ( const double P , const double nu1 , const double nu2 );
function gsl_cdf_fdist_Pinv( const P : double; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_fdist_Qinv ( const double Q , const double nu1 , const double nu2 );
function gsl_cdf_fdist_Qinv( const Q : double; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_beta_P ( const double x , const double a , const double b );
function gsl_cdf_beta_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_beta_Q ( const double x , const double a , const double b );
function gsl_cdf_beta_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_beta_Pinv ( const double P , const double a , const double b );
function gsl_cdf_beta_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_beta_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_beta_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_flat_P ( const double x , const double a , const double b );
function gsl_cdf_flat_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_flat_Q ( const double x , const double a , const double b );
function gsl_cdf_flat_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_flat_Pinv ( const double P , const double a , const double b );
function gsl_cdf_flat_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_flat_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_flat_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_lognormal_P ( const double x , const double zeta , const double sigma );
function gsl_cdf_lognormal_P( const x : double; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_lognormal_Q ( const double x , const double zeta , const double sigma );
function gsl_cdf_lognormal_Q( const x : double; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_lognormal_Pinv ( const double P , const double zeta , const double sigma );
function gsl_cdf_lognormal_Pinv( const P : double; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_lognormal_Qinv ( const double Q , const double zeta , const double sigma );
function gsl_cdf_lognormal_Qinv( const Q : double; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel1_P ( const double x , const double a , const double b );
function gsl_cdf_gumbel1_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel1_Q ( const double x , const double a , const double b );
function gsl_cdf_gumbel1_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel1_Pinv ( const double P , const double a , const double b );
function gsl_cdf_gumbel1_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel1_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_gumbel1_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel2_P ( const double x , const double a , const double b );
function gsl_cdf_gumbel2_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel2_Q ( const double x , const double a , const double b );
function gsl_cdf_gumbel2_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel2_Pinv ( const double P , const double a , const double b );
function gsl_cdf_gumbel2_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_gumbel2_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_gumbel2_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_weibull_P ( const double x , const double a , const double b );
function gsl_cdf_weibull_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_weibull_Q ( const double x , const double a , const double b );
function gsl_cdf_weibull_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_weibull_Pinv ( const double P , const double a , const double b );
function gsl_cdf_weibull_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_weibull_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_weibull_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pareto_P ( const double x , const double a , const double b );
function gsl_cdf_pareto_P( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pareto_Q ( const double x , const double a , const double b );
function gsl_cdf_pareto_Q( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pareto_Pinv ( const double P , const double a , const double b );
function gsl_cdf_pareto_Pinv( const P : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pareto_Qinv ( const double Q , const double a , const double b );
function gsl_cdf_pareto_Qinv( const Q : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_logistic_P ( const double x , const double a );
function gsl_cdf_logistic_P( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_logistic_Q ( const double x , const double a );
function gsl_cdf_logistic_Q( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_logistic_Pinv ( const double P , const double a );
function gsl_cdf_logistic_Pinv( const P : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_logistic_Qinv ( const double Q , const double a );
function gsl_cdf_logistic_Qinv( const Q : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_binomial_P ( const unsigned int k , const double p , const unsigned int n );
function gsl_cdf_binomial_P( const k : unsignedint; const p : double; const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_binomial_Q ( const unsignedint k , const double p , const unsignedint n );
function gsl_cdf_binomial_Q( const k : unsignedint; const p : double; const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_poisson_P ( const unsignedint k , const double mu );
function gsl_cdf_poisson_P( const k : unsignedint; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_poisson_Q ( const unsignedint k , const double mu );
function gsl_cdf_poisson_Q( const k : unsignedint; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_geometric_P ( const unsignedint k , const double p );
function gsl_cdf_geometric_P( const k : unsignedint; const p : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_geometric_Q ( const unsignedint k , const double p );
function gsl_cdf_geometric_Q( const k : unsignedint; const p : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_negative_binomial_P ( const unsignedint k , const double p , const double n );
function gsl_cdf_negative_binomial_P( const k : unsignedint; const p : double; const n : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_negative_binomial_Q ( const unsignedint k , const double p , const double n );
function gsl_cdf_negative_binomial_Q( const k : unsignedint; const p : double; const n : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pascal_P ( const unsignedint k , const double p , const unsignedint n );
function gsl_cdf_pascal_P( const k : unsignedint; const p : double; const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_pascal_Q ( const unsignedint k , const double p , const unsignedint n );
function gsl_cdf_pascal_Q( const k : unsignedint; const p : double; const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_hypergeometric_P ( const unsignedint k , const unsignedint n1 , const unsignedint n2 , const unsignedint t );
function gsl_cdf_hypergeometric_P( const k : unsignedint; const n1 : unsignedint; const n2 : unsignedint; const t : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cdf_hypergeometric_Q ( const unsignedint k , const unsignedint n1 , const unsignedint n2 , const unsignedint t );
function gsl_cdf_hypergeometric_Q( const k : unsignedint; const n1 : unsignedint; const n2 : unsignedint; const t : unsignedint ) : double; cdecl; external gsl_dll;

//gsl_chebyshev.h
//GSL_EXPORT gsl_cheb_series * gsl_cheb_alloc ( const size_t order );
function gsl_cheb_alloc( const order : size_t ) : pgsl_cheb_series; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_cheb_free ( gsl_cheb_series * cs );
procedure gsl_cheb_free( cs : pgsl_cheb_series ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_init ( gsl_cheb_series * cs , const gsl_function * func , const double a , const double b );
function gsl_cheb_init( cs : pgsl_cheb_series; const func : pgsl_function; const a : double; const b : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cheb_eval ( const gsl_cheb_series * cs , const double x );
function gsl_cheb_eval( const cs : pgsl_cheb_series; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_eval_err ( const gsl_cheb_series * cs , const double x , double * result , double * abserr );
function gsl_cheb_eval_err( const cs : pgsl_cheb_series; const x : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cheb_eval_n ( const gsl_cheb_series * cs , const size_t order , const double x );
function gsl_cheb_eval_n( const cs : pgsl_cheb_series; const order : size_t; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_eval_n_err ( const gsl_cheb_series * cs , const size_t order , const double x , double * result , double * abserr );
function gsl_cheb_eval_n_err( const cs : pgsl_cheb_series; const order : size_t; const x : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_cheb_eval_mode ( const gsl_cheb_series * cs , const double x , gsl_mode_t mode );
function gsl_cheb_eval_mode( const cs : pgsl_cheb_series; const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_eval_mode_e ( const gsl_cheb_series * cs , const double x , gsl_mode_t mode , double * result , double * abserr );
function gsl_cheb_eval_mode_e( const cs : pgsl_cheb_series; const x : double; mode : gsl_mode_t; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_calc_deriv ( gsl_cheb_series * deriv , const gsl_cheb_series * cs );
function gsl_cheb_calc_deriv( deriv : pgsl_cheb_series; const cs : pgsl_cheb_series ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_cheb_calc_integ ( gsl_cheb_series * integ , const gsl_cheb_series * cs );
function gsl_cheb_calc_integ( integ : pgsl_cheb_series; const cs : pgsl_cheb_series ) : int; cdecl; external gsl_dll;

//gsl_check_range.h

//gsl_combination.h
//GSL_EXPORT gsl_combination * gsl_combination_alloc ( const size_t n , const size_t k );
function gsl_combination_alloc( const n : size_t; const k : size_t ) : pgsl_combination; cdecl; external gsl_dll;
//GSL_EXPORT gsl_combination * gsl_combination_calloc ( const size_t n , const size_t k );
function gsl_combination_calloc( const n : size_t; const k : size_t ) : pgsl_combination; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_combination_init_first ( gsl_combination * c );
procedure gsl_combination_init_first( c : pgsl_combination ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_combination_init_last ( gsl_combination * c );
procedure gsl_combination_init_last( c : pgsl_combination ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_combination_free ( gsl_combination * c );
procedure gsl_combination_free( c : pgsl_combination ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_memcpy ( gsl_combination * dest , const gsl_combination * src );
function gsl_combination_memcpy( dest : pgsl_combination; const src : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_fread ( FILE * stream , gsl_combination * c );
function gsl_combination_fread( stream : pFILE; c : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_fwrite ( FILE * stream , const gsl_combination * c );
function gsl_combination_fwrite( stream : pFILE; const c : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_fscanf ( FILE * stream , gsl_combination * c );
function gsl_combination_fscanf( stream : pFILE; c : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_fprintf ( FILE * stream , const gsl_combination * c , const char * format );
function gsl_combination_fprintf( stream : pFILE; const c : pgsl_combination; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_combination_n ( const gsl_combination * c );
function gsl_combination_n( const c : pgsl_combination ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_combination_k ( const gsl_combination * c );
function gsl_combination_k( const c : pgsl_combination ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t * gsl_combination_data ( const gsl_combination * c );
function gsl_combination_data( const c : pgsl_combination ) : psize_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_combination_get ( const gsl_combination * c , const size_t i );
function gsl_combination_get( const c : pgsl_combination; const i : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_valid ( gsl_combination * c );
function gsl_combination_valid( c : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_next ( gsl_combination * c );
function gsl_combination_next( c : pgsl_combination ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_combination_prev ( gsl_combination * c );
function gsl_combination_prev( c : pgsl_combination ) : int; cdecl; external gsl_dll;

//gsl_complex.h

//gsl_complex_math.h
//GSL_EXPORT gsl_complex gsl_complex_rect ( double x , double y );
function gsl_complex_rect( x : double; y : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_polar ( double r , double theta );
function gsl_complex_polar( r : double; theta : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_complex_arg ( gsl_complex z );
function gsl_complex_arg( z : gsl_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_complex_abs ( gsl_complex z );
function gsl_complex_abs( z : gsl_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_complex_abs2 ( gsl_complex z );
function gsl_complex_abs2( z : gsl_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_complex_logabs ( gsl_complex z );
function gsl_complex_logabs( z : gsl_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_add ( gsl_complex a , gsl_complex b );
function gsl_complex_add( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sub ( gsl_complex a , gsl_complex b );
function gsl_complex_sub( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_mul ( gsl_complex a , gsl_complex b );
function gsl_complex_mul( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_div ( gsl_complex a , gsl_complex b );
function gsl_complex_div( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_add_real ( gsl_complex a , double x );
function gsl_complex_add_real( a : gsl_complex; x : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sub_real ( gsl_complex a , double x );
function gsl_complex_sub_real( a : gsl_complex; x : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_mul_real ( gsl_complex a , double x );
function gsl_complex_mul_real( a : gsl_complex; x : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_div_real ( gsl_complex a , double x );
function gsl_complex_div_real( a : gsl_complex; x : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_add_imag ( gsl_complex a , double y );
function gsl_complex_add_imag( a : gsl_complex; y : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sub_imag ( gsl_complex a , double y );
function gsl_complex_sub_imag( a : gsl_complex; y : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_mul_imag ( gsl_complex a , double y );
function gsl_complex_mul_imag( a : gsl_complex; y : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_div_imag ( gsl_complex a , double y );
function gsl_complex_div_imag( a : gsl_complex; y : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_conjugate ( gsl_complex z );
function gsl_complex_conjugate( z : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_inverse ( gsl_complex a );
function gsl_complex_inverse( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_negative ( gsl_complex a );
function gsl_complex_negative( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sqrt ( gsl_complex z );
function gsl_complex_sqrt( z : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sqrt_real ( double x );
function gsl_complex_sqrt_real( x : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_pow ( gsl_complex a , gsl_complex b );
function gsl_complex_pow( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_pow_real ( gsl_complex a , double b );
function gsl_complex_pow_real( a : gsl_complex; b : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_exp ( gsl_complex a );
function gsl_complex_exp( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_log ( gsl_complex a );
function gsl_complex_log( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_log10 ( gsl_complex a );
function gsl_complex_log10( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_log_b ( gsl_complex a , gsl_complex b );
function gsl_complex_log_b( a : gsl_complex; b : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sin ( gsl_complex a );
function gsl_complex_sin( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_cos ( gsl_complex a );
function gsl_complex_cos( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sec ( gsl_complex a );
function gsl_complex_sec( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_csc ( gsl_complex a );
function gsl_complex_csc( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_tan ( gsl_complex a );
function gsl_complex_tan( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_cot ( gsl_complex a );
function gsl_complex_cot( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsin ( gsl_complex a );
function gsl_complex_arcsin( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsin_real ( double a );
function gsl_complex_arcsin_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccos ( gsl_complex a );
function gsl_complex_arccos( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccos_real ( double a );
function gsl_complex_arccos_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsec ( gsl_complex a );
function gsl_complex_arcsec( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsec_real ( double a );
function gsl_complex_arcsec_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccsc ( gsl_complex a );
function gsl_complex_arccsc( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccsc_real ( double a );
function gsl_complex_arccsc_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arctan ( gsl_complex a );
function gsl_complex_arctan( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccot ( gsl_complex a );
function gsl_complex_arccot( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sinh ( gsl_complex a );
function gsl_complex_sinh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_cosh ( gsl_complex a );
function gsl_complex_cosh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_sech ( gsl_complex a );
function gsl_complex_sech( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_csch ( gsl_complex a );
function gsl_complex_csch( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_tanh ( gsl_complex a );
function gsl_complex_tanh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_coth ( gsl_complex a );
function gsl_complex_coth( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsinh ( gsl_complex a );
function gsl_complex_arcsinh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccosh ( gsl_complex a );
function gsl_complex_arccosh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccosh_real ( double a );
function gsl_complex_arccosh_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arcsech ( gsl_complex a );
function gsl_complex_arcsech( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccsch ( gsl_complex a );
function gsl_complex_arccsch( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arctanh ( gsl_complex a );
function gsl_complex_arctanh( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arctanh_real ( double a );
function gsl_complex_arctanh_real( a : double ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_complex_arccoth ( gsl_complex a );
function gsl_complex_arccoth( a : gsl_complex ) : gsl_complex; cdecl; external gsl_dll;

//gsl_const.h

//gsl_const_cgs.h

//gsl_const_cgsm.h

//gsl_const_mks.h

//gsl_const_mksa.h

//gsl_const_num.h

//gsl_deriv.h
//GSL_EXPORT int gsl_deriv_central ( const gsl_function * f , double x , double h , double * result , double * abserr );
function gsl_deriv_central( const f : pgsl_function; x : double; h : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_deriv_backward ( const gsl_function * f , double x , double h , double * result , double * abserr );
function gsl_deriv_backward( const f : pgsl_function; x : double; h : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_deriv_forward ( const gsl_function * f , double x , double h , double * result , double * abserr );
function gsl_deriv_forward( const f : pgsl_function; x : double; h : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;

//gsl_dft_complex.h
//GSL_EXPORT int gsl_dft_complex_forward ( const double data [ ] , const size_t stride , const size_t n , double result [ ] );
function gsl_dft_complex_forward( const data : array of  double; const stride : size_t; const n : size_t; result : array of   double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_backward ( const double data [ ] , const size_t stride , const size_t n , double result [ ] );
function gsl_dft_complex_backward( const data : array of  double; const stride : size_t; const n : size_t; result : array of   double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_inverse ( const double data [ ] , const size_t stride , const size_t n , double result [ ] );
function gsl_dft_complex_inverse( const data : array of  double; const stride : size_t; const n : size_t; result : array of   double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_transform ( const double data [ ] , const size_t stride , const size_t n , double result [ ] , const gsl_fft_direction sign );
function gsl_dft_complex_transform( const data : array of  double; const stride : size_t; const n : size_t; result : array of   double; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;

//gsl_dft_complex_float.h
//GSL_EXPORT int gsl_dft_complex_float_forward ( const float data [ ] , const size_t stride , const size_t n , float result [ ] );
function gsl_dft_complex_float_forward( const data : array of  float; const stride : size_t; const n : size_t; result : array of   float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_float_backward ( const float data [ ] , const size_t stride , const size_t n , float result [ ] );
function gsl_dft_complex_float_backward( const data : array of  float; const stride : size_t; const n : size_t; result : array of   float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_float_inverse ( const float data [ ] , const size_t stride , const size_t n , float result [ ] );
function gsl_dft_complex_float_inverse( const data : array of  float; const stride : size_t; const n : size_t; result : array of   float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dft_complex_float_transform ( const float data [ ] , const size_t stride , const size_t n , float result [ ] , const gsl_fft_direction sign );
function gsl_dft_complex_float_transform( const data : array of  float; const stride : size_t; const n : size_t; result : array of   float; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;

//gsl_dht.h
//GSL_EXPORT gsl_dht * gsl_dht_alloc ( size_t size );
function gsl_dht_alloc( size : size_t ) : pgsl_dht; cdecl; external gsl_dll;
//GSL_EXPORT gsl_dht * gsl_dht_new ( size_t size , double nu , double xmax );
function gsl_dht_new( size : size_t; nu : double; xmax : double ) : pgsl_dht; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dht_init ( gsl_dht * t , double nu , double xmax );
function gsl_dht_init( t : pgsl_dht; nu : double; xmax : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_dht_x_sample ( const gsl_dht * t , int n );
function gsl_dht_x_sample( const t : pgsl_dht; n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_dht_k_sample ( const gsl_dht * t , int n );
function gsl_dht_k_sample( const t : pgsl_dht; n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_dht_free ( gsl_dht * t );
procedure gsl_dht_free( t : pgsl_dht ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_dht_apply ( const gsl_dht * t , double * f_in , double * f_out );
function gsl_dht_apply( const t : pgsl_dht; f_in : pdouble; f_out : pdouble ) : int; cdecl; external gsl_dll;

//gsl_diff.h
//GSL_EXPORT int gsl_diff_central ( const gsl_function * f , double x , double * result , double * abserr );
function gsl_diff_central( const f : pgsl_function; x : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_diff_backward ( const gsl_function * f , double x , double * result , double * abserr );
function gsl_diff_backward( const f : pgsl_function; x : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_diff_forward ( const gsl_function * f , double x , double * result , double * abserr );
function gsl_diff_forward( const f : pgsl_function; x : double; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;

//gsl_eigen.h
//GSL_EXPORT gsl_eigen_symm_workspace * gsl_eigen_symm_alloc ( const size_t n );
function gsl_eigen_symm_alloc( const n : size_t ) : pgsl_eigen_symm_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_eigen_symm_free ( gsl_eigen_symm_workspace * w );
procedure gsl_eigen_symm_free( w : pgsl_eigen_symm_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_symm ( gsl_matrix * A , gsl_vector * eval , gsl_eigen_symm_workspace * w );
function gsl_eigen_symm( A : pgsl_matrix; eval : pgsl_vector; w : pgsl_eigen_symm_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_eigen_symmv_workspace * gsl_eigen_symmv_alloc ( const size_t n );
function gsl_eigen_symmv_alloc( const n : size_t ) : pgsl_eigen_symmv_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_eigen_symmv_free ( gsl_eigen_symmv_workspace * w );
procedure gsl_eigen_symmv_free( w : pgsl_eigen_symmv_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_symmv ( gsl_matrix * A , gsl_vector * eval , gsl_matrix * evec , gsl_eigen_symmv_workspace * w );
function gsl_eigen_symmv( A : pgsl_matrix; eval : pgsl_vector; evec : pgsl_matrix; w : pgsl_eigen_symmv_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_eigen_herm_workspace * gsl_eigen_herm_alloc ( const size_t n );
function gsl_eigen_herm_alloc( const n : size_t ) : pgsl_eigen_herm_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_eigen_herm_free ( gsl_eigen_herm_workspace * w );
procedure gsl_eigen_herm_free( w : pgsl_eigen_herm_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_herm ( gsl_matrix_complex * A , gsl_vector * eval , gsl_eigen_herm_workspace * w );
function gsl_eigen_herm( A : pgsl_matrix_complex; eval : pgsl_vector; w : pgsl_eigen_herm_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_eigen_hermv_workspace * gsl_eigen_hermv_alloc ( const size_t n );
function gsl_eigen_hermv_alloc( const n : size_t ) : pgsl_eigen_hermv_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_eigen_hermv_free ( gsl_eigen_hermv_workspace * w );
procedure gsl_eigen_hermv_free( w : pgsl_eigen_hermv_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_hermv ( gsl_matrix_complex * A , gsl_vector * eval , gsl_matrix_complex * evec , gsl_eigen_hermv_workspace * w );
function gsl_eigen_hermv( A : pgsl_matrix_complex; eval : pgsl_vector; evec : pgsl_matrix_complex; w : pgsl_eigen_hermv_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_symmv_sort ( gsl_vector * eval , gsl_matrix * evec , gsl_eigen_sort_t sort_type );
function gsl_eigen_symmv_sort( eval : pgsl_vector; evec : pgsl_matrix; sort_type : gsl_eigen_sort_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_hermv_sort ( gsl_vector * eval , gsl_matrix_complex * evec , gsl_eigen_sort_t sort_type );
function gsl_eigen_hermv_sort( eval : pgsl_vector; evec : pgsl_matrix_complex; sort_type : gsl_eigen_sort_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_jacobi ( gsl_matrix * matrix , gsl_vector * eval , gsl_matrix * evec , unsignedint max_rot , unsignedint * nrot );
function gsl_eigen_jacobi( matrix : pgsl_matrix; eval : pgsl_vector; evec : pgsl_matrix; max_rot : unsignedint; nrot : punsignedint ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_eigen_invert_jacobi ( const gsl_matrix * matrix , gsl_matrix * ainv , unsignedint max_rot );
function gsl_eigen_invert_jacobi( const matrix : pgsl_matrix; ainv : pgsl_matrix; max_rot : unsignedint ) : int ; cdecl; external gsl_dll;

//gsl_errno.h
//GSL_EXPORT void gsl_error ( const char * reason , const char * file , int line , int gsl_errno );
procedure gsl_error( const reason : pchar; const fileName : pchar; line : int; gsl_errno : int ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stream_printf ( const char * label , const char * file , int line , const char * reason );
procedure gsl_stream_printf( const labelName : pchar; const fileName : pchar; line : int; const reason : pchar ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_strerror ( const int gsl_errno );
function gsl_strerror( const gsl_errno : int ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_error_handler_t * gsl_set_error_handler ( gsl_error_handler_t * new_handler );
function gsl_set_error_handler( new_handler : pgsl_error_handler_t ) : pgsl_error_handler_t ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_error_handler_t * gsl_set_error_handler_off ( void );
function gsl_set_error_handler_off : pgsl_error_handler_t ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_stream_handler_t * gsl_set_stream_handler ( gsl_stream_handler_t * new_handler );
function gsl_set_stream_handler( new_handler : pgsl_stream_handler_t ) : pgsl_stream_handler_t ; cdecl; external gsl_dll;
//GSL_EXPORT FILE * gsl_set_stream ( FILE * new_stream );
function gsl_set_stream( new_stream : pFILE ) : pFILE; cdecl; external gsl_dll;

//gsl_fft.h

//gsl_fft_complex.h
//GSL_EXPORT int gsl_fft_complex_radix2_forward ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_forward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_backward ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_backward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_inverse ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_inverse( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_transform ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_direction sign );
function gsl_fft_complex_radix2_transform( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_dif_forward ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_dif_forward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_dif_backward ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_dif_backward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_dif_inverse ( gsl_complex_packed_array data , const size_t stride , const size_t n );
function gsl_fft_complex_radix2_dif_inverse( data : gsl_complex_packed_array; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_radix2_dif_transform ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_direction sign );
function gsl_fft_complex_radix2_dif_transform( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_complex_wavetable * gsl_fft_complex_wavetable_alloc ( size_t n );
function gsl_fft_complex_wavetable_alloc( n : size_t ) : pgsl_fft_complex_wavetable; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_complex_wavetable_free ( gsl_fft_complex_wavetable * wavetable );
procedure gsl_fft_complex_wavetable_free( wavetable : pgsl_fft_complex_wavetable ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_complex_workspace * gsl_fft_complex_workspace_alloc ( size_t n );
function gsl_fft_complex_workspace_alloc( n : size_t ) : pgsl_fft_complex_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_complex_workspace_free ( gsl_fft_complex_workspace * workspace );
procedure gsl_fft_complex_workspace_free( workspace : pgsl_fft_complex_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_memcpy ( gsl_fft_complex_wavetable * dest , gsl_fft_complex_wavetable * src );
function gsl_fft_complex_memcpy( dest : pgsl_fft_complex_wavetable; src : pgsl_fft_complex_wavetable ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_forward ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable * wavetable , gsl_fft_complex_workspace * work );
function gsl_fft_complex_forward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable; work : pgsl_fft_complex_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_backward ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable * wavetable , gsl_fft_complex_workspace * work );
function gsl_fft_complex_backward( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable; work : pgsl_fft_complex_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_inverse ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable * wavetable , gsl_fft_complex_workspace * work );
function gsl_fft_complex_inverse( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable; work : pgsl_fft_complex_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_transform ( gsl_complex_packed_array data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable * wavetable , gsl_fft_complex_workspace * work , const gsl_fft_direction sign );
function gsl_fft_complex_transform( data : gsl_complex_packed_array; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable; work : pgsl_fft_complex_workspace; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;

//gsl_fft_complex_float.h
//GSL_EXPORT int gsl_fft_complex_float_radix2_forward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_forward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_backward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_backward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_inverse ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_inverse( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_transform ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_direction sign );
function gsl_fft_complex_float_radix2_transform( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_dif_forward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_dif_forward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_dif_backward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_dif_backward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_dif_inverse ( gsl_complex_packed_array_float data , const size_t stride , const size_t n );
function gsl_fft_complex_float_radix2_dif_inverse( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_radix2_dif_transform ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_direction sign );
function gsl_fft_complex_float_radix2_dif_transform( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_complex_wavetable_float * gsl_fft_complex_wavetable_float_alloc ( size_t n );
function gsl_fft_complex_wavetable_float_alloc( n : size_t ) : pgsl_fft_complex_wavetable_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_complex_wavetable_float_free ( gsl_fft_complex_wavetable_float * wavetable );
procedure gsl_fft_complex_wavetable_float_free( wavetable : pgsl_fft_complex_wavetable_float ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_complex_workspace_float * gsl_fft_complex_workspace_float_alloc ( size_t n );
function gsl_fft_complex_workspace_float_alloc( n : size_t ) : pgsl_fft_complex_workspace_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_complex_workspace_float_free ( gsl_fft_complex_workspace_float * workspace );
procedure gsl_fft_complex_workspace_float_free( workspace : pgsl_fft_complex_workspace_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_memcpy ( gsl_fft_complex_wavetable_float * dest , gsl_fft_complex_wavetable_float * src );
function gsl_fft_complex_float_memcpy( dest : pgsl_fft_complex_wavetable_float; src : pgsl_fft_complex_wavetable_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_forward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable_float * wavetable , gsl_fft_complex_workspace_float * work );
function gsl_fft_complex_float_forward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable_float; work : pgsl_fft_complex_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_backward ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable_float * wavetable , gsl_fft_complex_workspace_float * work );
function gsl_fft_complex_float_backward( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable_float; work : pgsl_fft_complex_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_inverse ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable_float * wavetable , gsl_fft_complex_workspace_float * work );
function gsl_fft_complex_float_inverse( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable_float; work : pgsl_fft_complex_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_complex_float_transform ( gsl_complex_packed_array_float data , const size_t stride , const size_t n , const gsl_fft_complex_wavetable_float * wavetable , gsl_fft_complex_workspace_float * work , const gsl_fft_direction sign );
function gsl_fft_complex_float_transform( data : gsl_complex_packed_array_float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_complex_wavetable_float; work : pgsl_fft_complex_workspace_float; const sign : gsl_fft_direction ) : int; cdecl; external gsl_dll;

//gsl_fft_halfcomplex.h
//GSL_EXPORT int gsl_fft_halfcomplex_radix2_backward ( double data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_radix2_backward( data : array of  double; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_radix2_inverse ( double data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_radix2_inverse( data : array of  double; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_radix2_transform ( double data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_radix2_transform( data : array of  double; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_halfcomplex_wavetable * gsl_fft_halfcomplex_wavetable_alloc ( size_t n );
function gsl_fft_halfcomplex_wavetable_alloc( n : size_t ) : pgsl_fft_halfcomplex_wavetable; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_halfcomplex_wavetable_free ( gsl_fft_halfcomplex_wavetable * wavetable );
procedure gsl_fft_halfcomplex_wavetable_free( wavetable : pgsl_fft_halfcomplex_wavetable ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_backward ( double data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable * wavetable , gsl_fft_real_workspace * work );
function gsl_fft_halfcomplex_backward( data : array of  double; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable; work : pgsl_fft_real_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_inverse ( double data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable * wavetable , gsl_fft_real_workspace * work );
function gsl_fft_halfcomplex_inverse( data : array of  double; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable; work : pgsl_fft_real_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_transform ( double data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable * wavetable , gsl_fft_real_workspace * work );
function gsl_fft_halfcomplex_transform( data : array of  double; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable; work : pgsl_fft_real_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_unpack ( const double halfcomplex_coefficient [ ] , double complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_unpack( const halfcomplex_coefficient : array of  double; complex_coefficient : array of   double; const stride : size_t; const n : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_radix2_unpack ( const double halfcomplex_coefficient [ ] , double complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_radix2_unpack( const halfcomplex_coefficient : array of  double; complex_coefficient : array of   double; const stride : size_t; const n : size_t ) : int ; cdecl; external gsl_dll;

//gsl_fft_halfcomplex_float.h
//GSL_EXPORT int gsl_fft_halfcomplex_float_radix2_backward ( float data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_float_radix2_backward( data : array of  float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_radix2_inverse ( float data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_float_radix2_inverse( data : array of  float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_radix2_transform ( float data [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_float_radix2_transform( data : array of  float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_halfcomplex_wavetable_float * gsl_fft_halfcomplex_wavetable_float_alloc ( size_t n );
function gsl_fft_halfcomplex_wavetable_float_alloc( n : size_t ) : pgsl_fft_halfcomplex_wavetable_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_halfcomplex_wavetable_float_free ( gsl_fft_halfcomplex_wavetable_float * wavetable );
procedure gsl_fft_halfcomplex_wavetable_float_free( wavetable : pgsl_fft_halfcomplex_wavetable_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_backward ( float data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable_float * wavetable , gsl_fft_real_workspace_float * work );
function gsl_fft_halfcomplex_float_backward( data : array of  float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable_float; work : pgsl_fft_real_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_inverse ( float data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable_float * wavetable , gsl_fft_real_workspace_float * work );
function gsl_fft_halfcomplex_float_inverse( data : array of  float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable_float; work : pgsl_fft_real_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_transform ( float data [ ] , const size_t stride , const size_t n , const gsl_fft_halfcomplex_wavetable_float * wavetable , gsl_fft_real_workspace_float * work );
function gsl_fft_halfcomplex_float_transform( data : array of  float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_halfcomplex_wavetable_float; work : pgsl_fft_real_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_unpack ( const float halfcomplex_coefficient [ ] , float complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_float_unpack( const halfcomplex_coefficient : array of  float; complex_coefficient : array of   float; const stride : size_t; const n : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_halfcomplex_float_radix2_unpack ( const float halfcomplex_coefficient [ ] , float complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_halfcomplex_float_radix2_unpack( const halfcomplex_coefficient : array of  float; complex_coefficient : array of   float; const stride : size_t; const n : size_t ) : int ; cdecl; external gsl_dll;

//gsl_fft_real.h
//GSL_EXPORT int gsl_fft_real_radix2_transform ( double data [ ] , const size_t stride , const size_t n );
function gsl_fft_real_radix2_transform( data : array of  double; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_real_wavetable * gsl_fft_real_wavetable_alloc ( size_t n );
function gsl_fft_real_wavetable_alloc( n : size_t ) : pgsl_fft_real_wavetable; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_real_wavetable_free ( gsl_fft_real_wavetable * wavetable );
procedure gsl_fft_real_wavetable_free( wavetable : pgsl_fft_real_wavetable ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_real_workspace * gsl_fft_real_workspace_alloc ( size_t n );
function gsl_fft_real_workspace_alloc( n : size_t ) : pgsl_fft_real_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_real_workspace_free ( gsl_fft_real_workspace * workspace );
procedure gsl_fft_real_workspace_free( workspace : pgsl_fft_real_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_real_transform ( double data [ ] , const size_t stride , const size_t n , const gsl_fft_real_wavetable * wavetable , gsl_fft_real_workspace * work );
function gsl_fft_real_transform( data : array of  double; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_real_wavetable; work : pgsl_fft_real_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_real_unpack ( const double real_coefficient [ ] , double complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_real_unpack( const real_coefficient : array of  double; complex_coefficient : array of   double; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_fft_real_float.h
//GSL_EXPORT int gsl_fft_real_float_radix2_transform ( float data [ ] , const size_t stride , const size_t n );
function gsl_fft_real_float_radix2_transform( data : array of  float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_real_wavetable_float * gsl_fft_real_wavetable_float_alloc ( size_t n );
function gsl_fft_real_wavetable_float_alloc( n : size_t ) : pgsl_fft_real_wavetable_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_real_wavetable_float_free ( gsl_fft_real_wavetable_float * wavetable );
procedure gsl_fft_real_wavetable_float_free( wavetable : pgsl_fft_real_wavetable_float ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_fft_real_workspace_float * gsl_fft_real_workspace_float_alloc ( size_t n );
function gsl_fft_real_workspace_float_alloc( n : size_t ) : pgsl_fft_real_workspace_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_fft_real_workspace_float_free ( gsl_fft_real_workspace_float * workspace );
procedure gsl_fft_real_workspace_float_free( workspace : pgsl_fft_real_workspace_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_real_float_transform ( float data [ ] , const size_t stride , const size_t n , const gsl_fft_real_wavetable_float * wavetable , gsl_fft_real_workspace_float * work );
function gsl_fft_real_float_transform( data : array of  float; const stride : size_t; const n : size_t; const wavetable : pgsl_fft_real_wavetable_float; work : pgsl_fft_real_workspace_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fft_real_float_unpack ( const float real_float_coefficient [ ] , float complex_coefficient [ ] , const size_t stride , const size_t n );
function gsl_fft_real_float_unpack( const real_float_coefficient : array of  float; complex_coefficient : array of   float; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_fit.h
//GSL_EXPORT int gsl_fit_linear ( const double * x , const size_t xstride , const double * y , const size_t ystride , const size_t n , double * c0 , double * c1 , double * cov00 , double * cov01 , double * cov11 , double * sumsq );
function gsl_fit_linear( const x : pdouble; const xstride : size_t; const y : pdouble; const ystride : size_t; const n : size_t; c0 : pdouble; c1 : pdouble; cov00 : pdouble; cov01 : pdouble; cov11 : pdouble; sumsq : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fit_wlinear ( const double * x , const size_t xstride , const double * w , const size_t wstride , const double * y , const size_t ystride , const size_t n , double * c0 , double * c1 , double * cov00 , double * cov01 , double * cov11 , double * chisq );
function gsl_fit_wlinear( const x : pdouble; const xstride : size_t; const w : pdouble; const wstride : size_t; const y : pdouble; const ystride : size_t; const n : size_t; c0 : pdouble; c1 : pdouble; cov00 : pdouble; cov01 : pdouble; cov11 : pdouble; chisq : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fit_linear_est ( const double x , const double c0 , const double c1 , const double c00 , const double c01 , const double c11 , double * y , double * y_err );
function gsl_fit_linear_est( const x : double; const c0 : double; const c1 : double; const c00 : double; const c01 : double; const c11 : double; y : pdouble; y_err : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fit_mul ( const double * x , const size_t xstride , const double * y , const size_t ystride , const size_t n , double * c1 , double * cov11 , double * sumsq );
function gsl_fit_mul( const x : pdouble; const xstride : size_t; const y : pdouble; const ystride : size_t; const n : size_t; c1 : pdouble; cov11 : pdouble; sumsq : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fit_wmul ( const double * x , const size_t xstride , const double * w , const size_t wstride , const double * y , const size_t ystride , const size_t n , double * c1 , double * cov11 , double * sumsq );
function gsl_fit_wmul( const x : pdouble; const xstride : size_t; const w : pdouble; const wstride : size_t; const y : pdouble; const ystride : size_t; const n : size_t; c1 : pdouble; cov11 : pdouble; sumsq : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fit_mul_est ( const double x , const double c1 , const double c11 , double * y , double * y_err );
function gsl_fit_mul_est( const x : double; const c1 : double; const c11 : double; y : pdouble; y_err : pdouble ) : int ; cdecl; external gsl_dll;

//gsl_heapsort.h
//GSL_EXPORT void gsl_heapsort ( void * array , size_t count , size_t size , gsl_comparison_fn_t compare );
procedure gsl_heapsort( arrays : pvoid; count : size_t; size : size_t; compare : gsl_comparison_fn_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_heapsort_index ( size_t * p , const void * array , size_t count , size_t size , gsl_comparison_fn_t compare );
function gsl_heapsort_index( p : psize_t; const arrays : pvoid; count : size_t; size : size_t; compare : gsl_comparison_fn_t ) : int; cdecl; external gsl_dll;

//gsl_histogram2d.h
//GSL_EXPORT gsl_histogram2d * gsl_histogram2d_alloc ( const size_t nx , const size_t ny );
function gsl_histogram2d_alloc( const nx : size_t; const ny : size_t ) : pgsl_histogram2d; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram2d * gsl_histogram2d_calloc ( const size_t nx , const size_t ny );
function gsl_histogram2d_calloc( const nx : size_t; const ny : size_t ) : pgsl_histogram2d; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram2d * gsl_histogram2d_calloc_uniform ( const size_t nx , const size_t ny , const double xmin , const double xmax , const double ymin , const double ymax );
function gsl_histogram2d_calloc_uniform( const nx : size_t; const ny : size_t; const xmin : double; const xmax : double; const ymin : double; const ymax : double ) : pgsl_histogram2d; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram2d_free ( gsl_histogram2d * h );
procedure gsl_histogram2d_free( h : pgsl_histogram2d ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_increment ( gsl_histogram2d * h , double x , double y );
function gsl_histogram2d_increment( h : pgsl_histogram2d; x : double; y : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_accumulate ( gsl_histogram2d * h , double x , double y , double weight );
function gsl_histogram2d_accumulate( h : pgsl_histogram2d; x : double; y : double; weight : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_find ( const gsl_histogram2d * h , const double x , const double y , size_t * i , size_t * j );
function gsl_histogram2d_find( const h : pgsl_histogram2d; const x : double; const y : double; i : psize_t; j : psize_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_get ( const gsl_histogram2d * h , const size_t i , const size_t j );
function gsl_histogram2d_get( const h : pgsl_histogram2d; const i : size_t; const j : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_get_xrange ( const gsl_histogram2d * h , const size_t i , double * xlower , double * xupper );
function gsl_histogram2d_get_xrange( const h : pgsl_histogram2d; const i : size_t; xlower : pdouble; xupper : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_get_yrange ( const gsl_histogram2d * h , const size_t j , double * ylower , double * yupper );
function gsl_histogram2d_get_yrange( const h : pgsl_histogram2d; const j : size_t; ylower : pdouble; yupper : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_xmax ( const gsl_histogram2d * h );
function gsl_histogram2d_xmax( const h : pgsl_histogram2d ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_xmin ( const gsl_histogram2d * h );
function gsl_histogram2d_xmin( const h : pgsl_histogram2d ) : double; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_histogram2d_nx ( const gsl_histogram2d * h );
function gsl_histogram2d_nx( const h : pgsl_histogram2d ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_ymax ( const gsl_histogram2d * h );
function gsl_histogram2d_ymax( const h : pgsl_histogram2d ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_ymin ( const gsl_histogram2d * h );
function gsl_histogram2d_ymin( const h : pgsl_histogram2d ) : double; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_histogram2d_ny ( const gsl_histogram2d * h );
function gsl_histogram2d_ny( const h : pgsl_histogram2d ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram2d_reset ( gsl_histogram2d * h );
procedure gsl_histogram2d_reset( h : pgsl_histogram2d ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram2d * gsl_histogram2d_calloc_range ( size_t nx , size_t ny , double * xrange , double * yrange );
function gsl_histogram2d_calloc_range( nx : size_t; ny : size_t; xrange : pdouble; yrange : pdouble ) : pgsl_histogram2d ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_set_ranges_uniform ( gsl_histogram2d * h , double xmin , double xmax , double ymin , double ymax );
function gsl_histogram2d_set_ranges_uniform( h : pgsl_histogram2d; xmin : double; xmax : double; ymin : double; ymax : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_set_ranges ( gsl_histogram2d * h , const double xrange [ ] , size_t xsize , const double yrange [ ] , size_t ysize );
function gsl_histogram2d_set_ranges( h : pgsl_histogram2d; const xrange : array of  double; xsize : size_t; const yrange : array of  double; ysize : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_memcpy ( gsl_histogram2d * dest , const gsl_histogram2d * source );
function gsl_histogram2d_memcpy( dest : pgsl_histogram2d; const source : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram2d * gsl_histogram2d_clone ( const gsl_histogram2d * source );
function gsl_histogram2d_clone( const source : pgsl_histogram2d ) : pgsl_histogram2d ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_max_val ( const gsl_histogram2d * h );
function gsl_histogram2d_max_val( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram2d_max_bin ( const gsl_histogram2d * h , size_t * i , size_t * j );
procedure gsl_histogram2d_max_bin( const h : pgsl_histogram2d; i : psize_t; j : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_min_val ( const gsl_histogram2d * h );
function gsl_histogram2d_min_val( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram2d_min_bin ( const gsl_histogram2d * h , size_t * i , size_t * j );
procedure gsl_histogram2d_min_bin( const h : pgsl_histogram2d; i : psize_t; j : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_xmean ( const gsl_histogram2d * h );
function gsl_histogram2d_xmean( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_ymean ( const gsl_histogram2d * h );
function gsl_histogram2d_ymean( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_xsigma ( const gsl_histogram2d * h );
function gsl_histogram2d_xsigma( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_ysigma ( const gsl_histogram2d * h );
function gsl_histogram2d_ysigma( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_cov ( const gsl_histogram2d * h );
function gsl_histogram2d_cov( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram2d_sum ( const gsl_histogram2d * h );
function gsl_histogram2d_sum( const h : pgsl_histogram2d ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_equal_bins_p ( const gsl_histogram2d * h1 , const gsl_histogram2d * h2 );
function gsl_histogram2d_equal_bins_p( const h1 : pgsl_histogram2d; const h2 : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_add ( gsl_histogram2d * h1 , const gsl_histogram2d * h2 );
function gsl_histogram2d_add( h1 : pgsl_histogram2d; const h2 : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_sub ( gsl_histogram2d * h1 , const gsl_histogram2d * h2 );
function gsl_histogram2d_sub( h1 : pgsl_histogram2d; const h2 : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_mul ( gsl_histogram2d * h1 , const gsl_histogram2d * h2 );
function gsl_histogram2d_mul( h1 : pgsl_histogram2d; const h2 : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_div ( gsl_histogram2d * h1 , const gsl_histogram2d * h2 );
function gsl_histogram2d_div( h1 : pgsl_histogram2d; const h2 : pgsl_histogram2d ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_scale ( gsl_histogram2d * h , double scale );
function gsl_histogram2d_scale( h : pgsl_histogram2d; scale : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_shift ( gsl_histogram2d * h , double shift );
function gsl_histogram2d_shift( h : pgsl_histogram2d; shift : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_fwrite ( FILE * stream , const gsl_histogram2d * h );
function gsl_histogram2d_fwrite( stream : pFILE; const h : pgsl_histogram2d ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_fread ( FILE * stream , gsl_histogram2d * h );
function gsl_histogram2d_fread( stream : pFILE; h : pgsl_histogram2d ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_fprintf ( FILE * stream , const gsl_histogram2d * h , const char * range_format , const char * bin_format );
function gsl_histogram2d_fprintf( stream : pFILE; const h : pgsl_histogram2d; const range_format : pchar; const bin_format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_fscanf ( FILE * stream , gsl_histogram2d * h );
function gsl_histogram2d_fscanf( stream : pFILE; h : pgsl_histogram2d ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram2d_pdf * gsl_histogram2d_pdf_alloc ( const size_t nx , const size_t ny );
function gsl_histogram2d_pdf_alloc( const nx : size_t; const ny : size_t ) : pgsl_histogram2d_pdf; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_pdf_init ( gsl_histogram2d_pdf * p , const gsl_histogram2d * h );
function gsl_histogram2d_pdf_init( p : pgsl_histogram2d_pdf; const h : pgsl_histogram2d ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram2d_pdf_free ( gsl_histogram2d_pdf * p );
procedure gsl_histogram2d_pdf_free( p : pgsl_histogram2d_pdf ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram2d_pdf_sample ( const gsl_histogram2d_pdf * p , double r1 , double r2 , double * x , double * y );
function gsl_histogram2d_pdf_sample( const p : pgsl_histogram2d_pdf; r1 : double; r2 : double; x : pdouble; y : pdouble ) : int; cdecl; external gsl_dll;

//gsl_histogram.h
//GSL_EXPORT gsl_histogram * gsl_histogram_alloc ( size_t n );
function gsl_histogram_alloc( n : size_t ) : pgsl_histogram; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram * gsl_histogram_calloc ( size_t n );
function gsl_histogram_calloc( n : size_t ) : pgsl_histogram; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram * gsl_histogram_calloc_uniform ( const size_t n , const double xmin , const double xmax );
function gsl_histogram_calloc_uniform( const n : size_t; const xmin : double; const xmax : double ) : pgsl_histogram; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram_free ( gsl_histogram * h );
procedure gsl_histogram_free( h : pgsl_histogram ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_increment ( gsl_histogram * h , double x );
function gsl_histogram_increment( h : pgsl_histogram; x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_accumulate ( gsl_histogram * h , double x , double weight );
function gsl_histogram_accumulate( h : pgsl_histogram; x : double; weight : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_find ( const gsl_histogram * h , const double x , size_t * i );
function gsl_histogram_find( const h : pgsl_histogram; const x : double; i : psize_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_get ( const gsl_histogram * h , size_t i );
function gsl_histogram_get( const h : pgsl_histogram; i : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_get_range ( const gsl_histogram * h , size_t i , double * lower , double * upper );
function gsl_histogram_get_range( const h : pgsl_histogram; i : size_t; lower : pdouble; upper : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_max ( const gsl_histogram * h );
function gsl_histogram_max( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_min ( const gsl_histogram * h );
function gsl_histogram_min( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_histogram_bins ( const gsl_histogram * h );
function gsl_histogram_bins( const h : pgsl_histogram ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram_reset ( gsl_histogram * h );
procedure gsl_histogram_reset( h : pgsl_histogram ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram * gsl_histogram_calloc_range ( size_t n , double * range );
function gsl_histogram_calloc_range( n : size_t; range : pdouble ) : pgsl_histogram; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_set_ranges ( gsl_histogram * h , const double range [ ] , size_t size );
function gsl_histogram_set_ranges( h : pgsl_histogram; const range : array of  double; size : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_set_ranges_uniform ( gsl_histogram * h , double xmin , double xmax );
function gsl_histogram_set_ranges_uniform( h : pgsl_histogram; xmin : double; xmax : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_memcpy ( gsl_histogram * dest , const gsl_histogram * source );
function gsl_histogram_memcpy( dest : pgsl_histogram; const source : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram * gsl_histogram_clone ( const gsl_histogram * source );
function gsl_histogram_clone( const source : pgsl_histogram ) : pgsl_histogram ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_max_val ( const gsl_histogram * h );
function gsl_histogram_max_val( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_histogram_max_bin ( const gsl_histogram * h );
function gsl_histogram_max_bin( const h : pgsl_histogram ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_min_val ( const gsl_histogram * h );
function gsl_histogram_min_val( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_histogram_min_bin ( const gsl_histogram * h );
function gsl_histogram_min_bin( const h : pgsl_histogram ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_equal_bins_p ( const gsl_histogram * h1 , const gsl_histogram * h2 );
function gsl_histogram_equal_bins_p( const h1 : pgsl_histogram; const h2 : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_add ( gsl_histogram * h1 , const gsl_histogram * h2 );
function gsl_histogram_add( h1 : pgsl_histogram; const h2 : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_sub ( gsl_histogram * h1 , const gsl_histogram * h2 );
function gsl_histogram_sub( h1 : pgsl_histogram; const h2 : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_mul ( gsl_histogram * h1 , const gsl_histogram * h2 );
function gsl_histogram_mul( h1 : pgsl_histogram; const h2 : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_div ( gsl_histogram * h1 , const gsl_histogram * h2 );
function gsl_histogram_div( h1 : pgsl_histogram; const h2 : pgsl_histogram ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_scale ( gsl_histogram * h , double scale );
function gsl_histogram_scale( h : pgsl_histogram; scale : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_shift ( gsl_histogram * h , double shift );
function gsl_histogram_shift( h : pgsl_histogram; shift : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_sigma ( const gsl_histogram * h );
function gsl_histogram_sigma( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_mean ( const gsl_histogram * h );
function gsl_histogram_mean( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_sum ( const gsl_histogram * h );
function gsl_histogram_sum( const h : pgsl_histogram ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_fwrite ( FILE * stream , const gsl_histogram * h );
function gsl_histogram_fwrite( stream : pFILE; const h : pgsl_histogram ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_fread ( FILE * stream , gsl_histogram * h );
function gsl_histogram_fread( stream : pFILE; h : pgsl_histogram ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_fprintf ( FILE * stream , const gsl_histogram * h , const char * range_format , const char * bin_format );
function gsl_histogram_fprintf( stream : pFILE; const h : pgsl_histogram; const range_format : pchar; const bin_format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_fscanf ( FILE * stream , gsl_histogram * h );
function gsl_histogram_fscanf( stream : pFILE; h : pgsl_histogram ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_histogram_pdf * gsl_histogram_pdf_alloc ( const size_t n );
function gsl_histogram_pdf_alloc( const n : size_t ) : pgsl_histogram_pdf; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_histogram_pdf_init ( gsl_histogram_pdf * p , const gsl_histogram * h );
function gsl_histogram_pdf_init( p : pgsl_histogram_pdf; const h : pgsl_histogram ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_histogram_pdf_free ( gsl_histogram_pdf * p );
procedure gsl_histogram_pdf_free( p : pgsl_histogram_pdf ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_histogram_pdf_sample ( const gsl_histogram_pdf * p , double r );
function gsl_histogram_pdf_sample( const p : pgsl_histogram_pdf; r : double ) : double; cdecl; external gsl_dll;

//gsl_ieee_utils.h
//GSL_EXPORT void gsl_ieee_printf_float ( const float * x );
procedure gsl_ieee_printf_float( const x : pfloat ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_printf_double ( const double * x );
procedure gsl_ieee_printf_double( const x : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_fprintf_float ( FILE * stream , const float * x );
procedure gsl_ieee_fprintf_float( stream : pFILE; const x : pfloat ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_fprintf_double ( FILE * stream , const double * x );
procedure gsl_ieee_fprintf_double( stream : pFILE; const x : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_float_to_rep ( const float * x , gsl_ieee_float_rep * r );
procedure gsl_ieee_float_to_rep( const x : pfloat; r : pgsl_ieee_float_rep ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_double_to_rep ( const double * x , gsl_ieee_double_rep * r );
procedure gsl_ieee_double_to_rep( const x : pdouble; r : pgsl_ieee_double_rep ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ieee_env_setup ( void );
procedure gsl_ieee_env_setup; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ieee_read_mode_string ( const char * description , int * precision , int * rounding , int * exception_mask );
function gsl_ieee_read_mode_string( const description : pchar; precision : pint; rounding : pint; exception_mask : pint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ieee_set_mode ( int precision , int rounding , int exception_mask );
function gsl_ieee_set_mode( precision : int; rounding : int; exception_mask : int ) : int; cdecl; external gsl_dll;

//gsl_integration.h
//GSL_EXPORT gsl_integration_workspace * gsl_integration_workspace_alloc ( const size_t n );
function gsl_integration_workspace_alloc( const n : size_t ) : pgsl_integration_workspace ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_workspace_free ( gsl_integration_workspace * w );
procedure gsl_integration_workspace_free( w : pgsl_integration_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_integration_qaws_table * gsl_integration_qaws_table_alloc ( double alpha , double beta , int mu , int nu );
function gsl_integration_qaws_table_alloc( alpha : double; beta : double; mu : int; nu : int ) : pgsl_integration_qaws_table ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qaws_table_set ( gsl_integration_qaws_table * t , double alpha , double beta , int mu , int nu );
function gsl_integration_qaws_table_set( t : pgsl_integration_qaws_table; alpha : double; beta : double; mu : int; nu : int ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qaws_table_free ( gsl_integration_qaws_table * t );
procedure gsl_integration_qaws_table_free( t : pgsl_integration_qaws_table ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_integration_qawo_table * gsl_integration_qawo_table_alloc ( double omega , double L , enum gsl_integration_qawo_enum sine , size_t n );
function gsl_integration_qawo_table_alloc( omega : double; L : double; sine : gsl_integration_qawo_enum; n : size_t ) : pgsl_integration_qawo_table ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qawo_table_set ( gsl_integration_qawo_table * t , double omega , double L , enumgsl_integration_qawo_enumsine );
function gsl_integration_qawo_table_set( t : pgsl_integration_qawo_table; omega : double; L : double; sine : gsl_integration_qawo_enum) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qawo_table_set_length ( gsl_integration_qawo_table * t , double L );
function gsl_integration_qawo_table_set_length( t : pgsl_integration_qawo_table; L : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qawo_table_free ( gsl_integration_qawo_table * t );
procedure gsl_integration_qawo_table_free( t : pgsl_integration_qawo_table ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk15 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk15( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk21 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk21( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk31 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk31( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk41 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk41( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk51 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk51( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk61 ( const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk61( const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qcheb ( gsl_function * f , double a , double b , double * cheb12 , double * cheb24 );
procedure gsl_integration_qcheb( f : pgsl_function; a : double; b : double; cheb12 : pdouble; cheb24 : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_integration_qk ( const int n , const double xgk [ ] , const double wg [ ] , const double wgk [ ] , double fv1 [ ] , double fv2 [ ] , const gsl_function * f , double a , double b , double * result , double * abserr , double * resabs , double * resasc );
procedure gsl_integration_qk( const n : int; const xgk : array of  double; const wg : array of  double; const wgk : array of  double; fv1 : array of   double; fv2 : array of  double; const f : pgsl_function; a : double; b : double; result : pdouble; abserr : pdouble; resabs : pdouble; resasc : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qng ( const gsl_function * f , double a , double b , double epsabs , double epsrel , double * result , double * abserr , size_t * neval );
function gsl_integration_qng( const f : pgsl_function; a : double; b : double; epsabs : double; epsrel : double; result : pdouble; abserr : pdouble; neval : psize_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qag ( const gsl_function * f , double a , double b , double epsabs , double epsrel , size_t limit , int key , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qag( const f : pgsl_function; a : double; b : double; epsabs : double; epsrel : double; limit : size_t; key : int; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qagi ( gsl_function * f , double epsabs , double epsrel , size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qagi( f : pgsl_function; epsabs : double; epsrel : double; limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qagiu ( gsl_function * f , double a , double epsabs , double epsrel , size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qagiu( f : pgsl_function; a : double; epsabs : double; epsrel : double; limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qagil ( gsl_function * f , double b , double epsabs , double epsrel , size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qagil( f : pgsl_function; b : double; epsabs : double; epsrel : double; limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qags ( const gsl_function * f , double a , double b , double epsabs , double epsrel , size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qags( const f : pgsl_function; a : double; b : double; epsabs : double; epsrel : double; limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qagp ( const gsl_function * f , double * pts , size_t npts , double epsabs , double epsrel , size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qagp( const f : pgsl_function; pts : pdouble; npts : size_t; epsabs : double; epsrel : double; limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qawc ( gsl_function * f , const double a , const double b , const double c , const double epsabs , const double epsrel , const size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qawc( f : pgsl_function; const a : double; const b : double; const c : double; const epsabs : double; const epsrel : double; const limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qaws ( gsl_function * f , const double a , const double b , gsl_integration_qaws_table * t , const double epsabs , const double epsrel , const size_t limit , gsl_integration_workspace * workspace , double * result , double * abserr );
function gsl_integration_qaws( f : pgsl_function; const a : double; const b : double; t : pgsl_integration_qaws_table; const epsabs : double; const epsrel : double; const limit : size_t; workspace : pgsl_integration_workspace; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qawo ( gsl_function * f , const double a , const double epsabs , const double epsrel , const size_t limit , gsl_integration_workspace * workspace , gsl_integration_qawo_table * wf , double * result , double * abserr );
function gsl_integration_qawo( f : pgsl_function; const a : double; const epsabs : double; const epsrel : double; const limit : size_t; workspace : pgsl_integration_workspace; wf : pgsl_integration_qawo_table; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_integration_qawf ( gsl_function * f , const double a , const double epsabs , const size_t limit , gsl_integration_workspace * workspace , gsl_integration_workspace * cycle_workspace , gsl_integration_qawo_table * wf , double * result , double * abserr );
function gsl_integration_qawf( f : pgsl_function; const a : double; const epsabs : double; const limit : size_t; workspace : pgsl_integration_workspace; cycle_workspace : pgsl_integration_workspace; wf : pgsl_integration_qawo_table; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;

//gsl_interp.h
//GSL_EXPORT gsl_interp_accel * gsl_interp_accel_alloc ( void );
function gsl_interp_accel_alloc : pgsl_interp_accel ; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_interp_accel_find ( gsl_interp_accel * a , const double x_array [ ] , size_t size , double x );
function gsl_interp_accel_find( a : pgsl_interp_accel; const x_arrays : array of  double; size : size_t; x : double ) : size_t ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_accel_reset ( gsl_interp_accel * a );
function gsl_interp_accel_reset( a : pgsl_interp_accel ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_interp_accel_free ( gsl_interp_accel * a );
procedure gsl_interp_accel_free( a : pgsl_interp_accel ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_interp * gsl_interp_alloc ( const gsl_interp_type * T , size_t n );
function gsl_interp_alloc( const T : pgsl_interp_type; n : size_t ) : pgsl_interp ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_init ( gsl_interp * obj , const double xa [ ] , const double ya [ ] , size_t size );
function gsl_interp_init( obj : pgsl_interp; const xa : array of  double; const ya : array of  double; size : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_interp_name ( const gsl_interp * interp );
function gsl_interp_name( const interp : pgsl_interp ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_interp_min_size ( const gsl_interp * interp );
function gsl_interp_min_size( const interp : pgsl_interp ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_eval_e ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a , double * y );
function gsl_interp_eval_e( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel; y : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_interp_eval ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a );
function gsl_interp_eval( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_eval_deriv_e ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a , double * d );
function gsl_interp_eval_deriv_e( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel; d : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_interp_eval_deriv ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a );
function gsl_interp_eval_deriv( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_eval_deriv2_e ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a , double * d2 );
function gsl_interp_eval_deriv2_e( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel; d2 : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_interp_eval_deriv2 ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double x , gsl_interp_accel * a );
function gsl_interp_eval_deriv2( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_interp_eval_integ_e ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double a , double b , gsl_interp_accel * acc , double * result );
function gsl_interp_eval_integ_e( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; a : double; b : double; acc : pgsl_interp_accel; result : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_interp_eval_integ ( const gsl_interp * obj , const double xa [ ] , const double ya [ ] , double a , double b , gsl_interp_accel * acc );
function gsl_interp_eval_integ( const obj : pgsl_interp; const xa : array of  double; const ya : array of  double; a : double; b : double; acc : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_interp_free ( gsl_interp * interp );
procedure gsl_interp_free( interp : pgsl_interp ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_interp_bsearch ( const double x_array [ ] , double x , size_t index_lo , size_t index_hi );
function gsl_interp_bsearch( const x_arrays : array of  double; x : double; index_lo : size_t; index_hi : size_t ) : size_t; cdecl; external gsl_dll;

//gsl_interp2d.h
function gsl_interp2d_alloc(const T : pgsl_interp2d_type;
                            xSize, ySize : size_t ) : pgsl_interp2d ; cdecl; external gsl_dll;

//const char * gsl_interp2d_name(const gsl_interp2d * interp);
function gsl_interp2d_name(const interp:pgsl_spline2d):pAnsiChar;cdecl;external gsl_dll;

{int gsl_interp2d_init(gsl_interp2d * interp, const double xa[], const double ya[],
                      const double za[], const size_t xsize, const size_t ysize);}
function gsl_interp2d_init(const interp : pgsl_interp2d;
                            const xa:array of  double;
                            const ya:array of  double;
                            const za:array of  double;
                            const xSize, ySize : size_t) : int ; cdecl; external gsl_dll;

{int gsl_interp2d_set (const gsl interp2d * interp, double za[],
const size_t i, const size_t j, const double z) }
function gsl_interp2d_set(const interp : pgsl_interp2d;
                          const za : array of  double;
                          const i, j : size_t;
                          const z : double):int; cdecl; external gsl_dll;
                          
//double gsl_interp2d_get (const gsl interp2d * interp, const double za[], const size_t i, const size_t j)
function gsl_interp2d_get(const interp : pgsl_interp2d;
                          const zarr:array of  double;
                          const i, j : size_t):double; cdecl; external gsl_dll;

//size_t gsl_interp2d_idx (const gsl interp2d * interp, const size_t i const size_t j)
function gsl_interp2d_idx(const interp : pgsl_interp2d;
                          const i, j : size_t):size_t; cdecl; external gsl_dll;

{double gsl_interp2d_eval(const gsl_interp2d * interp, const double xarr[],
                         const double yarr[], const double zarr[], const double x,
                         const double y, gsl_interp_accel * xa, gsl_interp_accel * ya); }
function gsl_interp2d_eval(const interp : pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa,ya : pgsl_interp_accel):double;cdecl;external gsl_dll;

{double gsl_interp2d_eval_extrap(const gsl_interp2d * interp,
                                const double xarr[], const double yarr[],
                                const double zarr[], const double x,
                                const double y, gsl_interp_accel * xa,
                                gsl_interp_accel * ya);  }
function gsl_interp2d_eval_extrap(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;


{int gsl_interp2d_eval_e(const gsl_interp2d * interp, const double xarr[],
                        const double yarr[], const double zarr[],
                        const double x, const double y, gsl_interp_accel* xa,
                        gsl_interp_accel* ya, double * z); }
function gsl_interp2d_eval_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel;
                            z:pdouble):int;cdecl;external gsl_dll;

{int gsl_interp2d_eval_e_extrap(const gsl_interp2d * interp,
                               const double xarr[],
                               const double yarr[],
                               const double zarr[],
                               const double x,
                               const double y,
                               gsl_interp_accel * xa,
                               gsl_interp_accel * ya,
                               double * z); }
function gsl_interp2d_eval_e_extrap(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel;
                            z:pdouble):int;cdecl;external gsl_dll;

{double gsl_interp2d_eval_deriv_x(const gsl_interp2d * interp, const double xarr[],
                                 const double yarr[], const double zarr[],
                                 const double x, const double y, gsl_interp_accel * xa,
                                 gsl_interp_accel * ya);  }
function gsl_interp2d_eval_deriv_x(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_interp2d_eval_deriv_x_e(const gsl_interp2d * interp, const double xarr[],
                                const double yarr[], const double zarr[],
                                const double x, const double y,
                                gsl_interp_accel * xa, gsl_interp_accel * ya, double * z);}
function gsl_interp2d_eval_deriv_x_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_interp2d_eval_deriv_y(const gsl_interp2d * interp, const double xarr[],
                                 const double yarr[], const double zarr[],
                                 const double x, const double y,
                                 gsl_interp_accel* xa, gsl_interp_accel* ya); }
function gsl_interp2d_eval_deriv_y(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;
 
{int gsl_interp2d_eval_deriv_y_e(const gsl_interp2d * interp, const double xarr[],
                                const double yarr[], const double zarr[],
                                const double x, const double y,
                                gsl_interp_accel * xa, gsl_interp_accel * ya, double * z);}
function gsl_interp2d_eval_deriv_y_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_interp2d_eval_deriv_xx(const gsl_interp2d * interp, const double xarr[],
                                  const double yarr[], const double zarr[],
                                  const double x, const double y,
                                  gsl_interp_accel * xa, gsl_interp_accel * ya);  }
function gsl_interp2d_eval_deriv_xx(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_interp2d_eval_deriv_xx_e(const gsl_interp2d * interp, const double xarr[],
                                 const double yarr[], const double zarr[],
                                 const double x, const double y,
                                 gsl_interp_accel * xa, gsl_interp_accel * ya, double * z);  }
function gsl_interp2d_eval_deriv_xx_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_interp2d_eval_deriv_yy(const gsl_interp2d * interp, const double xarr[],
                                  const double yarr[], const double zarr[],
                                  const double x, const double y,
                                  gsl_interp_accel * xa, gsl_interp_accel * ya); }
function gsl_interp2d_eval_deriv_yy(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_interp2d_eval_deriv_yy_e(const gsl_interp2d * interp, const double xarr[],
                                 const double yarr[], const double zarr[],
                                 const double x, const double y,
                                 gsl_interp_accel * xa, gsl_interp_accel * ya, double * z); }
function gsl_interp2d_eval_deriv_yy_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_interp2d_eval_deriv_xy(const gsl_interp2d * interp, const double xarr[],
                                  const double yarr[], const double zarr[],
                                  const double x, const double y,
                                  gsl_interp_accel * xa, gsl_interp_accel * ya); }
function gsl_interp2d_eval_deriv_xy(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_interp2d_eval_deriv_xy_e(const gsl_interp2d * interp, const double xarr[],
                                 const double yarr[], const double zarr[],
                                 const double x, const double y,
                                 gsl_interp_accel * xa, gsl_interp_accel * ya, double * z); }

function gsl_interp2d_eval_deriv_xy_e(const interp:pgsl_interp2d;
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):longint;cdecl;external gsl_dll;

//void gsl_interp2d_free(gsl_interp2d * interp);
procedure gsl_interp2d_free(interp : pgsl_interp2d ); cdecl; external gsl_dll;


function gsl_interp2d_bilinear : pgsl_interp2d_type;
function gsl_interp2d_bicubic : pgsl_interp2d_type;
//gsl_spline2d.h

//gsl_spline2d * gsl_spline2d_alloc(const gsl_interp2d_type * T, size_t xsize, size_t ysize);
function gsl_spline2d_alloc(const T:pgsl_interp2d_type; xsize:size_t; ysize:size_t):pgsl_spline2d;cdecl;external gsl_dll;

{int gsl_spline2d_init(gsl_spline2d * interp, const double xa[],
                      const double ya[], const double za[],
                      size_t xsize, size_t ysize);}
function gsl_spline2d_init(interp:pgsl_spline2d; 
                            const xarr:array of  double;
                            const yarr:array of  double;
                            const zarr:array of  double;
                            const xSize, ySize : size_t):int;cdecl;external gsl_dll;

//void gsl_spline2d_free(gsl_spline2d * interp);
procedure gsl_spline2d_free(interp:pgsl_spline2d);cdecl;external gsl_dll;

{double gsl_spline2d_eval(const gsl_spline2d * interp, const double x,
                         const double y, gsl_interp_accel* xa, gsl_interp_accel* ya);}
function gsl_spline2d_eval(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa,ya : pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_e(const gsl_spline2d * interp, const double x,
                        const double y, gsl_interp_accel* xa, gsl_interp_accel* ya,
                        double * z);}
function gsl_spline2d_eval_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel;
                            z:pdouble):int;cdecl;external gsl_dll;

{double gsl_spline2d_eval_deriv_x(const gsl_spline2d * interp, const double x,
                                 const double y, gsl_interp_accel* xa, gsl_interp_accel* ya);}
function gsl_spline2d_eval_deriv_x(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_deriv_x_e(const gsl_spline2d * interp, const double x,
                                const double y, gsl_interp_accel* xa,
                                gsl_interp_accel* ya, double * z);}
function gsl_spline2d_eval_deriv_x_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_spline2d_eval_deriv_y(const gsl_spline2d * interp, const double x,
                                 const double y, gsl_interp_accel* xa,
                                 gsl_interp_accel* ya);}
function gsl_spline2d_eval_deriv_y(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_deriv_y_e(const gsl_spline2d * interp, const double x,
                                const double y, gsl_interp_accel* xa,
                                gsl_interp_accel* ya, double * z);}
function gsl_spline2d_eval_deriv_y_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_spline2d_eval_deriv_xx(const gsl_spline2d * interp, const double x,
                                  const double y, gsl_interp_accel* xa, gsl_interp_accel* ya);}
function gsl_spline2d_eval_deriv_xx(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_deriv_xx_e(const gsl_spline2d * interp, const double x,
                                 const double y, gsl_interp_accel* xa,
                                 gsl_interp_accel* ya, double * z);}
function gsl_spline2d_eval_deriv_xx_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_spline2d_eval_deriv_yy(const gsl_spline2d * interp, const double x,
                                  const double y, gsl_interp_accel* xa, gsl_interp_accel* ya);}
function gsl_spline2d_eval_deriv_yy(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_deriv_yy_e(const gsl_spline2d * interp, const double x,
                                 const double y, gsl_interp_accel* xa,
                                 gsl_interp_accel* ya, double * z);}
function gsl_spline2d_eval_deriv_yy_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{double gsl_spline2d_eval_deriv_xy(const gsl_spline2d * interp, const double x,
                                  const double y, gsl_interp_accel* xa, gsl_interp_accel* ya);}
function gsl_spline2d_eval_deriv_xy(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel):double;cdecl;external gsl_dll;

{int gsl_spline2d_eval_deriv_xy_e(const gsl_spline2d * interp, const double x,
                                 const double y, gsl_interp_accel* xa,
                                 gsl_interp_accel* ya, double * z);}
function gsl_spline2d_eval_deriv_xy_e(const interp:pgsl_spline2d;
                            const x, y:double;
                            xa, ya:pgsl_interp_accel; z:pdouble):int;cdecl;external gsl_dll;

{size_t gsl_spline2d_min_size(const gsl_spline2d * interp);}
function gsl_spline2d_min_size(const interp:pgsl_spline2d):size_t;cdecl;external gsl_dll;

{const char * gsl_spline2d_name(const gsl_spline2d * interp);}
function gsl_spline2d_name(const interp:pgsl_spline2d):pAnsiChar;cdecl;external gsl_dll;

{int gsl_spline2d_set(const gsl_spline2d * interp, double zarr[],
                     const size_t i, const size_t j, const double z);}
function gsl_spline2d_set(const interp:pgsl_spline2d; 
                          const za : array of  double;
                          const i, j : size_t;
                          const z : double):int;cdecl;external gsl_dll;

{double gsl_spline2d_get(const gsl_spline2d * interp, const double zarr[],
                        const size_t i, const size_t j);}
function gsl_spline2d_get(const interp:pgsl_spline2d; 
                          const za : array of  double;
                          const i, j : size_t):double;cdecl;external gsl_dll;

//gsl_linalg.h
//GSL_EXPORT int gsl_linalg_matmult ( const gsl_matrix * A , const gsl_matrix * B , gsl_matrix * C );
function gsl_linalg_matmult( const A : pgsl_matrix; const B : pgsl_matrix; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_matmult_mod ( const gsl_matrix * A , gsl_linalg_matrix_mod_t modA , const gsl_matrix * B , gsl_linalg_matrix_mod_t modB , gsl_matrix * C );
function gsl_linalg_matmult_mod( const A : pgsl_matrix; modA : gsl_linalg_matrix_mod_t; const B : pgsl_matrix; modB : gsl_linalg_matrix_mod_t; C : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_exponential_ss ( const gsl_matrix * A , gsl_matrix * eA , gsl_mode_t mode );
function gsl_linalg_exponential_ss( const A : pgsl_matrix; eA : pgsl_matrix; mode : gsl_mode_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_linalg_householder_transform ( gsl_vector * v );
function gsl_linalg_householder_transform( v : pgsl_vector ) : double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_linalg_complex_householder_transform ( gsl_vector_complex * v );
function gsl_linalg_complex_householder_transform( v : pgsl_vector_complex ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_householder_hm ( double tau , const gsl_vector * v , gsl_matrix * A );
function gsl_linalg_householder_hm( tau : double; const v : pgsl_vector; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_householder_mh ( double tau , const gsl_vector * v , gsl_matrix * A );
function gsl_linalg_householder_mh( tau : double; const v : pgsl_vector; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_householder_hv ( double tau , const gsl_vector * v , gsl_vector * w );
function gsl_linalg_householder_hv( tau : double; const v : pgsl_vector; w : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_householder_hm1 ( double tau , gsl_matrix * A );
function gsl_linalg_householder_hm1( tau : double; A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_householder_hm ( gsl_complex tau , const gsl_vector_complex * v , gsl_matrix_complex * A );
function gsl_linalg_complex_householder_hm( tau : gsl_complex; const v : pgsl_vector_complex; A : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_householder_hv ( gsl_complex tau , const gsl_vector_complex * v , gsl_vector_complex * w );
function gsl_linalg_complex_householder_hv( tau : gsl_complex; const v : pgsl_vector_complex; w : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_SV_decomp ( gsl_matrix * A , gsl_matrix * V , gsl_vector * S , gsl_vector * work );
function gsl_linalg_SV_decomp( A : pgsl_matrix; V : pgsl_matrix; S : pgsl_vector; work : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_SV_decomp_mod ( gsl_matrix * A , gsl_matrix * X , gsl_matrix * V , gsl_vector * S , gsl_vector * work );
function gsl_linalg_SV_decomp_mod( A : pgsl_matrix; X : pgsl_matrix; V : pgsl_matrix; S : pgsl_vector; work : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_SV_decomp_jacobi ( gsl_matrix * A , gsl_matrix * Q , gsl_vector * S );
function gsl_linalg_SV_decomp_jacobi( A : pgsl_matrix; Q : pgsl_matrix; S : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_SV_solve ( const gsl_matrix * U , const gsl_matrix * Q , const gsl_vector * S , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_SV_solve( const U : pgsl_matrix; const Q : pgsl_matrix; const S : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_decomp ( gsl_matrix * A , gsl_permutation * p , int * signum );
function gsl_linalg_LU_decomp( A : pgsl_matrix; p : pgsl_permutation; signum : pint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_solve ( const gsl_matrix * LU , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_LU_solve( const LU : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_svx ( const gsl_matrix * LU , const gsl_permutation * p , gsl_vector * x );
function gsl_linalg_LU_svx( const LU : pgsl_matrix; const p : pgsl_permutation; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_refine ( const gsl_matrix * A , const gsl_matrix * LU , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x , gsl_vector * residual );
function gsl_linalg_LU_refine( const A : pgsl_matrix; const LU : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector; residual : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_invert ( const gsl_matrix * LU , const gsl_permutation * p , gsl_matrix * inverse );
function gsl_linalg_LU_invert( const LU : pgsl_matrix; const p : pgsl_permutation; inverse : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_linalg_LU_det ( gsl_matrix * LU , int signum );
function gsl_linalg_LU_det( LU : pgsl_matrix; signum : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_linalg_LU_lndet ( gsl_matrix * LU );
function gsl_linalg_LU_lndet( LU : pgsl_matrix ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LU_sgndet ( gsl_matrix * lu , int signum );
function gsl_linalg_LU_sgndet( lu : pgsl_matrix; signum : int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_LU_decomp ( gsl_matrix_complex * A , gsl_permutation * p , int * signum );
function gsl_linalg_complex_LU_decomp( A : pgsl_matrix_complex; p : pgsl_permutation; signum : pint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_LU_solve ( const gsl_matrix_complex * LU , const gsl_permutation * p , const gsl_vector_complex * b , gsl_vector_complex * x );
function gsl_linalg_complex_LU_solve( const LU : pgsl_matrix_complex; const p : pgsl_permutation; const b : pgsl_vector_complex; x : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_LU_svx ( const gsl_matrix_complex * LU , const gsl_permutation * p , gsl_vector_complex * x );
function gsl_linalg_complex_LU_svx( const LU : pgsl_matrix_complex; const p : pgsl_permutation; x : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_LU_refine ( const gsl_matrix_complex * A , const gsl_matrix_complex * LU , const gsl_permutation * p , const gsl_vector_complex * b , gsl_vector_complex * x , gsl_vector_complex * residual );
function gsl_linalg_complex_LU_refine( const A : pgsl_matrix_complex; const LU : pgsl_matrix_complex; const p : pgsl_permutation; const b : pgsl_vector_complex; x : pgsl_vector_complex; residual : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_complex_LU_invert ( const gsl_matrix_complex * LU , const gsl_permutation * p , gsl_matrix_complex * inverse );
function gsl_linalg_complex_LU_invert( const LU : pgsl_matrix_complex; const p : pgsl_permutation; inverse : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_linalg_complex_LU_det ( gsl_matrix_complex * LU , int signum );
function gsl_linalg_complex_LU_det( LU : pgsl_matrix_complex; signum : int ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_linalg_complex_LU_lndet ( gsl_matrix_complex * LU );
function gsl_linalg_complex_LU_lndet( LU : pgsl_matrix_complex ) : double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_linalg_complex_LU_sgndet ( gsl_matrix_complex * LU , int signum );
function gsl_linalg_complex_LU_sgndet( LU : pgsl_matrix_complex; signum : int ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_decomp ( gsl_matrix * A , gsl_vector * tau );
function gsl_linalg_QR_decomp( A : pgsl_matrix; tau : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_solve ( const gsl_matrix * QR , const gsl_vector * tau , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QR_solve( const QR : pgsl_matrix; const tau : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_svx ( const gsl_matrix * QR , const gsl_vector * tau , gsl_vector * x );
function gsl_linalg_QR_svx( const QR : pgsl_matrix; const tau : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_lssolve ( const gsl_matrix * QR , const gsl_vector * tau , const gsl_vector * b , gsl_vector * x , gsl_vector * residual );
function gsl_linalg_QR_lssolve( const QR : pgsl_matrix; const tau : pgsl_vector; const b : pgsl_vector; x : pgsl_vector; residual : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_QRsolve ( gsl_matrix * Q , gsl_matrix * R , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QR_QRsolve( Q : pgsl_matrix; R : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_Rsolve ( const gsl_matrix * QR , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QR_Rsolve( const QR : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_Rsvx ( const gsl_matrix * QR , gsl_vector * x );
function gsl_linalg_QR_Rsvx( const QR : pgsl_matrix; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_update ( gsl_matrix * Q , gsl_matrix * R , gsl_vector * w , const gsl_vector * v );
function gsl_linalg_QR_update( Q : pgsl_matrix; R : pgsl_matrix; w : pgsl_vector; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_QTvec ( const gsl_matrix * QR , const gsl_vector * tau , gsl_vector * v );
function gsl_linalg_QR_QTvec( const QR : pgsl_matrix; const tau : pgsl_vector; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_Qvec ( const gsl_matrix * QR , const gsl_vector * tau , gsl_vector * v );
function gsl_linalg_QR_Qvec( const QR : pgsl_matrix; const tau : pgsl_vector; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QR_unpack ( const gsl_matrix * QR , const gsl_vector * tau , gsl_matrix * Q , gsl_matrix * R );
function gsl_linalg_QR_unpack( const QR : pgsl_matrix; const tau : pgsl_vector; Q : pgsl_matrix; R : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_R_solve ( const gsl_matrix * R , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_R_solve( const R : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_R_svx ( const gsl_matrix * R , gsl_vector * x );
function gsl_linalg_R_svx( const R : pgsl_matrix; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_decomp ( gsl_matrix * A , gsl_vector * tau , gsl_permutation * p , int * signum , gsl_vector * norm );
function gsl_linalg_QRPT_decomp( A : pgsl_matrix; tau : pgsl_vector; p : pgsl_permutation; signum : pint; norm : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_decomp2 ( const gsl_matrix * A , gsl_matrix * q , gsl_matrix * r , gsl_vector * tau , gsl_permutation * p , int * signum , gsl_vector * norm );
function gsl_linalg_QRPT_decomp2( const A : pgsl_matrix; q : pgsl_matrix; r : pgsl_matrix; tau : pgsl_vector; p : pgsl_permutation; signum : pint; norm : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_solve ( const gsl_matrix * QR , const gsl_vector * tau , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QRPT_solve( const QR : pgsl_matrix; const tau : pgsl_vector; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_svx ( const gsl_matrix * QR , const gsl_vector * tau , const gsl_permutation * p , gsl_vector * x );
function gsl_linalg_QRPT_svx( const QR : pgsl_matrix; const tau : pgsl_vector; const p : pgsl_permutation; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_QRsolve ( const gsl_matrix * Q , const gsl_matrix * R , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QRPT_QRsolve( const Q : pgsl_matrix; const R : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_Rsolve ( const gsl_matrix * QR , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_QRPT_Rsolve( const QR : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_Rsvx ( const gsl_matrix * QR , const gsl_permutation * p , gsl_vector * x );
function gsl_linalg_QRPT_Rsvx( const QR : pgsl_matrix; const p : pgsl_permutation; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_QRPT_update ( gsl_matrix * Q , gsl_matrix * R , const gsl_permutation * p , gsl_vector * u , const gsl_vector * v );
function gsl_linalg_QRPT_update( Q : pgsl_matrix; R : pgsl_matrix; const p : pgsl_permutation; u : pgsl_vector; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_decomp ( gsl_matrix * A , gsl_vector * tau );
function gsl_linalg_LQ_decomp( A : pgsl_matrix; tau : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_solve_T ( const gsl_matrix * LQ , const gsl_vector * tau , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_LQ_solve_T( const LQ : pgsl_matrix; const tau : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_svx_T ( const gsl_matrix * LQ , const gsl_vector * tau , gsl_vector * x );
function gsl_linalg_LQ_svx_T( const LQ : pgsl_matrix; const tau : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_lssolve_T ( const gsl_matrix * LQ , const gsl_vector * tau , const gsl_vector * b , gsl_vector * x , gsl_vector * residual );
function gsl_linalg_LQ_lssolve_T( const LQ : pgsl_matrix; const tau : pgsl_vector; const b : pgsl_vector; x : pgsl_vector; residual : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_Lsolve_T ( const gsl_matrix * LQ , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_LQ_Lsolve_T( const LQ : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_Lsvx_T ( const gsl_matrix * LQ , gsl_vector * x );
function gsl_linalg_LQ_Lsvx_T( const LQ : pgsl_matrix; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_L_solve_T ( const gsl_matrix * L , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_L_solve_T( const L : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_vecQ ( const gsl_matrix * LQ , const gsl_vector * tau , gsl_vector * v );
function gsl_linalg_LQ_vecQ( const LQ : pgsl_matrix; const tau : pgsl_vector; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_vecQT ( const gsl_matrix * LQ , const gsl_vector * tau , gsl_vector * v );
function gsl_linalg_LQ_vecQT( const LQ : pgsl_matrix; const tau : pgsl_vector; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_unpack ( const gsl_matrix * LQ , const gsl_vector * tau , gsl_matrix * Q , gsl_matrix * L );
function gsl_linalg_LQ_unpack( const LQ : pgsl_matrix; const tau : pgsl_vector; Q : pgsl_matrix; L : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_update ( gsl_matrix * Q , gsl_matrix * R , const gsl_vector * v , gsl_vector * w );
function gsl_linalg_LQ_update( Q : pgsl_matrix; R : pgsl_matrix; const v : pgsl_vector; w : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_LQ_LQsolve ( gsl_matrix * Q , gsl_matrix * L , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_LQ_LQsolve( Q : pgsl_matrix; L : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_decomp ( gsl_matrix * A , gsl_vector * tau , gsl_permutation * p , int * signum , gsl_vector * norm );
function gsl_linalg_PTLQ_decomp( A : pgsl_matrix; tau : pgsl_vector; p : pgsl_permutation; signum : pint; norm : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_decomp2 ( const gsl_matrix * A , gsl_matrix * q , gsl_matrix * r , gsl_vector * tau , gsl_permutation * p , int * signum , gsl_vector * norm );
function gsl_linalg_PTLQ_decomp2( const A : pgsl_matrix; q : pgsl_matrix; r : pgsl_matrix; tau : pgsl_vector; p : pgsl_permutation; signum : pint; norm : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_solve_T ( const gsl_matrix * QR , const gsl_vector * tau , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_PTLQ_solve_T( const QR : pgsl_matrix; const tau : pgsl_vector; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_svx_T ( const gsl_matrix * LQ , const gsl_vector * tau , const gsl_permutation * p , gsl_vector * x );
function gsl_linalg_PTLQ_svx_T( const LQ : pgsl_matrix; const tau : pgsl_vector; const p : pgsl_permutation; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_LQsolve_T ( const gsl_matrix * Q , const gsl_matrix * L , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_PTLQ_LQsolve_T( const Q : pgsl_matrix; const L : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_Lsolve_T ( const gsl_matrix * LQ , const gsl_permutation * p , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_PTLQ_Lsolve_T( const LQ : pgsl_matrix; const p : pgsl_permutation; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_Lsvx_T ( const gsl_matrix * LQ , const gsl_permutation * p , gsl_vector * x );
function gsl_linalg_PTLQ_Lsvx_T( const LQ : pgsl_matrix; const p : pgsl_permutation; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_PTLQ_update ( gsl_matrix * Q , gsl_matrix * L , const gsl_permutation * p , const gsl_vector * v , gsl_vector * w );
function gsl_linalg_PTLQ_update( Q : pgsl_matrix; L : pgsl_matrix; const p : pgsl_permutation; const v : pgsl_vector; w : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_cholesky_decomp ( gsl_matrix * A );
function gsl_linalg_cholesky_decomp( A : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_cholesky_solve ( const gsl_matrix * cholesky , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_cholesky_solve( const cholesky : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_cholesky_svx ( const gsl_matrix * cholesky , gsl_vector * x );
function gsl_linalg_cholesky_svx( const cholesky : pgsl_matrix; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_cholesky_decomp_unit ( gsl_matrix * A , gsl_vector * D );
function gsl_linalg_cholesky_decomp_unit( A : pgsl_matrix; D : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_symmtd_decomp ( gsl_matrix * A , gsl_vector * tau );
function gsl_linalg_symmtd_decomp( A : pgsl_matrix; tau : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_symmtd_unpack ( const gsl_matrix * A , const gsl_vector * tau , gsl_matrix * Q , gsl_vector * diag , gsl_vector * subdiag );
function gsl_linalg_symmtd_unpack( const A : pgsl_matrix; const tau : pgsl_vector; Q : pgsl_matrix; diag : pgsl_vector; subdiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_symmtd_unpack_T ( const gsl_matrix * A , gsl_vector * diag , gsl_vector * subdiag );
function gsl_linalg_symmtd_unpack_T( const A : pgsl_matrix; diag : pgsl_vector; subdiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_hermtd_decomp ( gsl_matrix_complex * A , gsl_vector_complex * tau );
function gsl_linalg_hermtd_decomp( A : pgsl_matrix_complex; tau : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_hermtd_unpack ( const gsl_matrix_complex * A , const gsl_vector_complex * tau , gsl_matrix_complex * Q , gsl_vector * diag , gsl_vector * sudiag );
function gsl_linalg_hermtd_unpack( const A : pgsl_matrix_complex; const tau : pgsl_vector_complex; Q : pgsl_matrix_complex; diag : pgsl_vector; sudiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_hermtd_unpack_T ( const gsl_matrix_complex * A , gsl_vector * diag , gsl_vector * subdiag );
function gsl_linalg_hermtd_unpack_T( const A : pgsl_matrix_complex; diag : pgsl_vector; subdiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_HH_solve ( gsl_matrix * A , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_HH_solve( A : pgsl_matrix; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_HH_svx ( gsl_matrix * A , gsl_vector * x );
function gsl_linalg_HH_svx( A : pgsl_matrix; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_solve_symm_tridiag ( const gsl_vector * diag , const gsl_vector * offdiag , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_solve_symm_tridiag( const diag : pgsl_vector; const offdiag : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_solve_tridiag ( const gsl_vector * diag , const gsl_vector * abovediag , const gsl_vector * belowdiag , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_solve_tridiag( const diag : pgsl_vector; const abovediag : pgsl_vector; const belowdiag : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_solve_symm_cyc_tridiag ( const gsl_vector * diag , const gsl_vector * offdiag , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_solve_symm_cyc_tridiag( const diag : pgsl_vector; const offdiag : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_solve_cyc_tridiag ( const gsl_vector * diag , const gsl_vector * abovediag , const gsl_vector * belowdiag , const gsl_vector * b , gsl_vector * x );
function gsl_linalg_solve_cyc_tridiag( const diag : pgsl_vector; const abovediag : pgsl_vector; const belowdiag : pgsl_vector; const b : pgsl_vector; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_bidiag_decomp ( gsl_matrix * A , gsl_vector * tau_U , gsl_vector * tau_V );
function gsl_linalg_bidiag_decomp( A : pgsl_matrix; tau_U : pgsl_vector; tau_V : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_bidiag_unpack ( const gsl_matrix * A , const gsl_vector * tau_U , gsl_matrix * U , const gsl_vector * tau_V , gsl_matrix * V , gsl_vector * diag , gsl_vector * superdiag );
function gsl_linalg_bidiag_unpack( const A : pgsl_matrix; const tau_U : pgsl_vector; U : pgsl_matrix; const tau_V : pgsl_vector; V : pgsl_matrix; diag : pgsl_vector; superdiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_bidiag_unpack2 ( gsl_matrix * A , gsl_vector * tau_U , gsl_vector * tau_V , gsl_matrix * V );
function gsl_linalg_bidiag_unpack2( A : pgsl_matrix; tau_U : pgsl_vector; tau_V : pgsl_vector; V : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_bidiag_unpack_B ( const gsl_matrix * A , gsl_vector * diag , gsl_vector * superdiag );
function gsl_linalg_bidiag_unpack_B( const A : pgsl_matrix; diag : pgsl_vector; superdiag : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_linalg_balance_columns ( gsl_matrix * A , gsl_vector * D );
function gsl_linalg_balance_columns( A : pgsl_matrix; D : pgsl_vector ) : int ; cdecl; external gsl_dll;

//gsl_machine.h

//gsl_math.h
//GSL_EXPORT double gsl_max ( double a , double b );
function gsl_max( a : double; b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min ( double a , double b );
function gsl_min( a : double; b : double ) : double; cdecl; external gsl_dll;

//gsl_matrix.h

//gsl_matrix_char.h
//GSL_EXPORT gsl_matrix_char * gsl_matrix_char_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_char_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_char ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_char * gsl_matrix_char_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_char_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_char ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_char * gsl_matrix_char_alloc_from_block ( gsl_block_char * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_char_alloc_from_block( b : pgsl_block_char; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_char ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_char * gsl_matrix_char_alloc_from_matrix ( gsl_matrix_char * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_char_alloc_from_matrix( m : pgsl_matrix_char; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_char ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_char * gsl_vector_char_alloc_row_from_matrix ( gsl_matrix_char * m , const size_t i );
function gsl_vector_char_alloc_row_from_matrix( m : pgsl_matrix_char; const i : size_t ) : pgsl_vector_char ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_char * gsl_vector_char_alloc_col_from_matrix ( gsl_matrix_char * m , const size_t j );
function gsl_vector_char_alloc_col_from_matrix( m : pgsl_matrix_char; const j : size_t ) : pgsl_vector_char ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_free ( gsl_matrix_char * m );
procedure gsl_matrix_char_free( m : pgsl_matrix_char ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_view gsl_matrix_char_submatrix ( gsl_matrix_char * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_char_submatrix( m : pgsl_matrix_char; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_matrix_char_row ( gsl_matrix_char * m , const size_t i );
function gsl_matrix_char_row( m : pgsl_matrix_char; const i : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_matrix_char_column ( gsl_matrix_char * m , const size_t j );
function gsl_matrix_char_column( m : pgsl_matrix_char; const j : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_matrix_char_diagonal ( gsl_matrix_char * m );
function gsl_matrix_char_diagonal( m : pgsl_matrix_char ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_matrix_char_subdiagonal ( gsl_matrix_char * m , const size_t k );
function gsl_matrix_char_subdiagonal( m : pgsl_matrix_char; const k : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_matrix_char_superdiagonal ( gsl_matrix_char * m , const size_t k );
function gsl_matrix_char_superdiagonal( m : pgsl_matrix_char; const k : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_view gsl_matrix_char_view_array ( char * base , const size_t n1 , const size_t n2 );
function gsl_matrix_char_view_array( base : pchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_view gsl_matrix_char_view_array_with_tda ( char * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_char_view_array_with_tda( base : pchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_view gsl_matrix_char_view_vector ( gsl_vector_char * v , const size_t n1 , const size_t n2 );
function gsl_matrix_char_view_vector( v : pgsl_vector_char; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_view gsl_matrix_char_view_vector_with_tda ( gsl_vector_char * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_char_view_vector_with_tda( v : pgsl_vector_char; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_const_view gsl_matrix_char_const_submatrix ( const gsl_matrix_char * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_char_const_submatrix( const m : pgsl_matrix_char; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_matrix_char_const_row ( const gsl_matrix_char * m , const size_t i );
function gsl_matrix_char_const_row( const m : pgsl_matrix_char; const i : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_matrix_char_const_column ( const gsl_matrix_char * m , const size_t j );
function gsl_matrix_char_const_column( const m : pgsl_matrix_char; const j : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_matrix_char_const_diagonal ( const gsl_matrix_char * m );
function gsl_matrix_char_const_diagonal( const m : pgsl_matrix_char ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_matrix_char_const_subdiagonal ( const gsl_matrix_char * m , const size_t k );
function gsl_matrix_char_const_subdiagonal( const m : pgsl_matrix_char; const k : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_matrix_char_const_superdiagonal ( const gsl_matrix_char * m , const size_t k );
function gsl_matrix_char_const_superdiagonal( const m : pgsl_matrix_char; const k : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_const_view gsl_matrix_char_const_view_array ( const char * base , const size_t n1 , const size_t n2 );
function gsl_matrix_char_const_view_array( const base : pchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_const_view gsl_matrix_char_const_view_array_with_tda ( const char * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_char_const_view_array_with_tda( const base : pchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_const_view gsl_matrix_char_const_view_vector ( const gsl_vector_char * v , const size_t n1 , const size_t n2 );
function gsl_matrix_char_const_view_vector( const v : pgsl_vector_char; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_char_const_view gsl_matrix_char_const_view_vector_with_tda ( const gsl_vector_char * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_char_const_view_vector_with_tda( const v : pgsl_vector_char; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_matrix_char_get ( const gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_get( const m : pgsl_matrix_char; const i : size_t; const j : size_t ) : char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_set ( gsl_matrix_char * m , const size_t i , const size_t j , const char x );
procedure gsl_matrix_char_set( m : pgsl_matrix_char; const i : size_t; const j : size_t; const x : char ); cdecl; external gsl_dll;
//GSL_EXPORT char * gsl_matrix_char_ptr ( gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_ptr( m : pgsl_matrix_char; const i : size_t; const j : size_t ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_matrix_char_const_ptr ( const gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_const_ptr( const m : pgsl_matrix_char; const i : size_t; const j : size_t ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_set_zero ( gsl_matrix_char * m );
procedure gsl_matrix_char_set_zero( m : pgsl_matrix_char ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_set_identity ( gsl_matrix_char * m );
procedure gsl_matrix_char_set_identity( m : pgsl_matrix_char ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_set_all ( gsl_matrix_char * m , char x );
procedure gsl_matrix_char_set_all( m : pgsl_matrix_char; x : char ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_fread ( FILE * stream , gsl_matrix_char * m );
function gsl_matrix_char_fread( stream : pFILE; m : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_fwrite ( FILE * stream , const gsl_matrix_char * m );
function gsl_matrix_char_fwrite( stream : pFILE; const m : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_fscanf ( FILE * stream , gsl_matrix_char * m );
function gsl_matrix_char_fscanf( stream : pFILE; m : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_fprintf ( FILE * stream , const gsl_matrix_char * m , const char * format );
function gsl_matrix_char_fprintf( stream : pFILE; const m : pgsl_matrix_char; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_memcpy ( gsl_matrix_char * dest , const gsl_matrix_char * src );
function gsl_matrix_char_memcpy( dest : pgsl_matrix_char; const src : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_swap ( gsl_matrix_char * m1 , gsl_matrix_char * m2 );
function gsl_matrix_char_swap( m1 : pgsl_matrix_char; m2 : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_swap_rows ( gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_swap_rows( m : pgsl_matrix_char; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_swap_columns ( gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_swap_columns( m : pgsl_matrix_char; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_swap_rowcol ( gsl_matrix_char * m , const size_t i , const size_t j );
function gsl_matrix_char_swap_rowcol( m : pgsl_matrix_char; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_transpose ( gsl_matrix_char * m );
function gsl_matrix_char_transpose( m : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_transpose_memcpy ( gsl_matrix_char * dest , const gsl_matrix_char * src );
function gsl_matrix_char_transpose_memcpy( dest : pgsl_matrix_char; const src : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_matrix_char_max ( const gsl_matrix_char * m );
function gsl_matrix_char_max( const m : pgsl_matrix_char ) : char; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_matrix_char_min ( const gsl_matrix_char * m );
function gsl_matrix_char_min( const m : pgsl_matrix_char ) : char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_minmax ( const gsl_matrix_char * m , char * min_out , char * max_out );
procedure gsl_matrix_char_minmax( const m : pgsl_matrix_char; min_out : pchar; max_out : pchar ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_max_index ( const gsl_matrix_char * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_char_max_index( const m : pgsl_matrix_char; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_min_index ( const gsl_matrix_char * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_char_min_index( const m : pgsl_matrix_char; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_char_minmax_index ( const gsl_matrix_char * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_char_minmax_index( const m : pgsl_matrix_char; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_isnull ( const gsl_matrix_char * m );
function gsl_matrix_char_isnull( const m : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_add ( gsl_matrix_char * a , const gsl_matrix_char * b );
function gsl_matrix_char_add( a : pgsl_matrix_char; const b : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_sub ( gsl_matrix_char * a , const gsl_matrix_char * b );
function gsl_matrix_char_sub( a : pgsl_matrix_char; const b : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_mul_elements ( gsl_matrix_char * a , const gsl_matrix_char * b );
function gsl_matrix_char_mul_elements( a : pgsl_matrix_char; const b : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_div_elements ( gsl_matrix_char * a , const gsl_matrix_char * b );
function gsl_matrix_char_div_elements( a : pgsl_matrix_char; const b : pgsl_matrix_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_scale ( gsl_matrix_char * a , const double x );
function gsl_matrix_char_scale( a : pgsl_matrix_char; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_add_constant ( gsl_matrix_char * a , const double x );
function gsl_matrix_char_add_constant( a : pgsl_matrix_char; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_add_diagonal ( gsl_matrix_char * a , const double x );
function gsl_matrix_char_add_diagonal( a : pgsl_matrix_char; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_get_row ( gsl_vector_char * v , const gsl_matrix_char * m , const size_t i );
function gsl_matrix_char_get_row( v : pgsl_vector_char; const m : pgsl_matrix_char; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_get_col ( gsl_vector_char * v , const gsl_matrix_char * m , const size_t j );
function gsl_matrix_char_get_col( v : pgsl_vector_char; const m : pgsl_matrix_char; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_set_row ( gsl_matrix_char * m , const size_t i , const gsl_vector_char * v );
function gsl_matrix_char_set_row( m : pgsl_matrix_char; const i : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_char_set_col ( gsl_matrix_char * m , const size_t j , const gsl_vector_char * v );
function gsl_matrix_char_set_col( m : pgsl_matrix_char; const j : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;

//gsl_matrix_complex_double.h
//GSL_EXPORT gsl_matrix_complex * gsl_matrix_complex_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex * gsl_matrix_complex_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex * gsl_matrix_complex_alloc_from_block ( gsl_block_complex * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_complex_alloc_from_block( b : pgsl_block_complex; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex * gsl_matrix_complex_alloc_from_matrix ( gsl_matrix_complex * b , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_alloc_from_matrix( b : pgsl_matrix_complex; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_alloc_row_from_matrix ( gsl_matrix_complex * m , const size_t i );
function gsl_vector_complex_alloc_row_from_matrix( m : pgsl_matrix_complex; const i : size_t ) : pgsl_vector_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_alloc_col_from_matrix ( gsl_matrix_complex * m , const size_t j );
function gsl_vector_complex_alloc_col_from_matrix( m : pgsl_matrix_complex; const j : size_t ) : pgsl_vector_complex ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_free ( gsl_matrix_complex * m );
procedure gsl_matrix_complex_free( m : pgsl_matrix_complex ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_view gsl_matrix_complex_submatrix ( gsl_matrix_complex * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_submatrix( m : pgsl_matrix_complex; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_matrix_complex_row ( gsl_matrix_complex * m , const size_t i );
function gsl_matrix_complex_row( m : pgsl_matrix_complex; const i : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_matrix_complex_column ( gsl_matrix_complex * m , const size_t j );
function gsl_matrix_complex_column( m : pgsl_matrix_complex; const j : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_matrix_complex_diagonal ( gsl_matrix_complex * m );
function gsl_matrix_complex_diagonal( m : pgsl_matrix_complex ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_matrix_complex_subdiagonal ( gsl_matrix_complex * m , const size_t k );
function gsl_matrix_complex_subdiagonal( m : pgsl_matrix_complex; const k : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_matrix_complex_superdiagonal ( gsl_matrix_complex * m , const size_t k );
function gsl_matrix_complex_superdiagonal( m : pgsl_matrix_complex; const k : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_view gsl_matrix_complex_view_array ( double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_view_array( base : pdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_view gsl_matrix_complex_view_array_with_tda ( double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_view_array_with_tda( base : pdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_view gsl_matrix_complex_view_vector ( gsl_vector_complex * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_view_vector( v : pgsl_vector_complex; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_view gsl_matrix_complex_view_vector_with_tda ( gsl_vector_complex * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_view_vector_with_tda( v : pgsl_vector_complex; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_const_view gsl_matrix_complex_const_submatrix ( const gsl_matrix_complex * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_const_submatrix( const m : pgsl_matrix_complex; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_matrix_complex_const_row ( const gsl_matrix_complex * m , const size_t i );
function gsl_matrix_complex_const_row( const m : pgsl_matrix_complex; const i : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_matrix_complex_const_column ( const gsl_matrix_complex * m , const size_t j );
function gsl_matrix_complex_const_column( const m : pgsl_matrix_complex; const j : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_matrix_complex_const_diagonal ( const gsl_matrix_complex * m );
function gsl_matrix_complex_const_diagonal( const m : pgsl_matrix_complex ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_matrix_complex_const_subdiagonal ( const gsl_matrix_complex * m , const size_t k );
function gsl_matrix_complex_const_subdiagonal( const m : pgsl_matrix_complex; const k : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_matrix_complex_const_superdiagonal ( const gsl_matrix_complex * m , const size_t k );
function gsl_matrix_complex_const_superdiagonal( const m : pgsl_matrix_complex; const k : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_array ( const double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_const_view_array( const base : pdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_array_with_tda ( const double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_const_view_array_with_tda( const base : pdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_vector ( const gsl_vector_complex * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_const_view_vector( const v : pgsl_vector_complex; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_vector_with_tda ( const gsl_vector_complex * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_const_view_vector_with_tda( const v : pgsl_vector_complex; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_matrix_complex_get ( const gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_get( const m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : gsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_set ( gsl_matrix_complex * m , const size_t i , const size_t j , const gsl_complex x );
procedure gsl_matrix_complex_set( m : pgsl_matrix_complex; const i : size_t; const j : size_t; const x : gsl_complex ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex * gsl_matrix_complex_ptr ( gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_ptr( m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : pgsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex * gsl_matrix_complex_const_ptr ( const gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_const_ptr( const m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : pgsl_complex; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_set_zero ( gsl_matrix_complex * m );
procedure gsl_matrix_complex_set_zero( m : pgsl_matrix_complex ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_set_identity ( gsl_matrix_complex * m );
procedure gsl_matrix_complex_set_identity( m : pgsl_matrix_complex ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_set_all ( gsl_matrix_complex * m , gsl_complex x );
procedure gsl_matrix_complex_set_all( m : pgsl_matrix_complex; x : gsl_complex ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_fread ( FILE * stream , gsl_matrix_complex * m );
function gsl_matrix_complex_fread( stream : pFILE; m : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_fwrite ( FILE * stream , const gsl_matrix_complex * m );
function gsl_matrix_complex_fwrite( stream : pFILE; const m : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_fscanf ( FILE * stream , gsl_matrix_complex * m );
function gsl_matrix_complex_fscanf( stream : pFILE; m : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_fprintf ( FILE * stream , const gsl_matrix_complex * m , const char * format );
function gsl_matrix_complex_fprintf( stream : pFILE; const m : pgsl_matrix_complex; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_memcpy ( gsl_matrix_complex * dest , const gsl_matrix_complex * src );
function gsl_matrix_complex_memcpy( dest : pgsl_matrix_complex; const src : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_swap ( gsl_matrix_complex * m1 , gsl_matrix_complex * m2 );
function gsl_matrix_complex_swap( m1 : pgsl_matrix_complex; m2 : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_swap_rows ( gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_swap_rows( m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_swap_columns ( gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_swap_columns( m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_swap_rowcol ( gsl_matrix_complex * m , const size_t i , const size_t j );
function gsl_matrix_complex_swap_rowcol( m : pgsl_matrix_complex; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_transpose ( gsl_matrix_complex * m );
function gsl_matrix_complex_transpose( m : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_transpose_memcpy ( gsl_matrix_complex * dest , const gsl_matrix_complex * src );
function gsl_matrix_complex_transpose_memcpy( dest : pgsl_matrix_complex; const src : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_isnull ( const gsl_matrix_complex * m );
function gsl_matrix_complex_isnull( const m : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_add ( gsl_matrix_complex * a , const gsl_matrix_complex * b );
function gsl_matrix_complex_add( a : pgsl_matrix_complex; const b : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_sub ( gsl_matrix_complex * a , const gsl_matrix_complex * b );
function gsl_matrix_complex_sub( a : pgsl_matrix_complex; const b : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_mul_elements ( gsl_matrix_complex * a , const gsl_matrix_complex * b );
function gsl_matrix_complex_mul_elements( a : pgsl_matrix_complex; const b : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_div_elements ( gsl_matrix_complex * a , const gsl_matrix_complex * b );
function gsl_matrix_complex_div_elements( a : pgsl_matrix_complex; const b : pgsl_matrix_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_scale ( gsl_matrix_complex * a , const gsl_complex x );
function gsl_matrix_complex_scale( a : pgsl_matrix_complex; const x : gsl_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_add_constant ( gsl_matrix_complex * a , const gsl_complex x );
function gsl_matrix_complex_add_constant( a : pgsl_matrix_complex; const x : gsl_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_add_diagonal ( gsl_matrix_complex * a , const gsl_complex x );
function gsl_matrix_complex_add_diagonal( a : pgsl_matrix_complex; const x : gsl_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_get_row ( gsl_vector_complex * v , const gsl_matrix_complex * m , const size_t i );
function gsl_matrix_complex_get_row( v : pgsl_vector_complex; const m : pgsl_matrix_complex; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_get_col ( gsl_vector_complex * v , const gsl_matrix_complex * m , const size_t j );
function gsl_matrix_complex_get_col( v : pgsl_vector_complex; const m : pgsl_matrix_complex; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_set_row ( gsl_matrix_complex * m , const size_t i , const gsl_vector_complex * v );
function gsl_matrix_complex_set_row( m : pgsl_matrix_complex; const i : size_t; const v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_set_col ( gsl_matrix_complex * m , const size_t j , const gsl_vector_complex * v );
function gsl_matrix_complex_set_col( m : pgsl_matrix_complex; const j : size_t; const v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;

//gsl_matrix_complex_float.h
//GSL_EXPORT gsl_matrix_complex_float * gsl_matrix_complex_float_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_float * gsl_matrix_complex_float_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_float * gsl_matrix_complex_float_alloc_from_block ( gsl_block_complex_float * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_complex_float_alloc_from_block( b : pgsl_block_complex_float; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_float * gsl_matrix_complex_float_alloc_from_matrix ( gsl_matrix_complex_float * b , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_alloc_from_matrix( b : pgsl_matrix_complex_float; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_alloc_row_from_matrix ( gsl_matrix_complex_float * m , const size_t i );
function gsl_vector_complex_float_alloc_row_from_matrix( m : pgsl_matrix_complex_float; const i : size_t ) : pgsl_vector_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_alloc_col_from_matrix ( gsl_matrix_complex_float * m , const size_t j );
function gsl_vector_complex_float_alloc_col_from_matrix( m : pgsl_matrix_complex_float; const j : size_t ) : pgsl_vector_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_float_free ( gsl_matrix_complex_float * m );
procedure gsl_matrix_complex_float_free( m : pgsl_matrix_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_view gsl_matrix_complex_float_submatrix ( gsl_matrix_complex_float * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_submatrix( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_matrix_complex_float_row ( gsl_matrix_complex_float * m , const size_t i );
function gsl_matrix_complex_float_row( m : pgsl_matrix_complex_float; const i : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_matrix_complex_float_column ( gsl_matrix_complex_float * m , const size_t j );
function gsl_matrix_complex_float_column( m : pgsl_matrix_complex_float; const j : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_matrix_complex_float_diagonal ( gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_diagonal( m : pgsl_matrix_complex_float ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_matrix_complex_float_subdiagonal ( gsl_matrix_complex_float * m , const size_t k );
function gsl_matrix_complex_float_subdiagonal( m : pgsl_matrix_complex_float; const k : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_matrix_complex_float_superdiagonal ( gsl_matrix_complex_float * m , const size_t k );
function gsl_matrix_complex_float_superdiagonal( m : pgsl_matrix_complex_float; const k : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_array ( float * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_view_array( base : pfloat; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_array_with_tda ( float * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_float_view_array_with_tda( base : pfloat; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_vector ( gsl_vector_complex_float * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_view_vector( v : pgsl_vector_complex_float; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_vector_with_tda ( gsl_vector_complex_float * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_float_view_vector_with_tda( v : pgsl_vector_complex_float; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_submatrix ( const gsl_matrix_complex_float * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_const_submatrix( const m : pgsl_matrix_complex_float; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_row ( const gsl_matrix_complex_float * m , const size_t i );
function gsl_matrix_complex_float_const_row( const m : pgsl_matrix_complex_float; const i : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_column ( const gsl_matrix_complex_float * m , const size_t j );
function gsl_matrix_complex_float_const_column( const m : pgsl_matrix_complex_float; const j : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_diagonal ( const gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_const_diagonal( const m : pgsl_matrix_complex_float ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_subdiagonal ( const gsl_matrix_complex_float * m , const size_t k );
function gsl_matrix_complex_float_const_subdiagonal( const m : pgsl_matrix_complex_float; const k : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_superdiagonal ( const gsl_matrix_complex_float * m , const size_t k );
function gsl_matrix_complex_float_const_superdiagonal( const m : pgsl_matrix_complex_float; const k : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_view_array ( const float * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_const_view_array( const base : pfloat; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_view_array_with_tda ( const float * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_float_const_view_array_with_tda( const base : pfloat; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_view_vector ( const gsl_vector_complex_float * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_float_const_view_vector( const v : pgsl_vector_complex_float; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_view_vector_with_tda ( const gsl_vector_complex_float * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_float_const_view_vector_with_tda( const v : pgsl_vector_complex_float; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_float gsl_matrix_complex_float_get ( const gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_get( const m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : gsl_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_float_set ( gsl_matrix_complex_float * m , const size_t i , const size_t j , const gsl_complex_float x );
procedure gsl_matrix_complex_float_set( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t; const x : gsl_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_float * gsl_matrix_complex_float_ptr ( gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_ptr( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : pgsl_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex_float * gsl_matrix_complex_float_const_ptr ( const gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_const_ptr( const m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : pgsl_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_float_set_zero ( gsl_matrix_complex_float * m );
procedure gsl_matrix_complex_float_set_zero( m : pgsl_matrix_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_float_set_identity ( gsl_matrix_complex_float * m );
procedure gsl_matrix_complex_float_set_identity( m : pgsl_matrix_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_float_set_all ( gsl_matrix_complex_float * m , gsl_complex_float x );
procedure gsl_matrix_complex_float_set_all( m : pgsl_matrix_complex_float; x : gsl_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_fread ( FILE * stream , gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_fread( stream : pFILE; m : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_fwrite ( FILE * stream , const gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_fwrite( stream : pFILE; const m : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_fscanf ( FILE * stream , gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_fscanf( stream : pFILE; m : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_fprintf ( FILE * stream , const gsl_matrix_complex_float * m , const char * format );
function gsl_matrix_complex_float_fprintf( stream : pFILE; const m : pgsl_matrix_complex_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_memcpy ( gsl_matrix_complex_float * dest , const gsl_matrix_complex_float * src );
function gsl_matrix_complex_float_memcpy( dest : pgsl_matrix_complex_float; const src : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_swap ( gsl_matrix_complex_float * m1 , gsl_matrix_complex_float * m2 );
function gsl_matrix_complex_float_swap( m1 : pgsl_matrix_complex_float; m2 : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_swap_rows ( gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_swap_rows( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_swap_columns ( gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_swap_columns( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_swap_rowcol ( gsl_matrix_complex_float * m , const size_t i , const size_t j );
function gsl_matrix_complex_float_swap_rowcol( m : pgsl_matrix_complex_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_transpose ( gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_transpose( m : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_transpose_memcpy ( gsl_matrix_complex_float * dest , const gsl_matrix_complex_float * src );
function gsl_matrix_complex_float_transpose_memcpy( dest : pgsl_matrix_complex_float; const src : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_isnull ( const gsl_matrix_complex_float * m );
function gsl_matrix_complex_float_isnull( const m : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_add ( gsl_matrix_complex_float * a , const gsl_matrix_complex_float * b );
function gsl_matrix_complex_float_add( a : pgsl_matrix_complex_float; const b : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_sub ( gsl_matrix_complex_float * a , const gsl_matrix_complex_float * b );
function gsl_matrix_complex_float_sub( a : pgsl_matrix_complex_float; const b : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_mul_elements ( gsl_matrix_complex_float * a , const gsl_matrix_complex_float * b );
function gsl_matrix_complex_float_mul_elements( a : pgsl_matrix_complex_float; const b : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_div_elements ( gsl_matrix_complex_float * a , const gsl_matrix_complex_float * b );
function gsl_matrix_complex_float_div_elements( a : pgsl_matrix_complex_float; const b : pgsl_matrix_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_scale ( gsl_matrix_complex_float * a , const gsl_complex_float x );
function gsl_matrix_complex_float_scale( a : pgsl_matrix_complex_float; const x : gsl_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_add_constant ( gsl_matrix_complex_float * a , const gsl_complex_float x );
function gsl_matrix_complex_float_add_constant( a : pgsl_matrix_complex_float; const x : gsl_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_add_diagonal ( gsl_matrix_complex_float * a , const gsl_complex_float x );
function gsl_matrix_complex_float_add_diagonal( a : pgsl_matrix_complex_float; const x : gsl_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_get_row ( gsl_vector_complex_float * v , const gsl_matrix_complex_float * m , const size_t i );
function gsl_matrix_complex_float_get_row( v : pgsl_vector_complex_float; const m : pgsl_matrix_complex_float; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_get_col ( gsl_vector_complex_float * v , const gsl_matrix_complex_float * m , const size_t j );
function gsl_matrix_complex_float_get_col( v : pgsl_vector_complex_float; const m : pgsl_matrix_complex_float; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_set_row ( gsl_matrix_complex_float * m , const size_t i , const gsl_vector_complex_float * v );
function gsl_matrix_complex_float_set_row( m : pgsl_matrix_complex_float; const i : size_t; const v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_float_set_col ( gsl_matrix_complex_float * m , const size_t j , const gsl_vector_complex_float * v );
function gsl_matrix_complex_float_set_col( m : pgsl_matrix_complex_float; const j : size_t; const v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;

//gsl_matrix_complex_long_double.h
//GSL_EXPORT gsl_matrix_complex_long_double * gsl_matrix_complex_long_double_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_long_double * gsl_matrix_complex_long_double_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_long_double * gsl_matrix_complex_long_double_alloc_from_block ( gsl_block_complex_long_double * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_complex_long_double_alloc_from_block( b : pgsl_block_complex_long_double; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_complex_long_double * gsl_matrix_complex_long_double_alloc_from_matrix ( gsl_matrix_complex_long_double * b , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_alloc_from_matrix( b : pgsl_matrix_complex_long_double; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_alloc_row_from_matrix ( gsl_matrix_complex_long_double * m , const size_t i );
function gsl_vector_complex_long_double_alloc_row_from_matrix( m : pgsl_matrix_complex_long_double; const i : size_t ) : pgsl_vector_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_alloc_col_from_matrix ( gsl_matrix_complex_long_double * m , const size_t j );
function gsl_vector_complex_long_double_alloc_col_from_matrix( m : pgsl_matrix_complex_long_double; const j : size_t ) : pgsl_vector_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_long_double_free ( gsl_matrix_complex_long_double * m );
procedure gsl_matrix_complex_long_double_free( m : pgsl_matrix_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_view gsl_matrix_complex_long_double_submatrix ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_submatrix( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_matrix_complex_long_double_row ( gsl_matrix_complex_long_double * m , const size_t i );
function gsl_matrix_complex_long_double_row( m : pgsl_matrix_complex_long_double; const i : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_matrix_complex_long_double_column ( gsl_matrix_complex_long_double * m , const size_t j );
function gsl_matrix_complex_long_double_column( m : pgsl_matrix_complex_long_double; const j : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_matrix_complex_long_double_diagonal ( gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_diagonal( m : pgsl_matrix_complex_long_double ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_matrix_complex_long_double_subdiagonal ( gsl_matrix_complex_long_double * m , const size_t k );
function gsl_matrix_complex_long_double_subdiagonal( m : pgsl_matrix_complex_long_double; const k : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_matrix_complex_long_double_superdiagonal ( gsl_matrix_complex_long_double * m , const size_t k );
function gsl_matrix_complex_long_double_superdiagonal( m : pgsl_matrix_complex_long_double; const k : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_view gsl_matrix_complex_long_double_view_array ( long double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_view_array( base : plongdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_view gsl_matrix_complex_long_double_view_array_with_tda ( long double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_long_double_view_array_with_tda( base : plongdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_view gsl_matrix_complex_long_double_view_vector ( gsl_vector_complex_long_double * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_view_vector( v : pgsl_vector_complex_long_double; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_view gsl_matrix_complex_long_double_view_vector_with_tda ( gsl_vector_complex_long_double * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_long_double_view_vector_with_tda( v : pgsl_vector_complex_long_double; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_const_view gsl_matrix_complex_long_double_const_submatrix ( const gsl_matrix_complex_long_double * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_const_submatrix( const m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_matrix_complex_long_double_const_row ( const gsl_matrix_complex_long_double * m , const size_t i );
function gsl_matrix_complex_long_double_const_row( const m : pgsl_matrix_complex_long_double; const i : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_matrix_complex_long_double_const_column ( const gsl_matrix_complex_long_double * m , const size_t j );
function gsl_matrix_complex_long_double_const_column( const m : pgsl_matrix_complex_long_double; const j : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_matrix_complex_long_double_const_diagonal ( const gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_const_diagonal( const m : pgsl_matrix_complex_long_double ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_matrix_complex_long_double_const_subdiagonal ( const gsl_matrix_complex_long_double * m , const size_t k );
function gsl_matrix_complex_long_double_const_subdiagonal( const m : pgsl_matrix_complex_long_double; const k : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_matrix_complex_long_double_const_superdiagonal ( const gsl_matrix_complex_long_double * m , const size_t k );
function gsl_matrix_complex_long_double_const_superdiagonal( const m : pgsl_matrix_complex_long_double; const k : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_const_view gsl_matrix_complex_long_double_const_view_array ( const long double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_const_view_array( const base : plongdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_const_view gsl_matrix_complex_long_double_const_view_array_with_tda ( const long double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_long_double_const_view_array_with_tda( const base : plongdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_const_view gsl_matrix_complex_long_double_const_view_vector ( const gsl_vector_complex_long_double * v , const size_t n1 , const size_t n2 );
function gsl_matrix_complex_long_double_const_view_vector( const v : pgsl_vector_complex_long_double; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_complex_long_double_const_view gsl_matrix_complex_long_double_const_view_vector_with_tda ( const gsl_vector_complex_long_double * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_complex_long_double_const_view_vector_with_tda( const v : pgsl_vector_complex_long_double; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_long_double gsl_matrix_complex_long_double_get ( const gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_get( const m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : gsl_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_long_double_set ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j , const gsl_complex_long_double x );
procedure gsl_matrix_complex_long_double_set( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t; const x : gsl_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_long_double * gsl_matrix_complex_long_double_ptr ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_ptr( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : pgsl_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex_long_double * gsl_matrix_complex_long_double_const_ptr ( const gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_const_ptr( const m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : pgsl_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_long_double_set_zero ( gsl_matrix_complex_long_double * m );
procedure gsl_matrix_complex_long_double_set_zero( m : pgsl_matrix_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_long_double_set_identity ( gsl_matrix_complex_long_double * m );
procedure gsl_matrix_complex_long_double_set_identity( m : pgsl_matrix_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_complex_long_double_set_all ( gsl_matrix_complex_long_double * m , gsl_complex_long_double x );
procedure gsl_matrix_complex_long_double_set_all( m : pgsl_matrix_complex_long_double; x : gsl_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_fread ( FILE * stream , gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_fread( stream : pFILE; m : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_fwrite ( FILE * stream , const gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_fwrite( stream : pFILE; const m : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_fscanf ( FILE * stream , gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_fscanf( stream : pFILE; m : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_fprintf ( FILE * stream , const gsl_matrix_complex_long_double * m , const char * format );
function gsl_matrix_complex_long_double_fprintf( stream : pFILE; const m : pgsl_matrix_complex_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_memcpy ( gsl_matrix_complex_long_double * dest , const gsl_matrix_complex_long_double * src );
function gsl_matrix_complex_long_double_memcpy( dest : pgsl_matrix_complex_long_double; const src : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_swap ( gsl_matrix_complex_long_double * m1 , gsl_matrix_complex_long_double * m2 );
function gsl_matrix_complex_long_double_swap( m1 : pgsl_matrix_complex_long_double; m2 : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_swap_rows ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_swap_rows( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_swap_columns ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_swap_columns( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_swap_rowcol ( gsl_matrix_complex_long_double * m , const size_t i , const size_t j );
function gsl_matrix_complex_long_double_swap_rowcol( m : pgsl_matrix_complex_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_transpose ( gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_transpose( m : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_transpose_memcpy ( gsl_matrix_complex_long_double * dest , const gsl_matrix_complex_long_double * src );
function gsl_matrix_complex_long_double_transpose_memcpy( dest : pgsl_matrix_complex_long_double; const src : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_isnull ( const gsl_matrix_complex_long_double * m );
function gsl_matrix_complex_long_double_isnull( const m : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_add ( gsl_matrix_complex_long_double * a , const gsl_matrix_complex_long_double * b );
function gsl_matrix_complex_long_double_add( a : pgsl_matrix_complex_long_double; const b : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_sub ( gsl_matrix_complex_long_double * a , const gsl_matrix_complex_long_double * b );
function gsl_matrix_complex_long_double_sub( a : pgsl_matrix_complex_long_double; const b : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_mul_elements ( gsl_matrix_complex_long_double * a , const gsl_matrix_complex_long_double * b );
function gsl_matrix_complex_long_double_mul_elements( a : pgsl_matrix_complex_long_double; const b : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_div_elements ( gsl_matrix_complex_long_double * a , const gsl_matrix_complex_long_double * b );
function gsl_matrix_complex_long_double_div_elements( a : pgsl_matrix_complex_long_double; const b : pgsl_matrix_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_scale ( gsl_matrix_complex_long_double * a , const gsl_complex_long_double x );
function gsl_matrix_complex_long_double_scale( a : pgsl_matrix_complex_long_double; const x : gsl_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_add_constant ( gsl_matrix_complex_long_double * a , const gsl_complex_long_double x );
function gsl_matrix_complex_long_double_add_constant( a : pgsl_matrix_complex_long_double; const x : gsl_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_add_diagonal ( gsl_matrix_complex_long_double * a , const gsl_complex_long_double x );
function gsl_matrix_complex_long_double_add_diagonal( a : pgsl_matrix_complex_long_double; const x : gsl_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_get_row ( gsl_vector_complex_long_double * v , const gsl_matrix_complex_long_double * m , const size_t i );
function gsl_matrix_complex_long_double_get_row( v : pgsl_vector_complex_long_double; const m : pgsl_matrix_complex_long_double; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_get_col ( gsl_vector_complex_long_double * v , const gsl_matrix_complex_long_double * m , const size_t j );
function gsl_matrix_complex_long_double_get_col( v : pgsl_vector_complex_long_double; const m : pgsl_matrix_complex_long_double; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_set_row ( gsl_matrix_complex_long_double * m , const size_t i , const gsl_vector_complex_long_double * v );
function gsl_matrix_complex_long_double_set_row( m : pgsl_matrix_complex_long_double; const i : size_t; const v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_complex_long_double_set_col ( gsl_matrix_complex_long_double * m , const size_t j , const gsl_vector_complex_long_double * v );
function gsl_matrix_complex_long_double_set_col( m : pgsl_matrix_complex_long_double; const j : size_t; const v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;

//gsl_matrix_double.h
//GSL_EXPORT gsl_matrix * gsl_matrix_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix * gsl_matrix_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix * gsl_matrix_alloc_from_block ( gsl_block * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_alloc_from_block( b : pgsl_block; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix * gsl_matrix_alloc_from_matrix ( gsl_matrix * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_alloc_from_matrix( m : pgsl_matrix; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_vector_alloc_row_from_matrix ( gsl_matrix * m , const size_t i );
function gsl_vector_alloc_row_from_matrix( m : pgsl_matrix; const i : size_t ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_vector_alloc_col_from_matrix ( gsl_matrix * m , const size_t j );
function gsl_vector_alloc_col_from_matrix( m : pgsl_matrix; const j : size_t ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_free ( gsl_matrix * m );
procedure gsl_matrix_free( m : pgsl_matrix ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_view gsl_matrix_submatrix ( gsl_matrix * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_submatrix( m : pgsl_matrix; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_matrix_row ( gsl_matrix * m , const size_t i );
function gsl_matrix_row( m : pgsl_matrix; const i : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_matrix_column ( gsl_matrix * m , const size_t j );
function gsl_matrix_column( m : pgsl_matrix; const j : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_matrix_diagonal ( gsl_matrix * m );
function gsl_matrix_diagonal( m : pgsl_matrix ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_matrix_subdiagonal ( gsl_matrix * m , const size_t k );
function gsl_matrix_subdiagonal( m : pgsl_matrix; const k : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_matrix_superdiagonal ( gsl_matrix * m , const size_t k );
function gsl_matrix_superdiagonal( m : pgsl_matrix; const k : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_view gsl_matrix_view_array ( double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_view_array( base : pdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_view gsl_matrix_view_array_with_tda ( double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_view_array_with_tda( base : pdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_view gsl_matrix_view_vector ( gsl_vector * v , const size_t n1 , const size_t n2 );
function gsl_matrix_view_vector( v : pgsl_vector; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_view gsl_matrix_view_vector_with_tda ( gsl_vector * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_view_vector_with_tda( v : pgsl_vector; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_const_view gsl_matrix_const_submatrix ( const gsl_matrix * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_const_submatrix( const m : pgsl_matrix; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_matrix_const_row ( const gsl_matrix * m , const size_t i );
function gsl_matrix_const_row( const m : pgsl_matrix; const i : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_matrix_const_column ( const gsl_matrix * m , const size_t j );
function gsl_matrix_const_column( const m : pgsl_matrix; const j : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_matrix_const_diagonal ( const gsl_matrix * m );
function gsl_matrix_const_diagonal( const m : pgsl_matrix ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_matrix_const_subdiagonal ( const gsl_matrix * m , const size_t k );
function gsl_matrix_const_subdiagonal( const m : pgsl_matrix; const k : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_matrix_const_superdiagonal ( const gsl_matrix * m , const size_t k );
function gsl_matrix_const_superdiagonal( const m : pgsl_matrix; const k : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_const_view gsl_matrix_const_view_array ( const double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_const_view_array( const base : pdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_const_view gsl_matrix_const_view_array_with_tda ( const double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_const_view_array_with_tda( const base : pdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_const_view gsl_matrix_const_view_vector ( const gsl_vector * v , const size_t n1 , const size_t n2 );
function gsl_matrix_const_view_vector( const v : pgsl_vector; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_const_view gsl_matrix_const_view_vector_with_tda ( const gsl_vector * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_const_view_vector_with_tda( const v : pgsl_vector; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_matrix_get ( const gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_get( const m : pgsl_matrix; const i : size_t; const j : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_set ( gsl_matrix * m , const size_t i , const size_t j , const double x );
procedure gsl_matrix_set( m : pgsl_matrix; const i : size_t; const j : size_t; const x : double ); cdecl; external gsl_dll;
//GSL_EXPORT double * gsl_matrix_ptr ( gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_ptr( m : pgsl_matrix; const i : size_t; const j : size_t ) : pdouble; cdecl; external gsl_dll;
//GSL_EXPORT const double * gsl_matrix_const_ptr ( const gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_const_ptr( const m : pgsl_matrix; const i : size_t; const j : size_t ) : pdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_set_zero ( gsl_matrix * m );
procedure gsl_matrix_set_zero( m : pgsl_matrix ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_set_identity ( gsl_matrix * m );
procedure gsl_matrix_set_identity( m : pgsl_matrix ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_set_all ( gsl_matrix * m , double x );
procedure gsl_matrix_set_all( m : pgsl_matrix; x : double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_fread ( FILE * stream , gsl_matrix * m );
function gsl_matrix_fread( stream : pFILE; m : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_fwrite ( FILE * stream , const gsl_matrix * m );
function gsl_matrix_fwrite( stream : pFILE; const m : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_fscanf ( FILE * stream , gsl_matrix * m );
function gsl_matrix_fscanf( stream : pFILE; m : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_fprintf ( FILE * stream , const gsl_matrix * m , const char * format );
function gsl_matrix_fprintf( stream : pFILE; const m : pgsl_matrix; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_memcpy ( gsl_matrix * dest , const gsl_matrix * src );
function gsl_matrix_memcpy( dest : pgsl_matrix; const src : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_swap ( gsl_matrix * m1 , gsl_matrix * m2 );
function gsl_matrix_swap( m1 : pgsl_matrix; m2 : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_swap_rows ( gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_swap_rows( m : pgsl_matrix; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_swap_columns ( gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_swap_columns( m : pgsl_matrix; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_swap_rowcol ( gsl_matrix * m , const size_t i , const size_t j );
function gsl_matrix_swap_rowcol( m : pgsl_matrix; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_transpose ( gsl_matrix * m );
function gsl_matrix_transpose( m : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_transpose_memcpy ( gsl_matrix * dest , const gsl_matrix * src );
function gsl_matrix_transpose_memcpy( dest : pgsl_matrix; const src : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_matrix_max ( const gsl_matrix * m );
function gsl_matrix_max( const m : pgsl_matrix ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_matrix_min ( const gsl_matrix * m );
function gsl_matrix_min( const m : pgsl_matrix ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_minmax ( const gsl_matrix * m , double * min_out , double * max_out );
procedure gsl_matrix_minmax( const m : pgsl_matrix; min_out : pdouble; max_out : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_max_index ( const gsl_matrix * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_max_index( const m : pgsl_matrix; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_min_index ( const gsl_matrix * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_min_index( const m : pgsl_matrix; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_minmax_index ( const gsl_matrix * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_minmax_index( const m : pgsl_matrix; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_isnull ( const gsl_matrix * m );
function gsl_matrix_isnull( const m : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_add ( gsl_matrix * a , const gsl_matrix * b );
function gsl_matrix_add( a : pgsl_matrix; const b : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_sub ( gsl_matrix * a , const gsl_matrix * b );
function gsl_matrix_sub( a : pgsl_matrix; const b : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_mul_elements ( gsl_matrix * a , const gsl_matrix * b );
function gsl_matrix_mul_elements( a : pgsl_matrix; const b : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_div_elements ( gsl_matrix * a , const gsl_matrix * b );
function gsl_matrix_div_elements( a : pgsl_matrix; const b : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_scale ( gsl_matrix * a , const double x );
function gsl_matrix_scale( a : pgsl_matrix; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_add_constant ( gsl_matrix * a , const double x );
function gsl_matrix_add_constant( a : pgsl_matrix; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_add_diagonal ( gsl_matrix * a , const double x );
function gsl_matrix_add_diagonal( a : pgsl_matrix; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_get_row ( gsl_vector * v , const gsl_matrix * m , const size_t i );
function gsl_matrix_get_row( v : pgsl_vector; const m : pgsl_matrix; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_get_col ( gsl_vector * v , const gsl_matrix * m , const size_t j );
function gsl_matrix_get_col( v : pgsl_vector; const m : pgsl_matrix; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_set_row ( gsl_matrix * m , const size_t i , const gsl_vector * v );
function gsl_matrix_set_row( m : pgsl_matrix; const i : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_set_col ( gsl_matrix * m , const size_t j , const gsl_vector * v );
function gsl_matrix_set_col( m : pgsl_matrix; const j : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;

//gsl_matrix_float.h
//GSL_EXPORT gsl_matrix_float * gsl_matrix_float_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_float_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_float * gsl_matrix_float_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_float_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_float * gsl_matrix_float_alloc_from_block ( gsl_block_float * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_float_alloc_from_block( b : pgsl_block_float; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_float * gsl_matrix_float_alloc_from_matrix ( gsl_matrix_float * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_float_alloc_from_matrix( m : pgsl_matrix_float; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_float * gsl_vector_float_alloc_row_from_matrix ( gsl_matrix_float * m , const size_t i );
function gsl_vector_float_alloc_row_from_matrix( m : pgsl_matrix_float; const i : size_t ) : pgsl_vector_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_float * gsl_vector_float_alloc_col_from_matrix ( gsl_matrix_float * m , const size_t j );
function gsl_vector_float_alloc_col_from_matrix( m : pgsl_matrix_float; const j : size_t ) : pgsl_vector_float ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_free ( gsl_matrix_float * m );
procedure gsl_matrix_float_free( m : pgsl_matrix_float ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_view gsl_matrix_float_submatrix ( gsl_matrix_float * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_float_submatrix( m : pgsl_matrix_float; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_matrix_float_row ( gsl_matrix_float * m , const size_t i );
function gsl_matrix_float_row( m : pgsl_matrix_float; const i : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_matrix_float_column ( gsl_matrix_float * m , const size_t j );
function gsl_matrix_float_column( m : pgsl_matrix_float; const j : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_matrix_float_diagonal ( gsl_matrix_float * m );
function gsl_matrix_float_diagonal( m : pgsl_matrix_float ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_matrix_float_subdiagonal ( gsl_matrix_float * m , const size_t k );
function gsl_matrix_float_subdiagonal( m : pgsl_matrix_float; const k : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_matrix_float_superdiagonal ( gsl_matrix_float * m , const size_t k );
function gsl_matrix_float_superdiagonal( m : pgsl_matrix_float; const k : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_view gsl_matrix_float_view_array ( float * base , const size_t n1 , const size_t n2 );
function gsl_matrix_float_view_array( base : pfloat; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_view gsl_matrix_float_view_array_with_tda ( float * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_float_view_array_with_tda( base : pfloat; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_view gsl_matrix_float_view_vector ( gsl_vector_float * v , const size_t n1 , const size_t n2 );
function gsl_matrix_float_view_vector( v : pgsl_vector_float; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_view gsl_matrix_float_view_vector_with_tda ( gsl_vector_float * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_float_view_vector_with_tda( v : pgsl_vector_float; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_const_view gsl_matrix_float_const_submatrix ( const gsl_matrix_float * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_float_const_submatrix( const m : pgsl_matrix_float; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_matrix_float_const_row ( const gsl_matrix_float * m , const size_t i );
function gsl_matrix_float_const_row( const m : pgsl_matrix_float; const i : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_matrix_float_const_column ( const gsl_matrix_float * m , const size_t j );
function gsl_matrix_float_const_column( const m : pgsl_matrix_float; const j : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_matrix_float_const_diagonal ( const gsl_matrix_float * m );
function gsl_matrix_float_const_diagonal( const m : pgsl_matrix_float ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_matrix_float_const_subdiagonal ( const gsl_matrix_float * m , const size_t k );
function gsl_matrix_float_const_subdiagonal( const m : pgsl_matrix_float; const k : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_matrix_float_const_superdiagonal ( const gsl_matrix_float * m , const size_t k );
function gsl_matrix_float_const_superdiagonal( const m : pgsl_matrix_float; const k : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_const_view gsl_matrix_float_const_view_array ( const float * base , const size_t n1 , const size_t n2 );
function gsl_matrix_float_const_view_array( const base : pfloat; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_const_view gsl_matrix_float_const_view_array_with_tda ( const float * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_float_const_view_array_with_tda( const base : pfloat; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_const_view gsl_matrix_float_const_view_vector ( const gsl_vector_float * v , const size_t n1 , const size_t n2 );
function gsl_matrix_float_const_view_vector( const v : pgsl_vector_float; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_float_const_view gsl_matrix_float_const_view_vector_with_tda ( const gsl_vector_float * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_float_const_view_vector_with_tda( const v : pgsl_vector_float; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_matrix_float_get ( const gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_get( const m : pgsl_matrix_float; const i : size_t; const j : size_t ) : float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_set ( gsl_matrix_float * m , const size_t i , const size_t j , const float x );
procedure gsl_matrix_float_set( m : pgsl_matrix_float; const i : size_t; const j : size_t; const x : float ); cdecl; external gsl_dll;
//GSL_EXPORT float * gsl_matrix_float_ptr ( gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_ptr( m : pgsl_matrix_float; const i : size_t; const j : size_t ) : pfloat; cdecl; external gsl_dll;
//GSL_EXPORT const float * gsl_matrix_float_const_ptr ( const gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_const_ptr( const m : pgsl_matrix_float; const i : size_t; const j : size_t ) : pfloat; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_set_zero ( gsl_matrix_float * m );
procedure gsl_matrix_float_set_zero( m : pgsl_matrix_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_set_identity ( gsl_matrix_float * m );
procedure gsl_matrix_float_set_identity( m : pgsl_matrix_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_set_all ( gsl_matrix_float * m , float x );
procedure gsl_matrix_float_set_all( m : pgsl_matrix_float; x : float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_fread ( FILE * stream , gsl_matrix_float * m );
function gsl_matrix_float_fread( stream : pFILE; m : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_fwrite ( FILE * stream , const gsl_matrix_float * m );
function gsl_matrix_float_fwrite( stream : pFILE; const m : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_fscanf ( FILE * stream , gsl_matrix_float * m );
function gsl_matrix_float_fscanf( stream : pFILE; m : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_fprintf ( FILE * stream , const gsl_matrix_float * m , const char * format );
function gsl_matrix_float_fprintf( stream : pFILE; const m : pgsl_matrix_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_memcpy ( gsl_matrix_float * dest , const gsl_matrix_float * src );
function gsl_matrix_float_memcpy( dest : pgsl_matrix_float; const src : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_swap ( gsl_matrix_float * m1 , gsl_matrix_float * m2 );
function gsl_matrix_float_swap( m1 : pgsl_matrix_float; m2 : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_swap_rows ( gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_swap_rows( m : pgsl_matrix_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_swap_columns ( gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_swap_columns( m : pgsl_matrix_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_swap_rowcol ( gsl_matrix_float * m , const size_t i , const size_t j );
function gsl_matrix_float_swap_rowcol( m : pgsl_matrix_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_transpose ( gsl_matrix_float * m );
function gsl_matrix_float_transpose( m : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_transpose_memcpy ( gsl_matrix_float * dest , const gsl_matrix_float * src );
function gsl_matrix_float_transpose_memcpy( dest : pgsl_matrix_float; const src : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_matrix_float_max ( const gsl_matrix_float * m );
function gsl_matrix_float_max( const m : pgsl_matrix_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_matrix_float_min ( const gsl_matrix_float * m );
function gsl_matrix_float_min( const m : pgsl_matrix_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_minmax ( const gsl_matrix_float * m , float * min_out , float * max_out );
procedure gsl_matrix_float_minmax( const m : pgsl_matrix_float; min_out : pfloat; max_out : pfloat ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_max_index ( const gsl_matrix_float * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_float_max_index( const m : pgsl_matrix_float; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_min_index ( const gsl_matrix_float * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_float_min_index( const m : pgsl_matrix_float; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_float_minmax_index ( const gsl_matrix_float * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_float_minmax_index( const m : pgsl_matrix_float; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_isnull ( const gsl_matrix_float * m );
function gsl_matrix_float_isnull( const m : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_add ( gsl_matrix_float * a , const gsl_matrix_float * b );
function gsl_matrix_float_add( a : pgsl_matrix_float; const b : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_sub ( gsl_matrix_float * a , const gsl_matrix_float * b );
function gsl_matrix_float_sub( a : pgsl_matrix_float; const b : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_mul_elements ( gsl_matrix_float * a , const gsl_matrix_float * b );
function gsl_matrix_float_mul_elements( a : pgsl_matrix_float; const b : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_div_elements ( gsl_matrix_float * a , const gsl_matrix_float * b );
function gsl_matrix_float_div_elements( a : pgsl_matrix_float; const b : pgsl_matrix_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_scale ( gsl_matrix_float * a , const double x );
function gsl_matrix_float_scale( a : pgsl_matrix_float; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_add_constant ( gsl_matrix_float * a , const double x );
function gsl_matrix_float_add_constant( a : pgsl_matrix_float; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_add_diagonal ( gsl_matrix_float * a , const double x );
function gsl_matrix_float_add_diagonal( a : pgsl_matrix_float; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_get_row ( gsl_vector_float * v , const gsl_matrix_float * m , const size_t i );
function gsl_matrix_float_get_row( v : pgsl_vector_float; const m : pgsl_matrix_float; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_get_col ( gsl_vector_float * v , const gsl_matrix_float * m , const size_t j );
function gsl_matrix_float_get_col( v : pgsl_vector_float; const m : pgsl_matrix_float; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_set_row ( gsl_matrix_float * m , const size_t i , const gsl_vector_float * v );
function gsl_matrix_float_set_row( m : pgsl_matrix_float; const i : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_float_set_col ( gsl_matrix_float * m , const size_t j , const gsl_vector_float * v );
function gsl_matrix_float_set_col( m : pgsl_matrix_float; const j : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;

//gsl_matrix_int.h
//GSL_EXPORT gsl_matrix_int * gsl_matrix_int_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_int_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_int * gsl_matrix_int_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_int_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_int * gsl_matrix_int_alloc_from_block ( gsl_block_int * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_int_alloc_from_block( b : pgsl_block_int; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_int * gsl_matrix_int_alloc_from_matrix ( gsl_matrix_int * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_int_alloc_from_matrix( m : pgsl_matrix_int; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_int * gsl_vector_int_alloc_row_from_matrix ( gsl_matrix_int * m , const size_t i );
function gsl_vector_int_alloc_row_from_matrix( m : pgsl_matrix_int; const i : size_t ) : pgsl_vector_int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_int * gsl_vector_int_alloc_col_from_matrix ( gsl_matrix_int * m , const size_t j );
function gsl_vector_int_alloc_col_from_matrix( m : pgsl_matrix_int; const j : size_t ) : pgsl_vector_int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_free ( gsl_matrix_int * m );
procedure gsl_matrix_int_free( m : pgsl_matrix_int ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_view gsl_matrix_int_submatrix ( gsl_matrix_int * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_int_submatrix( m : pgsl_matrix_int; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_matrix_int_row ( gsl_matrix_int * m , const size_t i );
function gsl_matrix_int_row( m : pgsl_matrix_int; const i : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_matrix_int_column ( gsl_matrix_int * m , const size_t j );
function gsl_matrix_int_column( m : pgsl_matrix_int; const j : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_matrix_int_diagonal ( gsl_matrix_int * m );
function gsl_matrix_int_diagonal( m : pgsl_matrix_int ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_matrix_int_subdiagonal ( gsl_matrix_int * m , const size_t k );
function gsl_matrix_int_subdiagonal( m : pgsl_matrix_int; const k : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_matrix_int_superdiagonal ( gsl_matrix_int * m , const size_t k );
function gsl_matrix_int_superdiagonal( m : pgsl_matrix_int; const k : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_view gsl_matrix_int_view_array ( int * base , const size_t n1 , const size_t n2 );
function gsl_matrix_int_view_array( base : pint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_view gsl_matrix_int_view_array_with_tda ( int * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_int_view_array_with_tda( base : pint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_view gsl_matrix_int_view_vector ( gsl_vector_int * v , const size_t n1 , const size_t n2 );
function gsl_matrix_int_view_vector( v : pgsl_vector_int; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_view gsl_matrix_int_view_vector_with_tda ( gsl_vector_int * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_int_view_vector_with_tda( v : pgsl_vector_int; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_const_view gsl_matrix_int_const_submatrix ( const gsl_matrix_int * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_int_const_submatrix( const m : pgsl_matrix_int; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_matrix_int_const_row ( const gsl_matrix_int * m , const size_t i );
function gsl_matrix_int_const_row( const m : pgsl_matrix_int; const i : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_matrix_int_const_column ( const gsl_matrix_int * m , const size_t j );
function gsl_matrix_int_const_column( const m : pgsl_matrix_int; const j : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_matrix_int_const_diagonal ( const gsl_matrix_int * m );
function gsl_matrix_int_const_diagonal( const m : pgsl_matrix_int ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_matrix_int_const_subdiagonal ( const gsl_matrix_int * m , const size_t k );
function gsl_matrix_int_const_subdiagonal( const m : pgsl_matrix_int; const k : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_matrix_int_const_superdiagonal ( const gsl_matrix_int * m , const size_t k );
function gsl_matrix_int_const_superdiagonal( const m : pgsl_matrix_int; const k : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_const_view gsl_matrix_int_const_view_array ( const int * base , const size_t n1 , const size_t n2 );
function gsl_matrix_int_const_view_array( const base : pint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_const_view gsl_matrix_int_const_view_array_with_tda ( const int * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_int_const_view_array_with_tda( const base : pint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_const_view gsl_matrix_int_const_view_vector ( const gsl_vector_int * v , const size_t n1 , const size_t n2 );
function gsl_matrix_int_const_view_vector( const v : pgsl_vector_int; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_int_const_view gsl_matrix_int_const_view_vector_with_tda ( const gsl_vector_int * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_int_const_view_vector_with_tda( const v : pgsl_vector_int; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_get ( const gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_get( const m : pgsl_matrix_int; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_set ( gsl_matrix_int * m , const size_t i , const size_t j , const int x );
procedure gsl_matrix_int_set( m : pgsl_matrix_int; const i : size_t; const j : size_t; const x : int ); cdecl; external gsl_dll;
//GSL_EXPORT int * gsl_matrix_int_ptr ( gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_ptr( m : pgsl_matrix_int; const i : size_t; const j : size_t ) : pint; cdecl; external gsl_dll;
//GSL_EXPORT const int * gsl_matrix_int_const_ptr ( const gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_const_ptr( const m : pgsl_matrix_int; const i : size_t; const j : size_t ) : pint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_set_zero ( gsl_matrix_int * m );
procedure gsl_matrix_int_set_zero( m : pgsl_matrix_int ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_set_identity ( gsl_matrix_int * m );
procedure gsl_matrix_int_set_identity( m : pgsl_matrix_int ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_set_all ( gsl_matrix_int * m , int x );
procedure gsl_matrix_int_set_all( m : pgsl_matrix_int; x : int ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_fread ( FILE * stream , gsl_matrix_int * m );
function gsl_matrix_int_fread( stream : pFILE; m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_fwrite ( FILE * stream , const gsl_matrix_int * m );
function gsl_matrix_int_fwrite( stream : pFILE; const m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_fscanf ( FILE * stream , gsl_matrix_int * m );
function gsl_matrix_int_fscanf( stream : pFILE; m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_fprintf ( FILE * stream , const gsl_matrix_int * m , const char * format );
function gsl_matrix_int_fprintf( stream : pFILE; const m : pgsl_matrix_int; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_memcpy ( gsl_matrix_int * dest , const gsl_matrix_int * src );
function gsl_matrix_int_memcpy( dest : pgsl_matrix_int; const src : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_swap ( gsl_matrix_int * m1 , gsl_matrix_int * m2 );
function gsl_matrix_int_swap( m1 : pgsl_matrix_int; m2 : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_swap_rows ( gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_swap_rows( m : pgsl_matrix_int; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_swap_columns ( gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_swap_columns( m : pgsl_matrix_int; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_swap_rowcol ( gsl_matrix_int * m , const size_t i , const size_t j );
function gsl_matrix_int_swap_rowcol( m : pgsl_matrix_int; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_transpose ( gsl_matrix_int * m );
function gsl_matrix_int_transpose( m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_transpose_memcpy ( gsl_matrix_int * dest , const gsl_matrix_int * src );
function gsl_matrix_int_transpose_memcpy( dest : pgsl_matrix_int; const src : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_max ( const gsl_matrix_int * m );
function gsl_matrix_int_max( const m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_min ( const gsl_matrix_int * m );
function gsl_matrix_int_min( const m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_minmax ( const gsl_matrix_int * m , int * min_out , int * max_out );
procedure gsl_matrix_int_minmax( const m : pgsl_matrix_int; min_out : pint; max_out : pint ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_max_index ( const gsl_matrix_int * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_int_max_index( const m : pgsl_matrix_int; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_min_index ( const gsl_matrix_int * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_int_min_index( const m : pgsl_matrix_int; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_int_minmax_index ( const gsl_matrix_int * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_int_minmax_index( const m : pgsl_matrix_int; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_isnull ( const gsl_matrix_int * m );
function gsl_matrix_int_isnull( const m : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_add ( gsl_matrix_int * a , const gsl_matrix_int * b );
function gsl_matrix_int_add( a : pgsl_matrix_int; const b : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_sub ( gsl_matrix_int * a , const gsl_matrix_int * b );
function gsl_matrix_int_sub( a : pgsl_matrix_int; const b : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_mul_elements ( gsl_matrix_int * a , const gsl_matrix_int * b );
function gsl_matrix_int_mul_elements( a : pgsl_matrix_int; const b : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_div_elements ( gsl_matrix_int * a , const gsl_matrix_int * b );
function gsl_matrix_int_div_elements( a : pgsl_matrix_int; const b : pgsl_matrix_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_scale ( gsl_matrix_int * a , const double x );
function gsl_matrix_int_scale( a : pgsl_matrix_int; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_add_constant ( gsl_matrix_int * a , const double x );
function gsl_matrix_int_add_constant( a : pgsl_matrix_int; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_add_diagonal ( gsl_matrix_int * a , const double x );
function gsl_matrix_int_add_diagonal( a : pgsl_matrix_int; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_get_row ( gsl_vector_int * v , const gsl_matrix_int * m , const size_t i );
function gsl_matrix_int_get_row( v : pgsl_vector_int; const m : pgsl_matrix_int; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_get_col ( gsl_vector_int * v , const gsl_matrix_int * m , const size_t j );
function gsl_matrix_int_get_col( v : pgsl_vector_int; const m : pgsl_matrix_int; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_set_row ( gsl_matrix_int * m , const size_t i , const gsl_vector_int * v );
function gsl_matrix_int_set_row( m : pgsl_matrix_int; const i : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_int_set_col ( gsl_matrix_int * m , const size_t j , const gsl_vector_int * v );
function gsl_matrix_int_set_col( m : pgsl_matrix_int; const j : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;

//gsl_matrix_long.h
//GSL_EXPORT gsl_matrix_long * gsl_matrix_long_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_long_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long * gsl_matrix_long_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_long_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long * gsl_matrix_long_alloc_from_block ( gsl_block_long * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_long_alloc_from_block( b : pgsl_block_long; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_long ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long * gsl_matrix_long_alloc_from_matrix ( gsl_matrix_long * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_long_alloc_from_matrix( m : pgsl_matrix_long; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long * gsl_vector_long_alloc_row_from_matrix ( gsl_matrix_long * m , const size_t i );
function gsl_vector_long_alloc_row_from_matrix( m : pgsl_matrix_long; const i : size_t ) : pgsl_vector_long ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long * gsl_vector_long_alloc_col_from_matrix ( gsl_matrix_long * m , const size_t j );
function gsl_vector_long_alloc_col_from_matrix( m : pgsl_matrix_long; const j : size_t ) : pgsl_vector_long ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_free ( gsl_matrix_long * m );
procedure gsl_matrix_long_free( m : pgsl_matrix_long ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_view gsl_matrix_long_submatrix ( gsl_matrix_long * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_long_submatrix( m : pgsl_matrix_long; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_matrix_long_row ( gsl_matrix_long * m , const size_t i );
function gsl_matrix_long_row( m : pgsl_matrix_long; const i : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_matrix_long_column ( gsl_matrix_long * m , const size_t j );
function gsl_matrix_long_column( m : pgsl_matrix_long; const j : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_matrix_long_diagonal ( gsl_matrix_long * m );
function gsl_matrix_long_diagonal( m : pgsl_matrix_long ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_matrix_long_subdiagonal ( gsl_matrix_long * m , const size_t k );
function gsl_matrix_long_subdiagonal( m : pgsl_matrix_long; const k : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_matrix_long_superdiagonal ( gsl_matrix_long * m , const size_t k );
function gsl_matrix_long_superdiagonal( m : pgsl_matrix_long; const k : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_view gsl_matrix_long_view_array ( long * base , const size_t n1 , const size_t n2 );
function gsl_matrix_long_view_array( base : plong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_view gsl_matrix_long_view_array_with_tda ( long * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_view_array_with_tda( base : plong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_view gsl_matrix_long_view_vector ( gsl_vector_long * v , const size_t n1 , const size_t n2 );
function gsl_matrix_long_view_vector( v : pgsl_vector_long; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_view gsl_matrix_long_view_vector_with_tda ( gsl_vector_long * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_view_vector_with_tda( v : pgsl_vector_long; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_const_view gsl_matrix_long_const_submatrix ( const gsl_matrix_long * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_long_const_submatrix( const m : pgsl_matrix_long; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_matrix_long_const_row ( const gsl_matrix_long * m , const size_t i );
function gsl_matrix_long_const_row( const m : pgsl_matrix_long; const i : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_matrix_long_const_column ( const gsl_matrix_long * m , const size_t j );
function gsl_matrix_long_const_column( const m : pgsl_matrix_long; const j : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_matrix_long_const_diagonal ( const gsl_matrix_long * m );
function gsl_matrix_long_const_diagonal( const m : pgsl_matrix_long ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_matrix_long_const_subdiagonal ( const gsl_matrix_long * m , const size_t k );
function gsl_matrix_long_const_subdiagonal( const m : pgsl_matrix_long; const k : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_matrix_long_const_superdiagonal ( const gsl_matrix_long * m , const size_t k );
function gsl_matrix_long_const_superdiagonal( const m : pgsl_matrix_long; const k : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_const_view gsl_matrix_long_const_view_array ( const long * base , const size_t n1 , const size_t n2 );
function gsl_matrix_long_const_view_array( const base : plong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_const_view gsl_matrix_long_const_view_array_with_tda ( const long * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_const_view_array_with_tda( const base : plong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_const_view gsl_matrix_long_const_view_vector ( const gsl_vector_long * v , const size_t n1 , const size_t n2 );
function gsl_matrix_long_const_view_vector( const v : pgsl_vector_long; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_const_view gsl_matrix_long_const_view_vector_with_tda ( const gsl_vector_long * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_const_view_vector_with_tda( const v : pgsl_vector_long; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_matrix_long_get ( const gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_get( const m : pgsl_matrix_long; const i : size_t; const j : size_t ) : long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_set ( gsl_matrix_long * m , const size_t i , const size_t j , const long x );
procedure gsl_matrix_long_set( m : pgsl_matrix_long; const i : size_t; const j : size_t; const x : long ); cdecl; external gsl_dll;
//GSL_EXPORT long * gsl_matrix_long_ptr ( gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_ptr( m : pgsl_matrix_long; const i : size_t; const j : size_t ) : plong; cdecl; external gsl_dll;
//GSL_EXPORT const long * gsl_matrix_long_const_ptr ( const gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_const_ptr( const m : pgsl_matrix_long; const i : size_t; const j : size_t ) : plong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_set_zero ( gsl_matrix_long * m );
procedure gsl_matrix_long_set_zero( m : pgsl_matrix_long ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_set_identity ( gsl_matrix_long * m );
procedure gsl_matrix_long_set_identity( m : pgsl_matrix_long ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_set_all ( gsl_matrix_long * m , long x );
procedure gsl_matrix_long_set_all( m : pgsl_matrix_long; x : long ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_fread ( FILE * stream , gsl_matrix_long * m );
function gsl_matrix_long_fread( stream : pFILE; m : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_fwrite ( FILE * stream , const gsl_matrix_long * m );
function gsl_matrix_long_fwrite( stream : pFILE; const m : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_fscanf ( FILE * stream , gsl_matrix_long * m );
function gsl_matrix_long_fscanf( stream : pFILE; m : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_fprintf ( FILE * stream , const gsl_matrix_long * m , const char * format );
function gsl_matrix_long_fprintf( stream : pFILE; const m : pgsl_matrix_long; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_memcpy ( gsl_matrix_long * dest , const gsl_matrix_long * src );
function gsl_matrix_long_memcpy( dest : pgsl_matrix_long; const src : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_swap ( gsl_matrix_long * m1 , gsl_matrix_long * m2 );
function gsl_matrix_long_swap( m1 : pgsl_matrix_long; m2 : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_swap_rows ( gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_swap_rows( m : pgsl_matrix_long; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_swap_columns ( gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_swap_columns( m : pgsl_matrix_long; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_swap_rowcol ( gsl_matrix_long * m , const size_t i , const size_t j );
function gsl_matrix_long_swap_rowcol( m : pgsl_matrix_long; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_transpose ( gsl_matrix_long * m );
function gsl_matrix_long_transpose( m : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_transpose_memcpy ( gsl_matrix_long * dest , const gsl_matrix_long * src );
function gsl_matrix_long_transpose_memcpy( dest : pgsl_matrix_long; const src : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_matrix_long_max ( const gsl_matrix_long * m );
function gsl_matrix_long_max( const m : pgsl_matrix_long ) : long; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_matrix_long_min ( const gsl_matrix_long * m );
function gsl_matrix_long_min( const m : pgsl_matrix_long ) : long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_minmax ( const gsl_matrix_long * m , long * min_out , long * max_out );
procedure gsl_matrix_long_minmax( const m : pgsl_matrix_long; min_out : plong; max_out : plong ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_max_index ( const gsl_matrix_long * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_long_max_index( const m : pgsl_matrix_long; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_min_index ( const gsl_matrix_long * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_long_min_index( const m : pgsl_matrix_long; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_minmax_index ( const gsl_matrix_long * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_long_minmax_index( const m : pgsl_matrix_long; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_isnull ( const gsl_matrix_long * m );
function gsl_matrix_long_isnull( const m : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_add ( gsl_matrix_long * a , const gsl_matrix_long * b );
function gsl_matrix_long_add( a : pgsl_matrix_long; const b : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_sub ( gsl_matrix_long * a , const gsl_matrix_long * b );
function gsl_matrix_long_sub( a : pgsl_matrix_long; const b : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_mul_elements ( gsl_matrix_long * a , const gsl_matrix_long * b );
function gsl_matrix_long_mul_elements( a : pgsl_matrix_long; const b : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_div_elements ( gsl_matrix_long * a , const gsl_matrix_long * b );
function gsl_matrix_long_div_elements( a : pgsl_matrix_long; const b : pgsl_matrix_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_scale ( gsl_matrix_long * a , const double x );
function gsl_matrix_long_scale( a : pgsl_matrix_long; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_add_constant ( gsl_matrix_long * a , const double x );
function gsl_matrix_long_add_constant( a : pgsl_matrix_long; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_add_diagonal ( gsl_matrix_long * a , const double x );
function gsl_matrix_long_add_diagonal( a : pgsl_matrix_long; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_get_row ( gsl_vector_long * v , const gsl_matrix_long * m , const size_t i );
function gsl_matrix_long_get_row( v : pgsl_vector_long; const m : pgsl_matrix_long; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_get_col ( gsl_vector_long * v , const gsl_matrix_long * m , const size_t j );
function gsl_matrix_long_get_col( v : pgsl_vector_long; const m : pgsl_matrix_long; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_set_row ( gsl_matrix_long * m , const size_t i , const gsl_vector_long * v );
function gsl_matrix_long_set_row( m : pgsl_matrix_long; const i : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_set_col ( gsl_matrix_long * m , const size_t j , const gsl_vector_long * v );
function gsl_matrix_long_set_col( m : pgsl_matrix_long; const j : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;

//gsl_matrix_long_double.h
//GSL_EXPORT gsl_matrix_long_double * gsl_matrix_long_double_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long_double * gsl_matrix_long_double_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long_double * gsl_matrix_long_double_alloc_from_block ( gsl_block_long_double * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_long_double_alloc_from_block( b : pgsl_block_long_double; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_long_double * gsl_matrix_long_double_alloc_from_matrix ( gsl_matrix_long_double * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_alloc_from_matrix( m : pgsl_matrix_long_double; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_alloc_row_from_matrix ( gsl_matrix_long_double * m , const size_t i );
function gsl_vector_long_double_alloc_row_from_matrix( m : pgsl_matrix_long_double; const i : size_t ) : pgsl_vector_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_alloc_col_from_matrix ( gsl_matrix_long_double * m , const size_t j );
function gsl_vector_long_double_alloc_col_from_matrix( m : pgsl_matrix_long_double; const j : size_t ) : pgsl_vector_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_free ( gsl_matrix_long_double * m );
procedure gsl_matrix_long_double_free( m : pgsl_matrix_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_view gsl_matrix_long_double_submatrix ( gsl_matrix_long_double * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_submatrix( m : pgsl_matrix_long_double; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_matrix_long_double_row ( gsl_matrix_long_double * m , const size_t i );
function gsl_matrix_long_double_row( m : pgsl_matrix_long_double; const i : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_matrix_long_double_column ( gsl_matrix_long_double * m , const size_t j );
function gsl_matrix_long_double_column( m : pgsl_matrix_long_double; const j : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_matrix_long_double_diagonal ( gsl_matrix_long_double * m );
function gsl_matrix_long_double_diagonal( m : pgsl_matrix_long_double ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_matrix_long_double_subdiagonal ( gsl_matrix_long_double * m , const size_t k );
function gsl_matrix_long_double_subdiagonal( m : pgsl_matrix_long_double; const k : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_matrix_long_double_superdiagonal ( gsl_matrix_long_double * m , const size_t k );
function gsl_matrix_long_double_superdiagonal( m : pgsl_matrix_long_double; const k : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_view gsl_matrix_long_double_view_array ( long double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_view_array( base : plongdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_view gsl_matrix_long_double_view_array_with_tda ( long double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_double_view_array_with_tda( base : plongdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_view gsl_matrix_long_double_view_vector ( gsl_vector_long_double * v , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_view_vector( v : pgsl_vector_long_double; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_view gsl_matrix_long_double_view_vector_with_tda ( gsl_vector_long_double * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_double_view_vector_with_tda( v : pgsl_vector_long_double; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_const_view gsl_matrix_long_double_const_submatrix ( const gsl_matrix_long_double * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_const_submatrix( const m : pgsl_matrix_long_double; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_matrix_long_double_const_row ( const gsl_matrix_long_double * m , const size_t i );
function gsl_matrix_long_double_const_row( const m : pgsl_matrix_long_double; const i : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_matrix_long_double_const_column ( const gsl_matrix_long_double * m , const size_t j );
function gsl_matrix_long_double_const_column( const m : pgsl_matrix_long_double; const j : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_matrix_long_double_const_diagonal ( const gsl_matrix_long_double * m );
function gsl_matrix_long_double_const_diagonal( const m : pgsl_matrix_long_double ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_matrix_long_double_const_subdiagonal ( const gsl_matrix_long_double * m , const size_t k );
function gsl_matrix_long_double_const_subdiagonal( const m : pgsl_matrix_long_double; const k : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_matrix_long_double_const_superdiagonal ( const gsl_matrix_long_double * m , const size_t k );
function gsl_matrix_long_double_const_superdiagonal( const m : pgsl_matrix_long_double; const k : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_const_view gsl_matrix_long_double_const_view_array ( const long double * base , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_const_view_array( const base : plongdouble; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_const_view gsl_matrix_long_double_const_view_array_with_tda ( const long double * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_double_const_view_array_with_tda( const base : plongdouble; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_const_view gsl_matrix_long_double_const_view_vector ( const gsl_vector_long_double * v , const size_t n1 , const size_t n2 );
function gsl_matrix_long_double_const_view_vector( const v : pgsl_vector_long_double; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_long_double_const_view gsl_matrix_long_double_const_view_vector_with_tda ( const gsl_vector_long_double * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_long_double_const_view_vector_with_tda( const v : pgsl_vector_long_double; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_matrix_long_double_get ( const gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_get( const m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_set ( gsl_matrix_long_double * m , const size_t i , const size_t j , const long double x );
procedure gsl_matrix_long_double_set( m : pgsl_matrix_long_double; const i : size_t; const j : size_t; const x : longdouble ); cdecl; external gsl_dll;
//GSL_EXPORT long double * gsl_matrix_long_double_ptr ( gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_ptr( m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : plongdouble; cdecl; external gsl_dll;
//GSL_EXPORT const long double * gsl_matrix_long_double_const_ptr ( const gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_const_ptr( const m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : plongdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_set_zero ( gsl_matrix_long_double * m );
procedure gsl_matrix_long_double_set_zero( m : pgsl_matrix_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_set_identity ( gsl_matrix_long_double * m );
procedure gsl_matrix_long_double_set_identity( m : pgsl_matrix_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_set_all ( gsl_matrix_long_double * m , long double x );
procedure gsl_matrix_long_double_set_all( m : pgsl_matrix_long_double; x : longdouble ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_fread ( FILE * stream , gsl_matrix_long_double * m );
function gsl_matrix_long_double_fread( stream : pFILE; m : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_fwrite ( FILE * stream , const gsl_matrix_long_double * m );
function gsl_matrix_long_double_fwrite( stream : pFILE; const m : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_fscanf ( FILE * stream , gsl_matrix_long_double * m );
function gsl_matrix_long_double_fscanf( stream : pFILE; m : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_fprintf ( FILE * stream , const gsl_matrix_long_double * m , const char * format );
function gsl_matrix_long_double_fprintf( stream : pFILE; const m : pgsl_matrix_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_memcpy ( gsl_matrix_long_double * dest , const gsl_matrix_long_double * src );
function gsl_matrix_long_double_memcpy( dest : pgsl_matrix_long_double; const src : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_swap ( gsl_matrix_long_double * m1 , gsl_matrix_long_double * m2 );
function gsl_matrix_long_double_swap( m1 : pgsl_matrix_long_double; m2 : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_swap_rows ( gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_swap_rows( m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_swap_columns ( gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_swap_columns( m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_swap_rowcol ( gsl_matrix_long_double * m , const size_t i , const size_t j );
function gsl_matrix_long_double_swap_rowcol( m : pgsl_matrix_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_transpose ( gsl_matrix_long_double * m );
function gsl_matrix_long_double_transpose( m : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_transpose_memcpy ( gsl_matrix_long_double * dest , const gsl_matrix_long_double * src );
function gsl_matrix_long_double_transpose_memcpy( dest : pgsl_matrix_long_double; const src : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_matrix_long_double_max ( const gsl_matrix_long_double * m );
function gsl_matrix_long_double_max( const m : pgsl_matrix_long_double ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_matrix_long_double_min ( const gsl_matrix_long_double * m );
function gsl_matrix_long_double_min( const m : pgsl_matrix_long_double ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_minmax ( const gsl_matrix_long_double * m , long double * min_out , long double * max_out );
procedure gsl_matrix_long_double_minmax( const m : pgsl_matrix_long_double; min_out : plongdouble; max_out : plongdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_max_index ( const gsl_matrix_long_double * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_long_double_max_index( const m : pgsl_matrix_long_double; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_min_index ( const gsl_matrix_long_double * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_long_double_min_index( const m : pgsl_matrix_long_double; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_long_double_minmax_index ( const gsl_matrix_long_double * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_long_double_minmax_index( const m : pgsl_matrix_long_double; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_isnull ( const gsl_matrix_long_double * m );
function gsl_matrix_long_double_isnull( const m : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_add ( gsl_matrix_long_double * a , const gsl_matrix_long_double * b );
function gsl_matrix_long_double_add( a : pgsl_matrix_long_double; const b : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_sub ( gsl_matrix_long_double * a , const gsl_matrix_long_double * b );
function gsl_matrix_long_double_sub( a : pgsl_matrix_long_double; const b : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_mul_elements ( gsl_matrix_long_double * a , const gsl_matrix_long_double * b );
function gsl_matrix_long_double_mul_elements( a : pgsl_matrix_long_double; const b : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_div_elements ( gsl_matrix_long_double * a , const gsl_matrix_long_double * b );
function gsl_matrix_long_double_div_elements( a : pgsl_matrix_long_double; const b : pgsl_matrix_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_scale ( gsl_matrix_long_double * a , const double x );
function gsl_matrix_long_double_scale( a : pgsl_matrix_long_double; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_add_constant ( gsl_matrix_long_double * a , const double x );
function gsl_matrix_long_double_add_constant( a : pgsl_matrix_long_double; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_add_diagonal ( gsl_matrix_long_double * a , const double x );
function gsl_matrix_long_double_add_diagonal( a : pgsl_matrix_long_double; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_get_row ( gsl_vector_long_double * v , const gsl_matrix_long_double * m , const size_t i );
function gsl_matrix_long_double_get_row( v : pgsl_vector_long_double; const m : pgsl_matrix_long_double; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_get_col ( gsl_vector_long_double * v , const gsl_matrix_long_double * m , const size_t j );
function gsl_matrix_long_double_get_col( v : pgsl_vector_long_double; const m : pgsl_matrix_long_double; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_set_row ( gsl_matrix_long_double * m , const size_t i , const gsl_vector_long_double * v );
function gsl_matrix_long_double_set_row( m : pgsl_matrix_long_double; const i : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_long_double_set_col ( gsl_matrix_long_double * m , const size_t j , const gsl_vector_long_double * v );
function gsl_matrix_long_double_set_col( m : pgsl_matrix_long_double; const j : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;

//gsl_matrix_short.h
//GSL_EXPORT gsl_matrix_short * gsl_matrix_short_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_short_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_short ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_short * gsl_matrix_short_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_short_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_short ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_short * gsl_matrix_short_alloc_from_block ( gsl_block_short * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_short_alloc_from_block( b : pgsl_block_short; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_short ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_short * gsl_matrix_short_alloc_from_matrix ( gsl_matrix_short * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_short_alloc_from_matrix( m : pgsl_matrix_short; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_short ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_short * gsl_vector_short_alloc_row_from_matrix ( gsl_matrix_short * m , const size_t i );
function gsl_vector_short_alloc_row_from_matrix( m : pgsl_matrix_short; const i : size_t ) : pgsl_vector_short ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_short * gsl_vector_short_alloc_col_from_matrix ( gsl_matrix_short * m , const size_t j );
function gsl_vector_short_alloc_col_from_matrix( m : pgsl_matrix_short; const j : size_t ) : pgsl_vector_short ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_free ( gsl_matrix_short * m );
procedure gsl_matrix_short_free( m : pgsl_matrix_short ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_view gsl_matrix_short_submatrix ( gsl_matrix_short * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_short_submatrix( m : pgsl_matrix_short; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_matrix_short_row ( gsl_matrix_short * m , const size_t i );
function gsl_matrix_short_row( m : pgsl_matrix_short; const i : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_matrix_short_column ( gsl_matrix_short * m , const size_t j );
function gsl_matrix_short_column( m : pgsl_matrix_short; const j : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_matrix_short_diagonal ( gsl_matrix_short * m );
function gsl_matrix_short_diagonal( m : pgsl_matrix_short ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_matrix_short_subdiagonal ( gsl_matrix_short * m , const size_t k );
function gsl_matrix_short_subdiagonal( m : pgsl_matrix_short; const k : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_matrix_short_superdiagonal ( gsl_matrix_short * m , const size_t k );
function gsl_matrix_short_superdiagonal( m : pgsl_matrix_short; const k : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_view gsl_matrix_short_view_array ( short * base , const size_t n1 , const size_t n2 );
function gsl_matrix_short_view_array( base : pshort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_view gsl_matrix_short_view_array_with_tda ( short * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_short_view_array_with_tda( base : pshort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_view gsl_matrix_short_view_vector ( gsl_vector_short * v , const size_t n1 , const size_t n2 );
function gsl_matrix_short_view_vector( v : pgsl_vector_short; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_view gsl_matrix_short_view_vector_with_tda ( gsl_vector_short * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_short_view_vector_with_tda( v : pgsl_vector_short; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_const_view gsl_matrix_short_const_submatrix ( const gsl_matrix_short * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_short_const_submatrix( const m : pgsl_matrix_short; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_matrix_short_const_row ( const gsl_matrix_short * m , const size_t i );
function gsl_matrix_short_const_row( const m : pgsl_matrix_short; const i : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_matrix_short_const_column ( const gsl_matrix_short * m , const size_t j );
function gsl_matrix_short_const_column( const m : pgsl_matrix_short; const j : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_matrix_short_const_diagonal ( const gsl_matrix_short * m );
function gsl_matrix_short_const_diagonal( const m : pgsl_matrix_short ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_matrix_short_const_subdiagonal ( const gsl_matrix_short * m , const size_t k );
function gsl_matrix_short_const_subdiagonal( const m : pgsl_matrix_short; const k : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_matrix_short_const_superdiagonal ( const gsl_matrix_short * m , const size_t k );
function gsl_matrix_short_const_superdiagonal( const m : pgsl_matrix_short; const k : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_const_view gsl_matrix_short_const_view_array ( const short * base , const size_t n1 , const size_t n2 );
function gsl_matrix_short_const_view_array( const base : pshort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_const_view gsl_matrix_short_const_view_array_with_tda ( const short * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_short_const_view_array_with_tda( const base : pshort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_const_view gsl_matrix_short_const_view_vector ( const gsl_vector_short * v , const size_t n1 , const size_t n2 );
function gsl_matrix_short_const_view_vector( const v : pgsl_vector_short; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_short_const_view gsl_matrix_short_const_view_vector_with_tda ( const gsl_vector_short * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_short_const_view_vector_with_tda( const v : pgsl_vector_short; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_matrix_short_get ( const gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_get( const m : pgsl_matrix_short; const i : size_t; const j : size_t ) : short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_set ( gsl_matrix_short * m , const size_t i , const size_t j , const short x );
procedure gsl_matrix_short_set( m : pgsl_matrix_short; const i : size_t; const j : size_t; const x : short ); cdecl; external gsl_dll;
//GSL_EXPORT short * gsl_matrix_short_ptr ( gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_ptr( m : pgsl_matrix_short; const i : size_t; const j : size_t ) : pshort; cdecl; external gsl_dll;
//GSL_EXPORT const short * gsl_matrix_short_const_ptr ( const gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_const_ptr( const m : pgsl_matrix_short; const i : size_t; const j : size_t ) : pshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_set_zero ( gsl_matrix_short * m );
procedure gsl_matrix_short_set_zero( m : pgsl_matrix_short ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_set_identity ( gsl_matrix_short * m );
procedure gsl_matrix_short_set_identity( m : pgsl_matrix_short ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_set_all ( gsl_matrix_short * m , short x );
procedure gsl_matrix_short_set_all( m : pgsl_matrix_short; x : short ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_fread ( FILE * stream , gsl_matrix_short * m );
function gsl_matrix_short_fread( stream : pFILE; m : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_fwrite ( FILE * stream , const gsl_matrix_short * m );
function gsl_matrix_short_fwrite( stream : pFILE; const m : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_fscanf ( FILE * stream , gsl_matrix_short * m );
function gsl_matrix_short_fscanf( stream : pFILE; m : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_fprintf ( FILE * stream , const gsl_matrix_short * m , const char * format );
function gsl_matrix_short_fprintf( stream : pFILE; const m : pgsl_matrix_short; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_memcpy ( gsl_matrix_short * dest , const gsl_matrix_short * src );
function gsl_matrix_short_memcpy( dest : pgsl_matrix_short; const src : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_swap ( gsl_matrix_short * m1 , gsl_matrix_short * m2 );
function gsl_matrix_short_swap( m1 : pgsl_matrix_short; m2 : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_swap_rows ( gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_swap_rows( m : pgsl_matrix_short; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_swap_columns ( gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_swap_columns( m : pgsl_matrix_short; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_swap_rowcol ( gsl_matrix_short * m , const size_t i , const size_t j );
function gsl_matrix_short_swap_rowcol( m : pgsl_matrix_short; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_transpose ( gsl_matrix_short * m );
function gsl_matrix_short_transpose( m : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_transpose_memcpy ( gsl_matrix_short * dest , const gsl_matrix_short * src );
function gsl_matrix_short_transpose_memcpy( dest : pgsl_matrix_short; const src : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_matrix_short_max ( const gsl_matrix_short * m );
function gsl_matrix_short_max( const m : pgsl_matrix_short ) : short; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_matrix_short_min ( const gsl_matrix_short * m );
function gsl_matrix_short_min( const m : pgsl_matrix_short ) : short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_minmax ( const gsl_matrix_short * m , short * min_out , short * max_out );
procedure gsl_matrix_short_minmax( const m : pgsl_matrix_short; min_out : pshort; max_out : pshort ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_max_index ( const gsl_matrix_short * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_short_max_index( const m : pgsl_matrix_short; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_min_index ( const gsl_matrix_short * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_short_min_index( const m : pgsl_matrix_short; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_short_minmax_index ( const gsl_matrix_short * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_short_minmax_index( const m : pgsl_matrix_short; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_isnull ( const gsl_matrix_short * m );
function gsl_matrix_short_isnull( const m : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_add ( gsl_matrix_short * a , const gsl_matrix_short * b );
function gsl_matrix_short_add( a : pgsl_matrix_short; const b : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_sub ( gsl_matrix_short * a , const gsl_matrix_short * b );
function gsl_matrix_short_sub( a : pgsl_matrix_short; const b : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_mul_elements ( gsl_matrix_short * a , const gsl_matrix_short * b );
function gsl_matrix_short_mul_elements( a : pgsl_matrix_short; const b : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_div_elements ( gsl_matrix_short * a , const gsl_matrix_short * b );
function gsl_matrix_short_div_elements( a : pgsl_matrix_short; const b : pgsl_matrix_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_scale ( gsl_matrix_short * a , const double x );
function gsl_matrix_short_scale( a : pgsl_matrix_short; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_add_constant ( gsl_matrix_short * a , const double x );
function gsl_matrix_short_add_constant( a : pgsl_matrix_short; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_add_diagonal ( gsl_matrix_short * a , const double x );
function gsl_matrix_short_add_diagonal( a : pgsl_matrix_short; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_get_row ( gsl_vector_short * v , const gsl_matrix_short * m , const size_t i );
function gsl_matrix_short_get_row( v : pgsl_vector_short; const m : pgsl_matrix_short; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_get_col ( gsl_vector_short * v , const gsl_matrix_short * m , const size_t j );
function gsl_matrix_short_get_col( v : pgsl_vector_short; const m : pgsl_matrix_short; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_set_row ( gsl_matrix_short * m , const size_t i , const gsl_vector_short * v );
function gsl_matrix_short_set_row( m : pgsl_matrix_short; const i : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_short_set_col ( gsl_matrix_short * m , const size_t j , const gsl_vector_short * v );
function gsl_matrix_short_set_col( m : pgsl_matrix_short; const j : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;

//gsl_matrix_uchar.h
//GSL_EXPORT gsl_matrix_uchar * gsl_matrix_uchar_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uchar * gsl_matrix_uchar_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uchar * gsl_matrix_uchar_alloc_from_block ( gsl_block_uchar * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_uchar_alloc_from_block( b : pgsl_block_uchar; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uchar * gsl_matrix_uchar_alloc_from_matrix ( gsl_matrix_uchar * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_alloc_from_matrix( m : pgsl_matrix_uchar; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_alloc_row_from_matrix ( gsl_matrix_uchar * m , const size_t i );
function gsl_vector_uchar_alloc_row_from_matrix( m : pgsl_matrix_uchar; const i : size_t ) : pgsl_vector_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_alloc_col_from_matrix ( gsl_matrix_uchar * m , const size_t j );
function gsl_vector_uchar_alloc_col_from_matrix( m : pgsl_matrix_uchar; const j : size_t ) : pgsl_vector_uchar ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_free ( gsl_matrix_uchar * m );
procedure gsl_matrix_uchar_free( m : pgsl_matrix_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_view gsl_matrix_uchar_submatrix ( gsl_matrix_uchar * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_submatrix( m : pgsl_matrix_uchar; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_matrix_uchar_row ( gsl_matrix_uchar * m , const size_t i );
function gsl_matrix_uchar_row( m : pgsl_matrix_uchar; const i : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_matrix_uchar_column ( gsl_matrix_uchar * m , const size_t j );
function gsl_matrix_uchar_column( m : pgsl_matrix_uchar; const j : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_matrix_uchar_diagonal ( gsl_matrix_uchar * m );
function gsl_matrix_uchar_diagonal( m : pgsl_matrix_uchar ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_matrix_uchar_subdiagonal ( gsl_matrix_uchar * m , const size_t k );
function gsl_matrix_uchar_subdiagonal( m : pgsl_matrix_uchar; const k : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_matrix_uchar_superdiagonal ( gsl_matrix_uchar * m , const size_t k );
function gsl_matrix_uchar_superdiagonal( m : pgsl_matrix_uchar; const k : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_view gsl_matrix_uchar_view_array ( unsigned char * base , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_view_array( base : punsignedchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_view gsl_matrix_uchar_view_array_with_tda ( unsigned char * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uchar_view_array_with_tda( base : punsignedchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_view gsl_matrix_uchar_view_vector ( gsl_vector_uchar * v , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_view_vector( v : pgsl_vector_uchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_view gsl_matrix_uchar_view_vector_with_tda ( gsl_vector_uchar * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uchar_view_vector_with_tda( v : pgsl_vector_uchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_submatrix ( const gsl_matrix_uchar * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_const_submatrix( const m : pgsl_matrix_uchar; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_matrix_uchar_const_row ( const gsl_matrix_uchar * m , const size_t i );
function gsl_matrix_uchar_const_row( const m : pgsl_matrix_uchar; const i : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_matrix_uchar_const_column ( const gsl_matrix_uchar * m , const size_t j );
function gsl_matrix_uchar_const_column( const m : pgsl_matrix_uchar; const j : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_matrix_uchar_const_diagonal ( const gsl_matrix_uchar * m );
function gsl_matrix_uchar_const_diagonal( const m : pgsl_matrix_uchar ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_matrix_uchar_const_subdiagonal ( const gsl_matrix_uchar * m , const size_t k );
function gsl_matrix_uchar_const_subdiagonal( const m : pgsl_matrix_uchar; const k : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_matrix_uchar_const_superdiagonal ( const gsl_matrix_uchar * m , const size_t k );
function gsl_matrix_uchar_const_superdiagonal( const m : pgsl_matrix_uchar; const k : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_array ( const unsigned char * base , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_const_view_array( const base : punsignedchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_array_with_tda ( const unsigned char * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uchar_const_view_array_with_tda( const base : punsignedchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_vector ( const gsl_vector_uchar * v , const size_t n1 , const size_t n2 );
function gsl_matrix_uchar_const_view_vector( const v : pgsl_vector_uchar; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_vector_with_tda ( const gsl_vector_uchar * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uchar_const_view_vector_with_tda( const v : pgsl_vector_uchar; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsigned char gsl_matrix_uchar_get ( const gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_get( const m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_set ( gsl_matrix_uchar * m , const size_t i , const size_t j , const unsignedchar x );
procedure gsl_matrix_uchar_set( m : pgsl_matrix_uchar; const i : size_t; const j : size_t; const x : unsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar * gsl_matrix_uchar_ptr ( gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_ptr( m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : punsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedchar * gsl_matrix_uchar_const_ptr ( const gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_const_ptr( const m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : punsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_set_zero ( gsl_matrix_uchar * m );
procedure gsl_matrix_uchar_set_zero( m : pgsl_matrix_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_set_identity ( gsl_matrix_uchar * m );
procedure gsl_matrix_uchar_set_identity( m : pgsl_matrix_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_set_all ( gsl_matrix_uchar * m , unsignedchar x );
procedure gsl_matrix_uchar_set_all( m : pgsl_matrix_uchar; x : unsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_fread ( FILE * stream , gsl_matrix_uchar * m );
function gsl_matrix_uchar_fread( stream : pFILE; m : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_fwrite ( FILE * stream , const gsl_matrix_uchar * m );
function gsl_matrix_uchar_fwrite( stream : pFILE; const m : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_fscanf ( FILE * stream , gsl_matrix_uchar * m );
function gsl_matrix_uchar_fscanf( stream : pFILE; m : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_fprintf ( FILE * stream , const gsl_matrix_uchar * m , const char * format );
function gsl_matrix_uchar_fprintf( stream : pFILE; const m : pgsl_matrix_uchar; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_memcpy ( gsl_matrix_uchar * dest , const gsl_matrix_uchar * src );
function gsl_matrix_uchar_memcpy( dest : pgsl_matrix_uchar; const src : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_swap ( gsl_matrix_uchar * m1 , gsl_matrix_uchar * m2 );
function gsl_matrix_uchar_swap( m1 : pgsl_matrix_uchar; m2 : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_swap_rows ( gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_swap_rows( m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_swap_columns ( gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_swap_columns( m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_swap_rowcol ( gsl_matrix_uchar * m , const size_t i , const size_t j );
function gsl_matrix_uchar_swap_rowcol( m : pgsl_matrix_uchar; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_transpose ( gsl_matrix_uchar * m );
function gsl_matrix_uchar_transpose( m : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_transpose_memcpy ( gsl_matrix_uchar * dest , const gsl_matrix_uchar * src );
function gsl_matrix_uchar_transpose_memcpy( dest : pgsl_matrix_uchar; const src : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_matrix_uchar_max ( const gsl_matrix_uchar * m );
function gsl_matrix_uchar_max( const m : pgsl_matrix_uchar ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_matrix_uchar_min ( const gsl_matrix_uchar * m );
function gsl_matrix_uchar_min( const m : pgsl_matrix_uchar ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_minmax ( const gsl_matrix_uchar * m , unsignedchar * min_out , unsignedchar * max_out );
procedure gsl_matrix_uchar_minmax( const m : pgsl_matrix_uchar; min_out : punsignedchar; max_out : punsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_max_index ( const gsl_matrix_uchar * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_uchar_max_index( const m : pgsl_matrix_uchar; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_min_index ( const gsl_matrix_uchar * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_uchar_min_index( const m : pgsl_matrix_uchar; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uchar_minmax_index ( const gsl_matrix_uchar * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_uchar_minmax_index( const m : pgsl_matrix_uchar; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_isnull ( const gsl_matrix_uchar * m );
function gsl_matrix_uchar_isnull( const m : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_add ( gsl_matrix_uchar * a , const gsl_matrix_uchar * b );
function gsl_matrix_uchar_add( a : pgsl_matrix_uchar; const b : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_sub ( gsl_matrix_uchar * a , const gsl_matrix_uchar * b );
function gsl_matrix_uchar_sub( a : pgsl_matrix_uchar; const b : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_mul_elements ( gsl_matrix_uchar * a , const gsl_matrix_uchar * b );
function gsl_matrix_uchar_mul_elements( a : pgsl_matrix_uchar; const b : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_div_elements ( gsl_matrix_uchar * a , const gsl_matrix_uchar * b );
function gsl_matrix_uchar_div_elements( a : pgsl_matrix_uchar; const b : pgsl_matrix_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_scale ( gsl_matrix_uchar * a , const double x );
function gsl_matrix_uchar_scale( a : pgsl_matrix_uchar; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_add_constant ( gsl_matrix_uchar * a , const double x );
function gsl_matrix_uchar_add_constant( a : pgsl_matrix_uchar; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_add_diagonal ( gsl_matrix_uchar * a , const double x );
function gsl_matrix_uchar_add_diagonal( a : pgsl_matrix_uchar; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_get_row ( gsl_vector_uchar * v , const gsl_matrix_uchar * m , const size_t i );
function gsl_matrix_uchar_get_row( v : pgsl_vector_uchar; const m : pgsl_matrix_uchar; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_get_col ( gsl_vector_uchar * v , const gsl_matrix_uchar * m , const size_t j );
function gsl_matrix_uchar_get_col( v : pgsl_vector_uchar; const m : pgsl_matrix_uchar; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_set_row ( gsl_matrix_uchar * m , const size_t i , const gsl_vector_uchar * v );
function gsl_matrix_uchar_set_row( m : pgsl_matrix_uchar; const i : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uchar_set_col ( gsl_matrix_uchar * m , const size_t j , const gsl_vector_uchar * v );
function gsl_matrix_uchar_set_col( m : pgsl_matrix_uchar; const j : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;

//gsl_matrix_uint.h
//GSL_EXPORT gsl_matrix_uint * gsl_matrix_uint_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_uint_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uint ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uint * gsl_matrix_uint_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_uint_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uint ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uint * gsl_matrix_uint_alloc_from_block ( gsl_block_uint * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_uint_alloc_from_block( b : pgsl_block_uint; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_uint ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_uint * gsl_matrix_uint_alloc_from_matrix ( gsl_matrix_uint * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_alloc_from_matrix( m : pgsl_matrix_uint; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_uint ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_alloc_row_from_matrix ( gsl_matrix_uint * m , const size_t i );
function gsl_vector_uint_alloc_row_from_matrix( m : pgsl_matrix_uint; const i : size_t ) : pgsl_vector_uint ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_alloc_col_from_matrix ( gsl_matrix_uint * m , const size_t j );
function gsl_vector_uint_alloc_col_from_matrix( m : pgsl_matrix_uint; const j : size_t ) : pgsl_vector_uint ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_free ( gsl_matrix_uint * m );
procedure gsl_matrix_uint_free( m : pgsl_matrix_uint ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_view gsl_matrix_uint_submatrix ( gsl_matrix_uint * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_submatrix( m : pgsl_matrix_uint; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_matrix_uint_row ( gsl_matrix_uint * m , const size_t i );
function gsl_matrix_uint_row( m : pgsl_matrix_uint; const i : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_matrix_uint_column ( gsl_matrix_uint * m , const size_t j );
function gsl_matrix_uint_column( m : pgsl_matrix_uint; const j : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_matrix_uint_diagonal ( gsl_matrix_uint * m );
function gsl_matrix_uint_diagonal( m : pgsl_matrix_uint ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_matrix_uint_subdiagonal ( gsl_matrix_uint * m , const size_t k );
function gsl_matrix_uint_subdiagonal( m : pgsl_matrix_uint; const k : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_matrix_uint_superdiagonal ( gsl_matrix_uint * m , const size_t k );
function gsl_matrix_uint_superdiagonal( m : pgsl_matrix_uint; const k : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_view gsl_matrix_uint_view_array ( unsignedint * base , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_view_array( base : punsignedint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_view gsl_matrix_uint_view_array_with_tda ( unsignedint * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uint_view_array_with_tda( base : punsignedint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_view gsl_matrix_uint_view_vector ( gsl_vector_uint * v , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_view_vector( v : pgsl_vector_uint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_view gsl_matrix_uint_view_vector_with_tda ( gsl_vector_uint * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uint_view_vector_with_tda( v : pgsl_vector_uint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_const_view gsl_matrix_uint_const_submatrix ( const gsl_matrix_uint * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_const_submatrix( const m : pgsl_matrix_uint; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_matrix_uint_const_row ( const gsl_matrix_uint * m , const size_t i );
function gsl_matrix_uint_const_row( const m : pgsl_matrix_uint; const i : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_matrix_uint_const_column ( const gsl_matrix_uint * m , const size_t j );
function gsl_matrix_uint_const_column( const m : pgsl_matrix_uint; const j : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_matrix_uint_const_diagonal ( const gsl_matrix_uint * m );
function gsl_matrix_uint_const_diagonal( const m : pgsl_matrix_uint ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_matrix_uint_const_subdiagonal ( const gsl_matrix_uint * m , const size_t k );
function gsl_matrix_uint_const_subdiagonal( const m : pgsl_matrix_uint; const k : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_matrix_uint_const_superdiagonal ( const gsl_matrix_uint * m , const size_t k );
function gsl_matrix_uint_const_superdiagonal( const m : pgsl_matrix_uint; const k : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_array ( const unsignedint * base , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_const_view_array( const base : punsignedint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_array_with_tda ( const unsignedint * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uint_const_view_array_with_tda( const base : punsignedint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_vector ( const gsl_vector_uint * v , const size_t n1 , const size_t n2 );
function gsl_matrix_uint_const_view_vector( const v : pgsl_vector_uint; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_vector_with_tda ( const gsl_vector_uint * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_uint_const_view_vector_with_tda( const v : pgsl_vector_uint; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_matrix_uint_get ( const gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_get( const m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_set ( gsl_matrix_uint * m , const size_t i , const size_t j , const unsignedint x );
procedure gsl_matrix_uint_set( m : pgsl_matrix_uint; const i : size_t; const j : size_t; const x : unsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedint * gsl_matrix_uint_ptr ( gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_ptr( m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : punsignedint; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedint * gsl_matrix_uint_const_ptr ( const gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_const_ptr( const m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : punsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_set_zero ( gsl_matrix_uint * m );
procedure gsl_matrix_uint_set_zero( m : pgsl_matrix_uint ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_set_identity ( gsl_matrix_uint * m );
procedure gsl_matrix_uint_set_identity( m : pgsl_matrix_uint ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_set_all ( gsl_matrix_uint * m , unsignedint x );
procedure gsl_matrix_uint_set_all( m : pgsl_matrix_uint; x : unsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_fread ( FILE * stream , gsl_matrix_uint * m );
function gsl_matrix_uint_fread( stream : pFILE; m : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_fwrite ( FILE * stream , const gsl_matrix_uint * m );
function gsl_matrix_uint_fwrite( stream : pFILE; const m : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_fscanf ( FILE * stream , gsl_matrix_uint * m );
function gsl_matrix_uint_fscanf( stream : pFILE; m : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_fprintf ( FILE * stream , const gsl_matrix_uint * m , const char * format );
function gsl_matrix_uint_fprintf( stream : pFILE; const m : pgsl_matrix_uint; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_memcpy ( gsl_matrix_uint * dest , const gsl_matrix_uint * src );
function gsl_matrix_uint_memcpy( dest : pgsl_matrix_uint; const src : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_swap ( gsl_matrix_uint * m1 , gsl_matrix_uint * m2 );
function gsl_matrix_uint_swap( m1 : pgsl_matrix_uint; m2 : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_swap_rows ( gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_swap_rows( m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_swap_columns ( gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_swap_columns( m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_swap_rowcol ( gsl_matrix_uint * m , const size_t i , const size_t j );
function gsl_matrix_uint_swap_rowcol( m : pgsl_matrix_uint; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_transpose ( gsl_matrix_uint * m );
function gsl_matrix_uint_transpose( m : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_transpose_memcpy ( gsl_matrix_uint * dest , const gsl_matrix_uint * src );
function gsl_matrix_uint_transpose_memcpy( dest : pgsl_matrix_uint; const src : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_matrix_uint_max ( const gsl_matrix_uint * m );
function gsl_matrix_uint_max( const m : pgsl_matrix_uint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_matrix_uint_min ( const gsl_matrix_uint * m );
function gsl_matrix_uint_min( const m : pgsl_matrix_uint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_minmax ( const gsl_matrix_uint * m , unsignedint * min_out , unsignedint * max_out );
procedure gsl_matrix_uint_minmax( const m : pgsl_matrix_uint; min_out : punsignedint; max_out : punsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_max_index ( const gsl_matrix_uint * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_uint_max_index( const m : pgsl_matrix_uint; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_min_index ( const gsl_matrix_uint * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_uint_min_index( const m : pgsl_matrix_uint; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_uint_minmax_index ( const gsl_matrix_uint * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_uint_minmax_index( const m : pgsl_matrix_uint; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_isnull ( const gsl_matrix_uint * m );
function gsl_matrix_uint_isnull( const m : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_add ( gsl_matrix_uint * a , const gsl_matrix_uint * b );
function gsl_matrix_uint_add( a : pgsl_matrix_uint; const b : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_sub ( gsl_matrix_uint * a , const gsl_matrix_uint * b );
function gsl_matrix_uint_sub( a : pgsl_matrix_uint; const b : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_mul_elements ( gsl_matrix_uint * a , const gsl_matrix_uint * b );
function gsl_matrix_uint_mul_elements( a : pgsl_matrix_uint; const b : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_div_elements ( gsl_matrix_uint * a , const gsl_matrix_uint * b );
function gsl_matrix_uint_div_elements( a : pgsl_matrix_uint; const b : pgsl_matrix_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_scale ( gsl_matrix_uint * a , const double x );
function gsl_matrix_uint_scale( a : pgsl_matrix_uint; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_add_constant ( gsl_matrix_uint * a , const double x );
function gsl_matrix_uint_add_constant( a : pgsl_matrix_uint; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_add_diagonal ( gsl_matrix_uint * a , const double x );
function gsl_matrix_uint_add_diagonal( a : pgsl_matrix_uint; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_get_row ( gsl_vector_uint * v , const gsl_matrix_uint * m , const size_t i );
function gsl_matrix_uint_get_row( v : pgsl_vector_uint; const m : pgsl_matrix_uint; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_get_col ( gsl_vector_uint * v , const gsl_matrix_uint * m , const size_t j );
function gsl_matrix_uint_get_col( v : pgsl_vector_uint; const m : pgsl_matrix_uint; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_set_row ( gsl_matrix_uint * m , const size_t i , const gsl_vector_uint * v );
function gsl_matrix_uint_set_row( m : pgsl_matrix_uint; const i : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_uint_set_col ( gsl_matrix_uint * m , const size_t j , const gsl_vector_uint * v );
function gsl_matrix_uint_set_col( m : pgsl_matrix_uint; const j : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;

//gsl_matrix_ulong.h
//GSL_EXPORT gsl_matrix_ulong * gsl_matrix_ulong_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ulong * gsl_matrix_ulong_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ulong * gsl_matrix_ulong_alloc_from_block ( gsl_block_ulong * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_ulong_alloc_from_block( b : pgsl_block_ulong; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ulong * gsl_matrix_ulong_alloc_from_matrix ( gsl_matrix_ulong * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_alloc_from_matrix( m : pgsl_matrix_ulong; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_alloc_row_from_matrix ( gsl_matrix_ulong * m , const size_t i );
function gsl_vector_ulong_alloc_row_from_matrix( m : pgsl_matrix_ulong; const i : size_t ) : pgsl_vector_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_alloc_col_from_matrix ( gsl_matrix_ulong * m , const size_t j );
function gsl_vector_ulong_alloc_col_from_matrix( m : pgsl_matrix_ulong; const j : size_t ) : pgsl_vector_ulong ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_free ( gsl_matrix_ulong * m );
procedure gsl_matrix_ulong_free( m : pgsl_matrix_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_view gsl_matrix_ulong_submatrix ( gsl_matrix_ulong * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_submatrix( m : pgsl_matrix_ulong; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_matrix_ulong_row ( gsl_matrix_ulong * m , const size_t i );
function gsl_matrix_ulong_row( m : pgsl_matrix_ulong; const i : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_matrix_ulong_column ( gsl_matrix_ulong * m , const size_t j );
function gsl_matrix_ulong_column( m : pgsl_matrix_ulong; const j : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_matrix_ulong_diagonal ( gsl_matrix_ulong * m );
function gsl_matrix_ulong_diagonal( m : pgsl_matrix_ulong ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_matrix_ulong_subdiagonal ( gsl_matrix_ulong * m , const size_t k );
function gsl_matrix_ulong_subdiagonal( m : pgsl_matrix_ulong; const k : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_matrix_ulong_superdiagonal ( gsl_matrix_ulong * m , const size_t k );
function gsl_matrix_ulong_superdiagonal( m : pgsl_matrix_ulong; const k : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_view gsl_matrix_ulong_view_array ( unsigned long * base , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_view_array( base : punsignedlong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_view gsl_matrix_ulong_view_array_with_tda ( unsigned long * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ulong_view_array_with_tda( base : punsignedlong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_view gsl_matrix_ulong_view_vector ( gsl_vector_ulong * v , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_view_vector( v : pgsl_vector_ulong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_view gsl_matrix_ulong_view_vector_with_tda ( gsl_vector_ulong * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ulong_view_vector_with_tda( v : pgsl_vector_ulong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_submatrix ( const gsl_matrix_ulong * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_const_submatrix( const m : pgsl_matrix_ulong; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_matrix_ulong_const_row ( const gsl_matrix_ulong * m , const size_t i );
function gsl_matrix_ulong_const_row( const m : pgsl_matrix_ulong; const i : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_matrix_ulong_const_column ( const gsl_matrix_ulong * m , const size_t j );
function gsl_matrix_ulong_const_column( const m : pgsl_matrix_ulong; const j : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_matrix_ulong_const_diagonal ( const gsl_matrix_ulong * m );
function gsl_matrix_ulong_const_diagonal( const m : pgsl_matrix_ulong ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_matrix_ulong_const_subdiagonal ( const gsl_matrix_ulong * m , const size_t k );
function gsl_matrix_ulong_const_subdiagonal( const m : pgsl_matrix_ulong; const k : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_matrix_ulong_const_superdiagonal ( const gsl_matrix_ulong * m , const size_t k );
function gsl_matrix_ulong_const_superdiagonal( const m : pgsl_matrix_ulong; const k : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_array ( const unsigned long * base , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_const_view_array( const base : punsignedlong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_array_with_tda ( const unsigned long * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ulong_const_view_array_with_tda( const base : punsignedlong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_vector ( const gsl_vector_ulong * v , const size_t n1 , const size_t n2 );
function gsl_matrix_ulong_const_view_vector( const v : pgsl_vector_ulong; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_vector_with_tda ( const gsl_vector_ulong * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ulong_const_view_vector_with_tda( const v : pgsl_vector_ulong; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsigned long gsl_matrix_ulong_get ( const gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_get( const m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_set ( gsl_matrix_ulong * m , const size_t i , const size_t j , const unsignedlong x );
procedure gsl_matrix_ulong_set( m : pgsl_matrix_ulong; const i : size_t; const j : size_t; const x : unsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong * gsl_matrix_ulong_ptr ( gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_ptr( m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : punsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedlong * gsl_matrix_ulong_const_ptr ( const gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_const_ptr( const m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : punsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_set_zero ( gsl_matrix_ulong * m );
procedure gsl_matrix_ulong_set_zero( m : pgsl_matrix_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_set_identity ( gsl_matrix_ulong * m );
procedure gsl_matrix_ulong_set_identity( m : pgsl_matrix_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_set_all ( gsl_matrix_ulong * m , unsignedlong x );
procedure gsl_matrix_ulong_set_all( m : pgsl_matrix_ulong; x : unsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_fread ( FILE * stream , gsl_matrix_ulong * m );
function gsl_matrix_ulong_fread( stream : pFILE; m : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_fwrite ( FILE * stream , const gsl_matrix_ulong * m );
function gsl_matrix_ulong_fwrite( stream : pFILE; const m : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_fscanf ( FILE * stream , gsl_matrix_ulong * m );
function gsl_matrix_ulong_fscanf( stream : pFILE; m : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_fprintf ( FILE * stream , const gsl_matrix_ulong * m , const char * format );
function gsl_matrix_ulong_fprintf( stream : pFILE; const m : pgsl_matrix_ulong; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_memcpy ( gsl_matrix_ulong * dest , const gsl_matrix_ulong * src );
function gsl_matrix_ulong_memcpy( dest : pgsl_matrix_ulong; const src : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_swap ( gsl_matrix_ulong * m1 , gsl_matrix_ulong * m2 );
function gsl_matrix_ulong_swap( m1 : pgsl_matrix_ulong; m2 : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_swap_rows ( gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_swap_rows( m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_swap_columns ( gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_swap_columns( m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_swap_rowcol ( gsl_matrix_ulong * m , const size_t i , const size_t j );
function gsl_matrix_ulong_swap_rowcol( m : pgsl_matrix_ulong; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_transpose ( gsl_matrix_ulong * m );
function gsl_matrix_ulong_transpose( m : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_transpose_memcpy ( gsl_matrix_ulong * dest , const gsl_matrix_ulong * src );
function gsl_matrix_ulong_transpose_memcpy( dest : pgsl_matrix_ulong; const src : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_matrix_ulong_max ( const gsl_matrix_ulong * m );
function gsl_matrix_ulong_max( const m : pgsl_matrix_ulong ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_matrix_ulong_min ( const gsl_matrix_ulong * m );
function gsl_matrix_ulong_min( const m : pgsl_matrix_ulong ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_minmax ( const gsl_matrix_ulong * m , unsignedlong * min_out , unsignedlong * max_out );
procedure gsl_matrix_ulong_minmax( const m : pgsl_matrix_ulong; min_out : punsignedlong; max_out : punsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_max_index ( const gsl_matrix_ulong * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_ulong_max_index( const m : pgsl_matrix_ulong; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_min_index ( const gsl_matrix_ulong * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_ulong_min_index( const m : pgsl_matrix_ulong; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ulong_minmax_index ( const gsl_matrix_ulong * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_ulong_minmax_index( const m : pgsl_matrix_ulong; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_isnull ( const gsl_matrix_ulong * m );
function gsl_matrix_ulong_isnull( const m : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_add ( gsl_matrix_ulong * a , const gsl_matrix_ulong * b );
function gsl_matrix_ulong_add( a : pgsl_matrix_ulong; const b : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_sub ( gsl_matrix_ulong * a , const gsl_matrix_ulong * b );
function gsl_matrix_ulong_sub( a : pgsl_matrix_ulong; const b : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_mul_elements ( gsl_matrix_ulong * a , const gsl_matrix_ulong * b );
function gsl_matrix_ulong_mul_elements( a : pgsl_matrix_ulong; const b : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_div_elements ( gsl_matrix_ulong * a , const gsl_matrix_ulong * b );
function gsl_matrix_ulong_div_elements( a : pgsl_matrix_ulong; const b : pgsl_matrix_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_scale ( gsl_matrix_ulong * a , const double x );
function gsl_matrix_ulong_scale( a : pgsl_matrix_ulong; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_add_constant ( gsl_matrix_ulong * a , const double x );
function gsl_matrix_ulong_add_constant( a : pgsl_matrix_ulong; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_add_diagonal ( gsl_matrix_ulong * a , const double x );
function gsl_matrix_ulong_add_diagonal( a : pgsl_matrix_ulong; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_get_row ( gsl_vector_ulong * v , const gsl_matrix_ulong * m , const size_t i );
function gsl_matrix_ulong_get_row( v : pgsl_vector_ulong; const m : pgsl_matrix_ulong; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_get_col ( gsl_vector_ulong * v , const gsl_matrix_ulong * m , const size_t j );
function gsl_matrix_ulong_get_col( v : pgsl_vector_ulong; const m : pgsl_matrix_ulong; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_set_row ( gsl_matrix_ulong * m , const size_t i , const gsl_vector_ulong * v );
function gsl_matrix_ulong_set_row( m : pgsl_matrix_ulong; const i : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ulong_set_col ( gsl_matrix_ulong * m , const size_t j , const gsl_vector_ulong * v );
function gsl_matrix_ulong_set_col( m : pgsl_matrix_ulong; const j : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;

//gsl_matrix_ushort.h
//GSL_EXPORT gsl_matrix_ushort * gsl_matrix_ushort_alloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_alloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ushort * gsl_matrix_ushort_calloc ( const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_calloc( const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ushort * gsl_matrix_ushort_alloc_from_block ( gsl_block_ushort * b , const size_t offset , const size_t n1 , const size_t n2 , const size_t d2 );
function gsl_matrix_ushort_alloc_from_block( b : pgsl_block_ushort; const offset : size_t; const n1 : size_t; const n2 : size_t; const d2 : size_t ) : pgsl_matrix_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_matrix_ushort * gsl_matrix_ushort_alloc_from_matrix ( gsl_matrix_ushort * m , const size_t k1 , const size_t k2 , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_alloc_from_matrix( m : pgsl_matrix_ushort; const k1 : size_t; const k2 : size_t; const n1 : size_t; const n2 : size_t ) : pgsl_matrix_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_alloc_row_from_matrix ( gsl_matrix_ushort * m , const size_t i );
function gsl_vector_ushort_alloc_row_from_matrix( m : pgsl_matrix_ushort; const i : size_t ) : pgsl_vector_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_alloc_col_from_matrix ( gsl_matrix_ushort * m , const size_t j );
function gsl_vector_ushort_alloc_col_from_matrix( m : pgsl_matrix_ushort; const j : size_t ) : pgsl_vector_ushort ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_free ( gsl_matrix_ushort * m );
procedure gsl_matrix_ushort_free( m : pgsl_matrix_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_view gsl_matrix_ushort_submatrix ( gsl_matrix_ushort * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_submatrix( m : pgsl_matrix_ushort; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_matrix_ushort_row ( gsl_matrix_ushort * m , const size_t i );
function gsl_matrix_ushort_row( m : pgsl_matrix_ushort; const i : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_matrix_ushort_column ( gsl_matrix_ushort * m , const size_t j );
function gsl_matrix_ushort_column( m : pgsl_matrix_ushort; const j : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_matrix_ushort_diagonal ( gsl_matrix_ushort * m );
function gsl_matrix_ushort_diagonal( m : pgsl_matrix_ushort ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_matrix_ushort_subdiagonal ( gsl_matrix_ushort * m , const size_t k );
function gsl_matrix_ushort_subdiagonal( m : pgsl_matrix_ushort; const k : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_matrix_ushort_superdiagonal ( gsl_matrix_ushort * m , const size_t k );
function gsl_matrix_ushort_superdiagonal( m : pgsl_matrix_ushort; const k : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_view gsl_matrix_ushort_view_array ( unsigned short * base , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_view_array( base : punsignedshort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_view gsl_matrix_ushort_view_array_with_tda ( unsigned short * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ushort_view_array_with_tda( base : punsignedshort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_view gsl_matrix_ushort_view_vector ( gsl_vector_ushort * v , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_view_vector( v : pgsl_vector_ushort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_view gsl_matrix_ushort_view_vector_with_tda ( gsl_vector_ushort * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ushort_view_vector_with_tda( v : pgsl_vector_ushort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_submatrix ( const gsl_matrix_ushort * m , const size_t i , const size_t j , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_const_submatrix( const m : pgsl_matrix_ushort; const i : size_t; const j : size_t; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_matrix_ushort_const_row ( const gsl_matrix_ushort * m , const size_t i );
function gsl_matrix_ushort_const_row( const m : pgsl_matrix_ushort; const i : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_matrix_ushort_const_column ( const gsl_matrix_ushort * m , const size_t j );
function gsl_matrix_ushort_const_column( const m : pgsl_matrix_ushort; const j : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_matrix_ushort_const_diagonal ( const gsl_matrix_ushort * m );
function gsl_matrix_ushort_const_diagonal( const m : pgsl_matrix_ushort ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_matrix_ushort_const_subdiagonal ( const gsl_matrix_ushort * m , const size_t k );
function gsl_matrix_ushort_const_subdiagonal( const m : pgsl_matrix_ushort; const k : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_matrix_ushort_const_superdiagonal ( const gsl_matrix_ushort * m , const size_t k );
function gsl_matrix_ushort_const_superdiagonal( const m : pgsl_matrix_ushort; const k : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_array ( const unsigned short * base , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_const_view_array( const base : punsignedshort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_array_with_tda ( const unsigned short * base , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ushort_const_view_array_with_tda( const base : punsignedshort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_vector ( const gsl_vector_ushort * v , const size_t n1 , const size_t n2 );
function gsl_matrix_ushort_const_view_vector( const v : pgsl_vector_ushort; const n1 : size_t; const n2 : size_t ) : _gsl_matrix_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_vector_with_tda ( const gsl_vector_ushort * v , const size_t n1 , const size_t n2 , const size_t tda );
function gsl_matrix_ushort_const_view_vector_with_tda( const v : pgsl_vector_ushort; const n1 : size_t; const n2 : size_t; const tda : size_t ) : _gsl_matrix_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsigned short gsl_matrix_ushort_get ( const gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_get( const m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_set ( gsl_matrix_ushort * m , const size_t i , const size_t j , const unsignedshort x );
procedure gsl_matrix_ushort_set( m : pgsl_matrix_ushort; const i : size_t; const j : size_t; const x : unsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort * gsl_matrix_ushort_ptr ( gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_ptr( m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : punsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedshort * gsl_matrix_ushort_const_ptr ( const gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_const_ptr( const m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : punsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_set_zero ( gsl_matrix_ushort * m );
procedure gsl_matrix_ushort_set_zero( m : pgsl_matrix_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_set_identity ( gsl_matrix_ushort * m );
procedure gsl_matrix_ushort_set_identity( m : pgsl_matrix_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_set_all ( gsl_matrix_ushort * m , unsignedshort x );
procedure gsl_matrix_ushort_set_all( m : pgsl_matrix_ushort; x : unsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_fread ( FILE * stream , gsl_matrix_ushort * m );
function gsl_matrix_ushort_fread( stream : pFILE; m : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_fwrite ( FILE * stream , const gsl_matrix_ushort * m );
function gsl_matrix_ushort_fwrite( stream : pFILE; const m : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_fscanf ( FILE * stream , gsl_matrix_ushort * m );
function gsl_matrix_ushort_fscanf( stream : pFILE; m : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_fprintf ( FILE * stream , const gsl_matrix_ushort * m , const char * format );
function gsl_matrix_ushort_fprintf( stream : pFILE; const m : pgsl_matrix_ushort; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_memcpy ( gsl_matrix_ushort * dest , const gsl_matrix_ushort * src );
function gsl_matrix_ushort_memcpy( dest : pgsl_matrix_ushort; const src : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_swap ( gsl_matrix_ushort * m1 , gsl_matrix_ushort * m2 );
function gsl_matrix_ushort_swap( m1 : pgsl_matrix_ushort; m2 : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_swap_rows ( gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_swap_rows( m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_swap_columns ( gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_swap_columns( m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_swap_rowcol ( gsl_matrix_ushort * m , const size_t i , const size_t j );
function gsl_matrix_ushort_swap_rowcol( m : pgsl_matrix_ushort; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_transpose ( gsl_matrix_ushort * m );
function gsl_matrix_ushort_transpose( m : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_transpose_memcpy ( gsl_matrix_ushort * dest , const gsl_matrix_ushort * src );
function gsl_matrix_ushort_transpose_memcpy( dest : pgsl_matrix_ushort; const src : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_matrix_ushort_max ( const gsl_matrix_ushort * m );
function gsl_matrix_ushort_max( const m : pgsl_matrix_ushort ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_matrix_ushort_min ( const gsl_matrix_ushort * m );
function gsl_matrix_ushort_min( const m : pgsl_matrix_ushort ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_minmax ( const gsl_matrix_ushort * m , unsignedshort * min_out , unsignedshort * max_out );
procedure gsl_matrix_ushort_minmax( const m : pgsl_matrix_ushort; min_out : punsignedshort; max_out : punsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_max_index ( const gsl_matrix_ushort * m , size_t * imax , size_t * jmax );
procedure gsl_matrix_ushort_max_index( const m : pgsl_matrix_ushort; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_min_index ( const gsl_matrix_ushort * m , size_t * imin , size_t * jmin );
procedure gsl_matrix_ushort_min_index( const m : pgsl_matrix_ushort; imin : psize_t; jmin : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_matrix_ushort_minmax_index ( const gsl_matrix_ushort * m , size_t * imin , size_t * jmin , size_t * imax , size_t * jmax );
procedure gsl_matrix_ushort_minmax_index( const m : pgsl_matrix_ushort; imin : psize_t; jmin : psize_t; imax : psize_t; jmax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_isnull ( const gsl_matrix_ushort * m );
function gsl_matrix_ushort_isnull( const m : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_add ( gsl_matrix_ushort * a , const gsl_matrix_ushort * b );
function gsl_matrix_ushort_add( a : pgsl_matrix_ushort; const b : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_sub ( gsl_matrix_ushort * a , const gsl_matrix_ushort * b );
function gsl_matrix_ushort_sub( a : pgsl_matrix_ushort; const b : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_mul_elements ( gsl_matrix_ushort * a , const gsl_matrix_ushort * b );
function gsl_matrix_ushort_mul_elements( a : pgsl_matrix_ushort; const b : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_div_elements ( gsl_matrix_ushort * a , const gsl_matrix_ushort * b );
function gsl_matrix_ushort_div_elements( a : pgsl_matrix_ushort; const b : pgsl_matrix_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_scale ( gsl_matrix_ushort * a , const double x );
function gsl_matrix_ushort_scale( a : pgsl_matrix_ushort; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_add_constant ( gsl_matrix_ushort * a , const double x );
function gsl_matrix_ushort_add_constant( a : pgsl_matrix_ushort; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_add_diagonal ( gsl_matrix_ushort * a , const double x );
function gsl_matrix_ushort_add_diagonal( a : pgsl_matrix_ushort; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_get_row ( gsl_vector_ushort * v , const gsl_matrix_ushort * m , const size_t i );
function gsl_matrix_ushort_get_row( v : pgsl_vector_ushort; const m : pgsl_matrix_ushort; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_get_col ( gsl_vector_ushort * v , const gsl_matrix_ushort * m , const size_t j );
function gsl_matrix_ushort_get_col( v : pgsl_vector_ushort; const m : pgsl_matrix_ushort; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_set_row ( gsl_matrix_ushort * m , const size_t i , const gsl_vector_ushort * v );
function gsl_matrix_ushort_set_row( m : pgsl_matrix_ushort; const i : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_matrix_ushort_set_col ( gsl_matrix_ushort * m , const size_t j , const gsl_vector_ushort * v );
function gsl_matrix_ushort_set_col( m : pgsl_matrix_ushort; const j : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;

//gsl_message.h
//GSL_EXPORT void gsl_message ( const char * message , const char * file , int line , unsignedint mask );
procedure gsl_message( const message : pchar; const fileName : pchar; line : int; mask : unsignedint ); cdecl; external gsl_dll;

//gsl_min.h
//GSL_EXPORT gsl_min_fminimizer * gsl_min_fminimizer_alloc ( const gsl_min_fminimizer_type * T );
function gsl_min_fminimizer_alloc( const T : pgsl_min_fminimizer_type ) : Pointer ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_min_fminimizer_free ( gsl_min_fminimizer * s );
procedure gsl_min_fminimizer_free( s : pgsl_min_fminimizer ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_min_fminimizer_set ( gsl_min_fminimizer * s , gsl_function * f , double x_minimum , double x_lower , double x_upper );
function gsl_min_fminimizer_set( s : pgsl_min_fminimizer; f : pgsl_function; x_minimum : double; x_lower : double; x_upper : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_min_fminimizer_set_with_values ( gsl_min_fminimizer * s , gsl_function * f , double x_minimum , double f_minimum , double x_lower , double f_lower , double x_upper , double f_upper );
function gsl_min_fminimizer_set_with_values( s : pgsl_min_fminimizer; f : pgsl_function; x_minimum : double; f_minimum : double; x_lower : double; f_lower : double; x_upper : double; f_upper : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_min_fminimizer_iterate ( gsl_min_fminimizer * s );
function gsl_min_fminimizer_iterate( s : pgsl_min_fminimizer ) : int; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_min_fminimizer_name ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_name( const s : pgsl_min_fminimizer ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_x_minimum ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_x_minimum( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_x_lower ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_x_lower( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_x_upper ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_x_upper( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_f_minimum ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_f_minimum( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_f_lower ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_f_lower( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_f_upper ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_f_upper( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_min_fminimizer_minimum ( const gsl_min_fminimizer * s );
function gsl_min_fminimizer_minimum( const s : pgsl_min_fminimizer ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_min_test_interval ( double x_lower , double x_upper , double epsabs , double epsrel );
function gsl_min_test_interval( x_lower : double; x_upper : double; epsabs : double; epsrel : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_min_find_bracket ( gsl_function * f , double * x_minimum , double * f_minimum , double * x_lower , double * f_lower , double * x_upper , double * f_upper , size_t eval_max );
function gsl_min_find_bracket( f : pgsl_function; x_minimum : pdouble; f_minimum : pdouble; x_lower : pdouble; f_lower : pdouble; x_upper : pdouble; f_upper : pdouble; eval_max : size_t ) : int ; cdecl; external gsl_dll;

//gsl_mode.h

//gsl_monte.h

//gsl_monte_miser.h
//GSL_EXPORT int gsl_monte_miser_integrate ( gsl_monte_function * f , const double xl [ ] , const double xh [ ] , size_t dim , size_t calls , gsl_rng * r , gsl_monte_miser_state * state , double * result , double * abserr );
function gsl_monte_miser_integrate( f : pgsl_monte_function; const xl : array of  double; const xh : array of  double; dim : size_t; calls : size_t; r : pgsl_rng; state : pgsl_monte_miser_state; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_monte_miser_state * gsl_monte_miser_alloc ( size_t dim );
function gsl_monte_miser_alloc( dim : size_t ) : pgsl_monte_miser_state; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_monte_miser_init ( gsl_monte_miser_state * state );
function gsl_monte_miser_init( state : pgsl_monte_miser_state ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_monte_miser_free ( gsl_monte_miser_state * state );
procedure gsl_monte_miser_free( state : pgsl_monte_miser_state ); cdecl; external gsl_dll;

//gsl_monte_plain.h
//GSL_EXPORT int gsl_monte_plain_integrate ( const gsl_monte_function * f , const double xl [ ] , const double xu [ ] , const size_t dim , const size_t calls , gsl_rng * r , gsl_monte_plain_state * state , double * result , double * abserr );
function gsl_monte_plain_integrate( const f : pgsl_monte_function; const xl : array of  double; const xu : array of  double; const dim : size_t; const calls : size_t; r : pgsl_rng; state : pgsl_monte_plain_state; result : pdouble; abserr : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_monte_plain_state * gsl_monte_plain_alloc ( size_t dim );
function gsl_monte_plain_alloc( dim : size_t ) : pgsl_monte_plain_state; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_monte_plain_init ( gsl_monte_plain_state * state );
function gsl_monte_plain_init( state : pgsl_monte_plain_state ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_monte_plain_free ( gsl_monte_plain_state * state );
procedure gsl_monte_plain_free( state : pgsl_monte_plain_state ); cdecl; external gsl_dll;

//gsl_monte_vegas.h
//GSL_EXPORT int gsl_monte_vegas_integrate ( gsl_monte_function * f , double xl [ ] , double xu [ ] , size_t dim , size_t calls , gsl_rng * r , gsl_monte_vegas_state * state , double * result , double * abserr );
function gsl_monte_vegas_integrate( f : pgsl_monte_function; xl : array of   double; xu : array of  double; dim : size_t; calls : size_t; r : pgsl_rng; state : pgsl_monte_vegas_state; result : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_monte_vegas_state * gsl_monte_vegas_alloc ( size_t dim );
function gsl_monte_vegas_alloc( dim : size_t ) : pgsl_monte_vegas_state; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_monte_vegas_init ( gsl_monte_vegas_state * state );
function gsl_monte_vegas_init( state : pgsl_monte_vegas_state ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_monte_vegas_free ( gsl_monte_vegas_state * state );
procedure gsl_monte_vegas_free( state : pgsl_monte_vegas_state ); cdecl; external gsl_dll;

//gsl_multifit.h
//GSL_EXPORT gsl_multifit_linear_workspace * gsl_multifit_linear_alloc ( size_t n , size_t p );
function gsl_multifit_linear_alloc( n : size_t; p : size_t ) : pgsl_multifit_linear_workspace ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multifit_linear_free ( gsl_multifit_linear_workspace * work );
procedure gsl_multifit_linear_free( work : pgsl_multifit_linear_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_linear ( const gsl_matrix * X , const gsl_vector * y , gsl_vector * c , gsl_matrix * cov , double * chisq , gsl_multifit_linear_workspace * work );
function gsl_multifit_linear( const X : pgsl_matrix; const y : pgsl_vector; c : pgsl_vector; cov : pgsl_matrix; chisq : pdouble; work : pgsl_multifit_linear_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_linear_svd ( const gsl_matrix * X , const gsl_vector * y , double tol , size_t * rank , gsl_vector * c , gsl_matrix * cov , double * chisq , gsl_multifit_linear_workspace * work );
function gsl_multifit_linear_svd( const X : pgsl_matrix; const y : pgsl_vector; tol : double; rank : psize_t; c : pgsl_vector; cov : pgsl_matrix; chisq : pdouble; work : pgsl_multifit_linear_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_wlinear ( const gsl_matrix * X , const gsl_vector * w , const gsl_vector * y , gsl_vector * c , gsl_matrix * cov , double * chisq , gsl_multifit_linear_workspace * work );
function gsl_multifit_wlinear( const X : pgsl_matrix; const w : pgsl_vector; const y : pgsl_vector; c : pgsl_vector; cov : pgsl_matrix; chisq : pdouble; work : pgsl_multifit_linear_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_wlinear_svd ( const gsl_matrix * X , const gsl_vector * w , const gsl_vector * y , double tol , size_t * rank , gsl_vector * c , gsl_matrix * cov , double * chisq , gsl_multifit_linear_workspace * work );
function gsl_multifit_wlinear_svd( const X : pgsl_matrix; const w : pgsl_vector; const y : pgsl_vector; tol : double; rank : psize_t; c : pgsl_vector; cov : pgsl_matrix; chisq : pdouble; work : pgsl_multifit_linear_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_linear_est ( const gsl_vector * x , const gsl_vector * c , const gsl_matrix * cov , double * y , double * y_err );
function gsl_multifit_linear_est( const x : pgsl_vector; const c : pgsl_vector; const cov : pgsl_matrix; y : pdouble; y_err : pdouble ) : int ; cdecl; external gsl_dll;

//gsl_multifit_nlin.h
//GSL_EXPORT int gsl_multifit_gradient ( const gsl_matrix * J , const gsl_vector * f , gsl_vector * g );
function gsl_multifit_gradient( const J : pgsl_matrix; const f : pgsl_vector; g : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_covar ( const gsl_matrix * J , double epsrel , gsl_matrix * covar );
function gsl_multifit_covar( const J : pgsl_matrix; epsrel : double; covar : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multifit_fsolver * gsl_multifit_fsolver_alloc ( const gsl_multifit_fsolver_type * T , size_t n , size_t p );
function gsl_multifit_fsolver_alloc( const T : pgsl_multifit_fsolver_type; n : size_t; p : size_t ) : pgsl_multifit_fsolver ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multifit_fsolver_free ( gsl_multifit_fsolver * s );
procedure gsl_multifit_fsolver_free( s : pgsl_multifit_fsolver ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_fsolver_set ( gsl_multifit_fsolver * s , gsl_multifit_function * f , gsl_vector * x );
function gsl_multifit_fsolver_set( s : pgsl_multifit_fsolver; f : pgsl_multifit_function; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_fsolver_iterate ( gsl_multifit_fsolver * s );
function gsl_multifit_fsolver_iterate( s : pgsl_multifit_fsolver ) : int; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multifit_fsolver_name ( const gsl_multifit_fsolver * s );
function gsl_multifit_fsolver_name( const s : pgsl_multifit_fsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multifit_fsolver_position ( const gsl_multifit_fsolver * s );
function gsl_multifit_fsolver_position( const s : pgsl_multifit_fsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multifit_fdfsolver * gsl_multifit_fdfsolver_alloc ( const gsl_multifit_fdfsolver_type * T , size_t n , size_t p );
function gsl_multifit_fdfsolver_alloc( const T : pgsl_multifit_fdfsolver_type; n : size_t; p : size_t ) : pgsl_multifit_fdfsolver ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_fdfsolver_set ( gsl_multifit_fdfsolver * s , gsl_multifit_function_fdf * fdf , gsl_vector * x );
function gsl_multifit_fdfsolver_set( s : pgsl_multifit_fdfsolver; fdf : pgsl_multifit_function_fdf; x : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_fdfsolver_iterate ( gsl_multifit_fdfsolver * s );
function gsl_multifit_fdfsolver_iterate( s : pgsl_multifit_fdfsolver ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multifit_fdfsolver_free ( gsl_multifit_fdfsolver * s );
procedure gsl_multifit_fdfsolver_free( s : pgsl_multifit_fdfsolver ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multifit_fdfsolver_name ( const gsl_multifit_fdfsolver * s );
function gsl_multifit_fdfsolver_name( const s : pgsl_multifit_fdfsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multifit_fdfsolver_position ( const gsl_multifit_fdfsolver * s );
function gsl_multifit_fdfsolver_position( const s : pgsl_multifit_fdfsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_test_delta ( const gsl_vector * dx , const gsl_vector * x , double epsabs , double epsrel );
function gsl_multifit_test_delta( const dx : pgsl_vector; const x : pgsl_vector; epsabs : double; epsrel : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multifit_test_gradient ( const gsl_vector * g , double epsabs );
function gsl_multifit_test_gradient( const g : pgsl_vector; epsabs : double ) : int; cdecl; external gsl_dll;

//gsl_multimin.h
//GSL_EXPORT int gsl_multimin_diff ( const gsl_multimin_function * f , const gsl_vector * x , gsl_vector * g );
function gsl_multimin_diff( const f : pgsl_multimin_function; const x : pgsl_vector; g : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multimin_fminimizer * gsl_multimin_fminimizer_alloc ( const gsl_multimin_fminimizer_type * T , size_t n );
function gsl_multimin_fminimizer_alloc( const T : pgsl_multimin_fminimizer_type; n : size_t ) : pgsl_multimin_fminimizer ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_fminimizer_set ( gsl_multimin_fminimizer * s , gsl_multimin_function * f , const gsl_vector * x , const gsl_vector * step_size );
function gsl_multimin_fminimizer_set( s : pgsl_multimin_fminimizer; f : pgsl_multimin_function; const x : pgsl_vector; const step_size : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multimin_fminimizer_free ( gsl_multimin_fminimizer * s );
procedure gsl_multimin_fminimizer_free( s : pgsl_multimin_fminimizer ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multimin_fminimizer_name ( const gsl_multimin_fminimizer * s );
function gsl_multimin_fminimizer_name( const s : pgsl_multimin_fminimizer ) : pchar ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_fminimizer_iterate ( gsl_multimin_fminimizer * s );
function gsl_multimin_fminimizer_iterate( s : pgsl_multimin_fminimizer ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multimin_fminimizer_x ( const gsl_multimin_fminimizer * s );
function gsl_multimin_fminimizer_x( const s : pgsl_multimin_fminimizer ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_multimin_fminimizer_minimum ( const gsl_multimin_fminimizer * s );
function gsl_multimin_fminimizer_minimum( const s : pgsl_multimin_fminimizer ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_multimin_fminimizer_size ( const gsl_multimin_fminimizer * s );
function gsl_multimin_fminimizer_size( const s : pgsl_multimin_fminimizer ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_test_gradient ( const gsl_vector * g , double epsabs );
function gsl_multimin_test_gradient( const g : pgsl_vector; epsabs : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_test_size ( const double size , double epsabs );
function gsl_multimin_test_size( const size : double; epsabs : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multimin_fdfminimizer * gsl_multimin_fdfminimizer_alloc ( const gsl_multimin_fdfminimizer_type * T , size_t n );
function gsl_multimin_fdfminimizer_alloc( const T : pgsl_multimin_fdfminimizer_type; n : size_t ) : pgsl_multimin_fdfminimizer ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_fdfminimizer_set ( gsl_multimin_fdfminimizer * s , gsl_multimin_function_fdf * fdf , const gsl_vector * x , double step_size , double tol );
function gsl_multimin_fdfminimizer_set( s : pgsl_multimin_fdfminimizer; fdf : pgsl_multimin_function_fdf; const x : pgsl_vector; step_size : double; tol : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multimin_fdfminimizer_free ( gsl_multimin_fdfminimizer * s );
procedure gsl_multimin_fdfminimizer_free( s : pgsl_multimin_fdfminimizer ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multimin_fdfminimizer_name ( const gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_name( const s : pgsl_multimin_fdfminimizer ) : pchar ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_fdfminimizer_iterate ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_iterate( s : pgsl_multimin_fdfminimizer ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multimin_fdfminimizer_restart ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_restart( s : pgsl_multimin_fdfminimizer ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multimin_fdfminimizer_x ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_x( s : pgsl_multimin_fdfminimizer ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multimin_fdfminimizer_dx ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_dx( s : pgsl_multimin_fdfminimizer ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multimin_fdfminimizer_gradient ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_gradient( s : pgsl_multimin_fdfminimizer ) : pgsl_vector ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_multimin_fdfminimizer_minimum ( gsl_multimin_fdfminimizer * s );
function gsl_multimin_fdfminimizer_minimum( s : pgsl_multimin_fdfminimizer ) : double ; cdecl; external gsl_dll;

//gsl_multiroots.h
//GSL_EXPORT int gsl_multiroot_fdjacobian ( gsl_multiroot_function * F , const gsl_vector * x , const gsl_vector * f , double epsrel , gsl_matrix * jacobian );
function gsl_multiroot_fdjacobian( m : pgsl_multiroot_function; const x : pgsl_vector; const f : pgsl_vector; epsrel : double; jacobian : pgsl_matrix ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multiroot_fsolver * gsl_multiroot_fsolver_alloc ( const gsl_multiroot_fsolver_type * T , size_t n );
function gsl_multiroot_fsolver_alloc( const T : pgsl_multiroot_fsolver_type; n : size_t ) : pgsl_multiroot_fsolver ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multiroot_fsolver_free ( gsl_multiroot_fsolver * s );
procedure gsl_multiroot_fsolver_free( s : pgsl_multiroot_fsolver ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_fsolver_set ( gsl_multiroot_fsolver * s , gsl_multiroot_function * f , gsl_vector * x );
function gsl_multiroot_fsolver_set( s : pgsl_multiroot_fsolver; f : pgsl_multiroot_function; x : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_fsolver_iterate ( gsl_multiroot_fsolver * s );
function gsl_multiroot_fsolver_iterate( s : pgsl_multiroot_fsolver ) : int; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multiroot_fsolver_name ( const gsl_multiroot_fsolver * s );
function gsl_multiroot_fsolver_name( const s : pgsl_multiroot_fsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fsolver_root ( const gsl_multiroot_fsolver * s );
function gsl_multiroot_fsolver_root( const s : pgsl_multiroot_fsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fsolver_dx ( const gsl_multiroot_fsolver * s );
function gsl_multiroot_fsolver_dx( const s : pgsl_multiroot_fsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fsolver_f ( const gsl_multiroot_fsolver * s );
function gsl_multiroot_fsolver_f( const s : pgsl_multiroot_fsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_multiroot_fdfsolver * gsl_multiroot_fdfsolver_alloc ( const gsl_multiroot_fdfsolver_type * T , size_t n );
function gsl_multiroot_fdfsolver_alloc( const T : pgsl_multiroot_fdfsolver_type; n : size_t ) : pgsl_multiroot_fdfsolver ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_fdfsolver_set ( gsl_multiroot_fdfsolver * s , gsl_multiroot_function_fdf * fdf , gsl_vector * x );
function gsl_multiroot_fdfsolver_set( s : pgsl_multiroot_fdfsolver; fdf : pgsl_multiroot_function_fdf; x : pgsl_vector ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_fdfsolver_iterate ( gsl_multiroot_fdfsolver * s );
function gsl_multiroot_fdfsolver_iterate( s : pgsl_multiroot_fdfsolver ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_multiroot_fdfsolver_free ( gsl_multiroot_fdfsolver * s );
procedure gsl_multiroot_fdfsolver_free( s : pgsl_multiroot_fdfsolver ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_multiroot_fdfsolver_name ( const gsl_multiroot_fdfsolver * s );
function gsl_multiroot_fdfsolver_name( const s : pgsl_multiroot_fdfsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fdfsolver_root ( const gsl_multiroot_fdfsolver * s );
function gsl_multiroot_fdfsolver_root( const s : pgsl_multiroot_fdfsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fdfsolver_dx ( const gsl_multiroot_fdfsolver * s );
function gsl_multiroot_fdfsolver_dx( const s : pgsl_multiroot_fdfsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_multiroot_fdfsolver_f ( const gsl_multiroot_fdfsolver * s );
function gsl_multiroot_fdfsolver_f( const s : pgsl_multiroot_fdfsolver ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_test_delta ( const gsl_vector * dx , const gsl_vector * x , double epsabs , double epsrel );
function gsl_multiroot_test_delta( const dx : pgsl_vector; const x : pgsl_vector; epsabs : double; epsrel : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_multiroot_test_residual ( const gsl_vector * f , double epsabs );
function gsl_multiroot_test_residual( const f : pgsl_vector; epsabs : double ) : int; cdecl; external gsl_dll;

//gsl_nan.h

//gsl_ntuple.h
//GSL_EXPORT gsl_ntuple * gsl_ntuple_open ( char * filename , void * ntuple_data , size_t size );
function gsl_ntuple_open( filename : pchar; ntuple_data : pvoid; size : size_t ) : pgsl_ntuple ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_ntuple * gsl_ntuple_create ( char * filename , void * ntuple_data , size_t size );
function gsl_ntuple_create( filename : pchar; ntuple_data : pvoid; size : size_t ) : pgsl_ntuple ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ntuple_write ( gsl_ntuple * ntuple );
function gsl_ntuple_write( ntuple : pgsl_ntuple ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ntuple_read ( gsl_ntuple * ntuple );
function gsl_ntuple_read( ntuple : pgsl_ntuple ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ntuple_bookdata ( gsl_ntuple * ntuple );
function gsl_ntuple_bookdata( ntuple : pgsl_ntuple ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ntuple_project ( gsl_histogram * h , gsl_ntuple * ntuple , gsl_ntuple_value_fn * value_func , gsl_ntuple_select_fn * select_func );
function gsl_ntuple_project( h : pgsl_histogram; ntuple : pgsl_ntuple; value_func : pgsl_ntuple_value_fn; select_func : pgsl_ntuple_select_fn ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ntuple_close ( gsl_ntuple * ntuple );
function gsl_ntuple_close( ntuple : pgsl_ntuple ) : int; cdecl; external gsl_dll;

//gsl_odeiv.h
//GSL_EXPORT gsl_odeiv_step * gsl_odeiv_step_alloc ( const gsl_odeiv_step_type * T , size_t dim );
function gsl_odeiv_step_alloc( const T : pgsl_odeiv_step_type; dim : size_t ) : pgsl_odeiv_step; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_step_reset ( gsl_odeiv_step * s );
function gsl_odeiv_step_reset( s : pgsl_odeiv_step ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_odeiv_step_free ( gsl_odeiv_step * s );
procedure gsl_odeiv_step_free( s : pgsl_odeiv_step ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_odeiv_step_name ( const gsl_odeiv_step * );
function gsl_odeiv_step_name( const BB : pgsl_odeiv_step ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_odeiv_step_order ( const gsl_odeiv_step * s );
function gsl_odeiv_step_order( const s : pgsl_odeiv_step ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_step_apply ( gsl_odeiv_step * , double t , double h , double y [ ] , double yerr [ ] , const double dydt_in [ ] , double dydt_out [ ] , const gsl_odeiv_system * dydt );
function gsl_odeiv_step_apply( WW : pgsl_odeiv_step; t : double; h : double; y : array of  double; yerr : array of  double; const dydt_in : array of  double; dydt_out : array of  double; const dydt : pgsl_odeiv_system ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_control * gsl_odeiv_control_alloc ( const gsl_odeiv_control_type * T );
function gsl_odeiv_control_alloc( const T : pgsl_odeiv_control_type ) : pgsl_odeiv_control; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_control_init ( gsl_odeiv_control * c , double eps_abs , double eps_rel , double a_y , double a_dydt );
function gsl_odeiv_control_init( c : pgsl_odeiv_control; eps_abs : double; eps_rel : double; a_y : double; a_dydt : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_odeiv_control_free ( gsl_odeiv_control * c );
procedure gsl_odeiv_control_free( c : pgsl_odeiv_control ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_control_hadjust ( gsl_odeiv_control * c , gsl_odeiv_step * s , const double y0 [ ] , const double yerr [ ] , const double dydt [ ] , double * h );
function gsl_odeiv_control_hadjust( c : pgsl_odeiv_control; s : pgsl_odeiv_step; const y0 : array of  double; const yerr : array of  double; const dydt : array of  double; h : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_odeiv_control_name ( const gsl_odeiv_control * c );
function gsl_odeiv_control_name( const c : pgsl_odeiv_control ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_control * gsl_odeiv_control_standard_new ( double eps_abs , double eps_rel , double a_y , double a_dydt );
function gsl_odeiv_control_standard_new( eps_abs : double; eps_rel : double; a_y : double; a_dydt : double ) : pgsl_odeiv_control; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_control * gsl_odeiv_control_y_new ( double eps_abs , double eps_rel );
function gsl_odeiv_control_y_new( eps_abs : double; eps_rel : double ) : pgsl_odeiv_control; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_control * gsl_odeiv_control_yp_new ( double eps_abs , double eps_rel );
function gsl_odeiv_control_yp_new( eps_abs : double; eps_rel : double ) : pgsl_odeiv_control; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_control * gsl_odeiv_control_scaled_new ( double eps_abs , double eps_rel , double a_y , double a_dydt , const double scale_abs [ ] , size_t dim );
function gsl_odeiv_control_scaled_new( eps_abs : double; eps_rel : double; a_y : double; a_dydt : double; const scale_abs : array of  double; dim : size_t ) : pgsl_odeiv_control; cdecl; external gsl_dll;
//GSL_EXPORT gsl_odeiv_evolve * gsl_odeiv_evolve_alloc ( size_t dim );
function gsl_odeiv_evolve_alloc( dim : size_t ) : pgsl_odeiv_evolve; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_evolve_apply ( gsl_odeiv_evolve * , gsl_odeiv_control * con , gsl_odeiv_step * step , const gsl_odeiv_system * dydt , double * t , double t1 , double * h , double y [ ] );
function gsl_odeiv_evolve_apply( LL : pgsl_odeiv_evolve; con : pgsl_odeiv_control; step : pgsl_odeiv_step; const dydt : pgsl_odeiv_system; t : pdouble; t1 : double; h : pdouble; y : array of  double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_odeiv_evolve_reset ( gsl_odeiv_evolve * );
function gsl_odeiv_evolve_reset( RR : pgsl_odeiv_evolve ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_odeiv_evolve_free ( gsl_odeiv_evolve * );
procedure gsl_odeiv_evolve_free( arg : pgsl_odeiv_evolve ); cdecl; external gsl_dll;

//gsl_permutation.h
//GSL_EXPORT gsl_permutation * gsl_permutation_alloc ( const size_t n );
function gsl_permutation_alloc( const n : size_t ) : pgsl_permutation; cdecl; external gsl_dll;
//GSL_EXPORT gsl_permutation * gsl_permutation_calloc ( const size_t n );
function gsl_permutation_calloc( const n : size_t ) : pgsl_permutation; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_permutation_init ( gsl_permutation * p );
procedure gsl_permutation_init( p : pgsl_permutation ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_permutation_free ( gsl_permutation * p );
procedure gsl_permutation_free( p : pgsl_permutation ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_memcpy ( gsl_permutation * dest , const gsl_permutation * src );
function gsl_permutation_memcpy( dest : pgsl_permutation; const src : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_fread ( FILE * stream , gsl_permutation * p );
function gsl_permutation_fread( stream : pFILE; p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_fwrite ( FILE * stream , const gsl_permutation * p );
function gsl_permutation_fwrite( stream : pFILE; const p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_fscanf ( FILE * stream , gsl_permutation * p );
function gsl_permutation_fscanf( stream : pFILE; p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_fprintf ( FILE * stream , const gsl_permutation * p , const char * format );
function gsl_permutation_fprintf( stream : pFILE; const p : pgsl_permutation; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_permutation_size ( const gsl_permutation * p );
function gsl_permutation_size( const p : pgsl_permutation ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t * gsl_permutation_data ( const gsl_permutation * p );
function gsl_permutation_data( const p : pgsl_permutation ) : psize_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_permutation_get ( const gsl_permutation * p , const size_t i );
function gsl_permutation_get( const p : pgsl_permutation; const i : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_swap ( gsl_permutation * p , const size_t i , const size_t j );
function gsl_permutation_swap( p : pgsl_permutation; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_valid ( gsl_permutation * p );
function gsl_permutation_valid( p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_permutation_reverse ( gsl_permutation * p );
procedure gsl_permutation_reverse( p : pgsl_permutation ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_inverse ( gsl_permutation * inv , const gsl_permutation * p );
function gsl_permutation_inverse( inv : pgsl_permutation; const p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_next ( gsl_permutation * p );
function gsl_permutation_next( p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_prev ( gsl_permutation * p );
function gsl_permutation_prev( p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_mul ( gsl_permutation * p , const gsl_permutation * pa , const gsl_permutation * pb );
function gsl_permutation_mul( p : pgsl_permutation; const pa : pgsl_permutation; const pb : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_linear_to_canonical ( gsl_permutation * q , const gsl_permutation * p );
function gsl_permutation_linear_to_canonical( q : pgsl_permutation; const p : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permutation_canonical_to_linear ( gsl_permutation * p , const gsl_permutation * q );
function gsl_permutation_canonical_to_linear( p : pgsl_permutation; const q : pgsl_permutation ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_permutation_inversions ( const gsl_permutation * p );
function gsl_permutation_inversions( const p : pgsl_permutation ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_permutation_linear_cycles ( const gsl_permutation * p );
function gsl_permutation_linear_cycles( const p : pgsl_permutation ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_permutation_canonical_cycles ( const gsl_permutation * q );
function gsl_permutation_canonical_cycles( const q : pgsl_permutation ) : size_t; cdecl; external gsl_dll;

//gsl_permute.h

//gsl_permute_char.h
//GSL_EXPORT int gsl_permute_char ( const size_t * p , char * data , const size_t stride , const size_t n );
function gsl_permute_char( const p : psize_t; data : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_char_inverse ( const size_t * p , char * data , const size_t stride , const size_t n );
function gsl_permute_char_inverse( const p : psize_t; data : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_complex_double.h
//GSL_EXPORT int gsl_permute_complex ( const size_t * p , double * data , const size_t stride , const size_t n );
function gsl_permute_complex( const p : psize_t; data : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_complex_inverse ( const size_t * p , double * data , const size_t stride , const size_t n );
function gsl_permute_complex_inverse( const p : psize_t; data : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_complex_float.h
//GSL_EXPORT int gsl_permute_complex_float ( const size_t * p , float * data , const size_t stride , const size_t n );
function gsl_permute_complex_float( const p : psize_t; data : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_complex_float_inverse ( const size_t * p , float * data , const size_t stride , const size_t n );
function gsl_permute_complex_float_inverse( const p : psize_t; data : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_complex_long_double.h
//GSL_EXPORT int gsl_permute_complex_long_double ( const size_t * p , long double * data , const size_t stride , const size_t n );
function gsl_permute_complex_long_double( const p : psize_t; data : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_complex_long_double_inverse ( const size_t * p , long double * data , const size_t stride , const size_t n );
function gsl_permute_complex_long_double_inverse( const p : psize_t; data : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_double.h
//GSL_EXPORT int gsl_permute ( const size_t * p , double * data , const size_t stride , const size_t n );
function gsl_permute( const p : psize_t; data : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_inverse ( const size_t * p , double * data , const size_t stride , const size_t n );
function gsl_permute_inverse( const p : psize_t; data : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_float.h
//GSL_EXPORT int gsl_permute_float ( const size_t * p , float * data , const size_t stride , const size_t n );
function gsl_permute_float( const p : psize_t; data : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_float_inverse ( const size_t * p , float * data , const size_t stride , const size_t n );
function gsl_permute_float_inverse( const p : psize_t; data : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_int.h
//GSL_EXPORT int gsl_permute_int ( const size_t * p , int * data , const size_t stride , const size_t n );
function gsl_permute_int( const p : psize_t; data : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_int_inverse ( const size_t * p , int * data , const size_t stride , const size_t n );
function gsl_permute_int_inverse( const p : psize_t; data : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_long.h
//GSL_EXPORT int gsl_permute_long ( const size_t * p , long * data , const size_t stride , const size_t n );
function gsl_permute_long( const p : psize_t; data : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_long_inverse ( const size_t * p , long * data , const size_t stride , const size_t n );
function gsl_permute_long_inverse( const p : psize_t; data : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_long_double.h
//GSL_EXPORT int gsl_permute_long_double ( const size_t * p , long double * data , const size_t stride , const size_t n );
function gsl_permute_long_double( const p : psize_t; data : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_long_double_inverse ( const size_t * p , long double * data , const size_t stride , const size_t n );
function gsl_permute_long_double_inverse( const p : psize_t; data : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_short.h
//GSL_EXPORT int gsl_permute_short ( const size_t * p , short * data , const size_t stride , const size_t n );
function gsl_permute_short( const p : psize_t; data : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_short_inverse ( const size_t * p , short * data , const size_t stride , const size_t n );
function gsl_permute_short_inverse( const p : psize_t; data : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_uchar.h
//GSL_EXPORT int gsl_permute_uchar ( const size_t * p , unsignedchar * data , const size_t stride , const size_t n );
function gsl_permute_uchar( const p : psize_t; data : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_uchar_inverse ( const size_t * p , unsignedchar * data , const size_t stride , const size_t n );
function gsl_permute_uchar_inverse( const p : psize_t; data : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_uint.h
//GSL_EXPORT int gsl_permute_uint ( const size_t * p , unsignedint * data , const size_t stride , const size_t n );
function gsl_permute_uint( const p : psize_t; data : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_uint_inverse ( const size_t * p , unsignedint * data , const size_t stride , const size_t n );
function gsl_permute_uint_inverse( const p : psize_t; data : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_ulong.h
//GSL_EXPORT int gsl_permute_ulong ( const size_t * p , unsignedlong * data , const size_t stride , const size_t n );
function gsl_permute_ulong( const p : psize_t; data : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_ulong_inverse ( const size_t * p , unsignedlong * data , const size_t stride , const size_t n );
function gsl_permute_ulong_inverse( const p : psize_t; data : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_ushort.h
//GSL_EXPORT int gsl_permute_ushort ( const size_t * p , unsignedshort * data , const size_t stride , const size_t n );
function gsl_permute_ushort( const p : psize_t; data : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_ushort_inverse ( const size_t * p , unsignedshort * data , const size_t stride , const size_t n );
function gsl_permute_ushort_inverse( const p : psize_t; data : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_permute_vector.h

//gsl_permute_vector_char.h
//GSL_EXPORT int gsl_permute_vector_char ( const gsl_permutation * p , gsl_vector_char * v );
function gsl_permute_vector_char( const p : pgsl_permutation; v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_char_inverse ( const gsl_permutation * p , gsl_vector_char * v );
function gsl_permute_vector_char_inverse( const p : pgsl_permutation; v : pgsl_vector_char ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_complex_double.h
//GSL_EXPORT int gsl_permute_vector_complex ( const gsl_permutation * p , gsl_vector_complex * v );
function gsl_permute_vector_complex( const p : pgsl_permutation; v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_complex_inverse ( const gsl_permutation * p , gsl_vector_complex * v );
function gsl_permute_vector_complex_inverse( const p : pgsl_permutation; v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_complex_float.h
//GSL_EXPORT int gsl_permute_vector_complex_float ( const gsl_permutation * p , gsl_vector_complex_float * v );
function gsl_permute_vector_complex_float( const p : pgsl_permutation; v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_complex_float_inverse ( const gsl_permutation * p , gsl_vector_complex_float * v );
function gsl_permute_vector_complex_float_inverse( const p : pgsl_permutation; v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_complex_long_double.h
//GSL_EXPORT int gsl_permute_vector_complex_long_double ( const gsl_permutation * p , gsl_vector_complex_long_double * v );
function gsl_permute_vector_complex_long_double( const p : pgsl_permutation; v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_complex_long_double_inverse ( const gsl_permutation * p , gsl_vector_complex_long_double * v );
function gsl_permute_vector_complex_long_double_inverse( const p : pgsl_permutation; v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_double.h
//GSL_EXPORT int gsl_permute_vector ( const gsl_permutation * p , gsl_vector * v );
function gsl_permute_vector( const p : pgsl_permutation; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_inverse ( const gsl_permutation * p , gsl_vector * v );
function gsl_permute_vector_inverse( const p : pgsl_permutation; v : pgsl_vector ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_float.h
//GSL_EXPORT int gsl_permute_vector_float ( const gsl_permutation * p , gsl_vector_float * v );
function gsl_permute_vector_float( const p : pgsl_permutation; v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_float_inverse ( const gsl_permutation * p , gsl_vector_float * v );
function gsl_permute_vector_float_inverse( const p : pgsl_permutation; v : pgsl_vector_float ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_int.h
//GSL_EXPORT int gsl_permute_vector_int ( const gsl_permutation * p , gsl_vector_int * v );
function gsl_permute_vector_int( const p : pgsl_permutation; v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_int_inverse ( const gsl_permutation * p , gsl_vector_int * v );
function gsl_permute_vector_int_inverse( const p : pgsl_permutation; v : pgsl_vector_int ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_long.h
//GSL_EXPORT int gsl_permute_vector_long ( const gsl_permutation * p , gsl_vector_long * v );
function gsl_permute_vector_long( const p : pgsl_permutation; v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_long_inverse ( const gsl_permutation * p , gsl_vector_long * v );
function gsl_permute_vector_long_inverse( const p : pgsl_permutation; v : pgsl_vector_long ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_long_double.h
//GSL_EXPORT int gsl_permute_vector_long_double ( const gsl_permutation * p , gsl_vector_long_double * v );
function gsl_permute_vector_long_double( const p : pgsl_permutation; v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_long_double_inverse ( const gsl_permutation * p , gsl_vector_long_double * v );
function gsl_permute_vector_long_double_inverse( const p : pgsl_permutation; v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_short.h
//GSL_EXPORT int gsl_permute_vector_short ( const gsl_permutation * p , gsl_vector_short * v );
function gsl_permute_vector_short( const p : pgsl_permutation; v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_short_inverse ( const gsl_permutation * p , gsl_vector_short * v );
function gsl_permute_vector_short_inverse( const p : pgsl_permutation; v : pgsl_vector_short ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_uchar.h
//GSL_EXPORT int gsl_permute_vector_uchar ( const gsl_permutation * p , gsl_vector_uchar * v );
function gsl_permute_vector_uchar( const p : pgsl_permutation; v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_uchar_inverse ( const gsl_permutation * p , gsl_vector_uchar * v );
function gsl_permute_vector_uchar_inverse( const p : pgsl_permutation; v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_uint.h
//GSL_EXPORT int gsl_permute_vector_uint ( const gsl_permutation * p , gsl_vector_uint * v );
function gsl_permute_vector_uint( const p : pgsl_permutation; v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_uint_inverse ( const gsl_permutation * p , gsl_vector_uint * v );
function gsl_permute_vector_uint_inverse( const p : pgsl_permutation; v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_ulong.h
//GSL_EXPORT int gsl_permute_vector_ulong ( const gsl_permutation * p , gsl_vector_ulong * v );
function gsl_permute_vector_ulong( const p : pgsl_permutation; v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_ulong_inverse ( const gsl_permutation * p , gsl_vector_ulong * v );
function gsl_permute_vector_ulong_inverse( const p : pgsl_permutation; v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;

//gsl_permute_vector_ushort.h
//GSL_EXPORT int gsl_permute_vector_ushort ( const gsl_permutation * p , gsl_vector_ushort * v );
function gsl_permute_vector_ushort( const p : pgsl_permutation; v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_permute_vector_ushort_inverse ( const gsl_permutation * p , gsl_vector_ushort * v );
function gsl_permute_vector_ushort_inverse( const p : pgsl_permutation; v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;

//gsl_poly.h
//GSL_EXPORT double gsl_poly_eval ( const double c [ ] , const int len , const double x );
function gsl_poly_eval( const c : array of  double; const len : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_dd_init ( double dd [ ] , const double x [ ] , const double y [ ] , size_t size );
function gsl_poly_dd_init( dd : array of  double; const x : array of  double; const y : array of  double; size : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_poly_dd_eval ( const double dd [ ] , const double xa [ ] , const size_t size , const double x );
function gsl_poly_dd_eval( const dd : array of  double; const xa : array of  double; const size : size_t; const x : double ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_dd_taylor ( double c [ ] , double xp , const double dd [ ] , const double x [ ] , size_t size , double w [ ] );
function gsl_poly_dd_taylor( c : array of  double; xp : double; const dd : array of  double; const x : array of  double; size : size_t; w : array of   double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_solve_quadratic ( double a , double b , double c , double * x0 , double * x1 );
function gsl_poly_solve_quadratic( a : double; b : double; c : double; x0 : pdouble; x1 : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_complex_solve_quadratic ( double a , double b , double c , gsl_complex * z0 , gsl_complex * z1 );
function gsl_poly_complex_solve_quadratic( a : double; b : double; c : double; z0 : pgsl_complex; z1 : pgsl_complex ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_solve_cubic ( double a , double b , double c , double * x0 , double * x1 , double * x2 );
function gsl_poly_solve_cubic( a : double; b : double; c : double; x0 : pdouble; x1 : pdouble; x2 : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_complex_solve_cubic ( double a , double b , double c , gsl_complex * z0 , gsl_complex * z1 , gsl_complex * z2 );
function gsl_poly_complex_solve_cubic( a : double; b : double; c : double; z0 : pgsl_complex; z1 : pgsl_complex; z2 : pgsl_complex ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_poly_complex_workspace * gsl_poly_complex_workspace_alloc ( size_t n );
function gsl_poly_complex_workspace_alloc( n : size_t ) : pgsl_poly_complex_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_poly_complex_workspace_free ( gsl_poly_complex_workspace * w );
procedure gsl_poly_complex_workspace_free( w : pgsl_poly_complex_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_poly_complex_solve ( const double * a , size_t n , gsl_poly_complex_workspace * w , gsl_complex_packed_ptr z );
function gsl_poly_complex_solve( const a : pdouble; n : size_t; w : pgsl_poly_complex_workspace; z : gsl_complex_packed_ptr ) : int ; cdecl; external gsl_dll;

//gsl_pow_int.h
//GSL_EXPORT double gsl_pow_2 ( const double x );
function gsl_pow_2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_3 ( const double x );
function gsl_pow_3( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_4 ( const double x );
function gsl_pow_4( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_5 ( const double x );
function gsl_pow_5( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_6 ( const double x );
function gsl_pow_6( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_7 ( const double x );
function gsl_pow_7( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_8 ( const double x );
function gsl_pow_8( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_9 ( const double x );
function gsl_pow_9( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_pow_int ( double x , int n );
function gsl_pow_int( x : double; n : int ) : double; cdecl; external gsl_dll;

//gsl_precision.h

//gsl_qrng.h
//GSL_EXPORT gsl_qrng * gsl_qrng_alloc ( const gsl_qrng_type * T , unsignedint dimension );
function gsl_qrng_alloc( const T : pgsl_qrng_type; dimension : unsignedint ) : pgsl_qrng; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_qrng_memcpy ( gsl_qrng * dest , const gsl_qrng * src );
function gsl_qrng_memcpy( dest : pgsl_qrng; const src : pgsl_qrng ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_qrng * gsl_qrng_clone ( const gsl_qrng * r );
function gsl_qrng_clone( const r : pgsl_qrng ) : pgsl_qrng; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_qrng_free ( gsl_qrng * r );
procedure gsl_qrng_free( r : pgsl_qrng ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_qrng_init ( gsl_qrng * r );
procedure gsl_qrng_init( r : pgsl_qrng ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_qrng_name ( const gsl_qrng * r );
function gsl_qrng_name( const r : pgsl_qrng ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_qrng_size ( const gsl_qrng * r );
function gsl_qrng_size( const r : pgsl_qrng ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void * gsl_qrng_state ( const gsl_qrng * r );
function gsl_qrng_state( const r : pgsl_qrng ) : pvoid; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_qrng_get ( const gsl_qrng * r , double x [ ] );
function gsl_qrng_get( const r : pgsl_qrng; x : array of  double ) : int; cdecl; external gsl_dll;

//gsl_randist.h
//GSL_EXPORT unsignedint gsl_ran_bernoulli ( const gsl_rng * r , double p );
function gsl_ran_bernoulli( const r : pgsl_rng; p : double ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_bernoulli_pdf ( const unsignedint k , double p );
function gsl_ran_bernoulli_pdf( const k : unsignedint; p : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_beta ( const gsl_rng * r , const double a , const double b );
function gsl_ran_beta( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_beta_pdf ( const double x , const double a , const double b );
function gsl_ran_beta_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_binomial ( const gsl_rng * r , double p , unsignedint n );
function gsl_ran_binomial( const r : pgsl_rng; p : double; n : unsignedint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_binomial_knuth ( const gsl_rng * r , double p , unsignedint n );
function gsl_ran_binomial_knuth( const r : pgsl_rng; p : double; n : unsignedint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_binomial_tpe ( const gsl_rng * r , double p , unsignedint n );
function gsl_ran_binomial_tpe( const r : pgsl_rng; p : double; n : unsignedint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_binomial_pdf ( const unsignedint k , const double p , const unsignedint n );
function gsl_ran_binomial_pdf( const k : unsignedint; const p : double; const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_exponential ( const gsl_rng * r , const double mu );
function gsl_ran_exponential( const r : pgsl_rng; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_exponential_pdf ( const double x , const double mu );
function gsl_ran_exponential_pdf( const x : double; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_exppow ( const gsl_rng * r , const double a , const double b );
function gsl_ran_exppow( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_exppow_pdf ( const double x , const double a , const double b );
function gsl_ran_exppow_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_cauchy ( const gsl_rng * r , const double a );
function gsl_ran_cauchy( const r : pgsl_rng; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_cauchy_pdf ( const double x , const double a );
function gsl_ran_cauchy_pdf( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_chisq ( const gsl_rng * r , const double nu );
function gsl_ran_chisq( const r : pgsl_rng; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_chisq_pdf ( const double x , const double nu );
function gsl_ran_chisq_pdf( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_dirichlet ( const gsl_rng * r , const size_t K , const double alpha [ ] , double theta [ ] );
procedure gsl_ran_dirichlet( const r : pgsl_rng; const K : size_t; const alpha : array of  double; theta : array of  double ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_dirichlet_pdf ( const size_t K , const double alpha [ ] , const double theta [ ] );
function gsl_ran_dirichlet_pdf( const K : size_t; const alpha : array of  double; const theta : array of  double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_dirichlet_lnpdf ( const size_t K , const double alpha [ ] , const double theta [ ] );
function gsl_ran_dirichlet_lnpdf( const K : size_t; const alpha : array of  double; const theta : array of  double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_erlang ( const gsl_rng * r , const double a , const double n );
function gsl_ran_erlang( const r : pgsl_rng; const a : double; const n : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_erlang_pdf ( const double x , const double a , const double n );
function gsl_ran_erlang_pdf( const x : double; const a : double; const n : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_fdist ( const gsl_rng * r , const double nu1 , const double nu2 );
function gsl_ran_fdist( const r : pgsl_rng; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_fdist_pdf ( const double x , const double nu1 , const double nu2 );
function gsl_ran_fdist_pdf( const x : double; const nu1 : double; const nu2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_flat ( const gsl_rng * r , const double a , const double b );
function gsl_ran_flat( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_flat_pdf ( double x , const double a , const double b );
function gsl_ran_flat_pdf( x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gamma ( const gsl_rng * r , const double a , const double b );
function gsl_ran_gamma( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gamma_int ( const gsl_rng * r , const unsignedint a );
function gsl_ran_gamma_int( const r : pgsl_rng; const a : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gamma_pdf ( const double x , const double a , const double b );
function gsl_ran_gamma_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gamma_mt ( const gsl_rng * r , const double a , const double b );
function gsl_ran_gamma_mt( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian ( const gsl_rng * r , const double sigma );
function gsl_ran_gaussian( const r : pgsl_rng; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian_ratio_method ( const gsl_rng * r , const double sigma );
function gsl_ran_gaussian_ratio_method( const r : pgsl_rng; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian_ziggurat ( const gsl_rng * r , const double sigma );
function gsl_ran_gaussian_ziggurat( const r : pgsl_rng; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian_pdf ( const double x , const double sigma );
function gsl_ran_gaussian_pdf( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_ugaussian ( const gsl_rng * r );
function gsl_ran_ugaussian( const r : pgsl_rng ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_ugaussian_ratio_method ( const gsl_rng * r );
function gsl_ran_ugaussian_ratio_method( const r : pgsl_rng ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_ugaussian_pdf ( const double x );
function gsl_ran_ugaussian_pdf( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian_tail ( const gsl_rng * r , const double a , const double sigma );
function gsl_ran_gaussian_tail( const r : pgsl_rng; const a : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gaussian_tail_pdf ( const double x , const double a , const double sigma );
function gsl_ran_gaussian_tail_pdf( const x : double; const a : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_ugaussian_tail ( const gsl_rng * r , const double a );
function gsl_ran_ugaussian_tail( const r : pgsl_rng; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_ugaussian_tail_pdf ( const double x , const double a );
function gsl_ran_ugaussian_tail_pdf( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_bivariate_gaussian ( const gsl_rng * r , double sigma_x , double sigma_y , double rho , double * x , double * y );
procedure gsl_ran_bivariate_gaussian( const r : pgsl_rng; sigma_x : double; sigma_y : double; rho : double; x : pdouble; y : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_bivariate_gaussian_pdf ( const double x , const double y , const double sigma_x , const double sigma_y , const double rho );
function gsl_ran_bivariate_gaussian_pdf( const x : double; const y : double; const sigma_x : double; const sigma_y : double; const rho : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_landau ( const gsl_rng * r );
function gsl_ran_landau( const r : pgsl_rng ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_landau_pdf ( const double x );
function gsl_ran_landau_pdf( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_geometric ( const gsl_rng * r , const double p );
function gsl_ran_geometric( const r : pgsl_rng; const p : double ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_geometric_pdf ( const unsignedint k , const double p );
function gsl_ran_geometric_pdf( const k : unsignedint; const p : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_hypergeometric ( const gsl_rng * r , unsignedint n1 , unsignedint n2 , unsignedint t );
function gsl_ran_hypergeometric( const r : pgsl_rng; n1 : unsignedint; n2 : unsignedint; t : unsignedint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_hypergeometric_pdf ( const unsignedint k , const unsignedint n1 , const unsignedint n2 , unsignedint t );
function gsl_ran_hypergeometric_pdf( const k : unsignedint; const n1 : unsignedint; const n2 : unsignedint; t : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gumbel1 ( const gsl_rng * r , const double a , const double b );
function gsl_ran_gumbel1( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gumbel1_pdf ( const double x , const double a , const double b );
function gsl_ran_gumbel1_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gumbel2 ( const gsl_rng * r , const double a , const double b );
function gsl_ran_gumbel2( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_gumbel2_pdf ( const double x , const double a , const double b );
function gsl_ran_gumbel2_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_logistic ( const gsl_rng * r , const double a );
function gsl_ran_logistic( const r : pgsl_rng; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_logistic_pdf ( const double x , const double a );
function gsl_ran_logistic_pdf( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_lognormal ( const gsl_rng * r , const double zeta , const double sigma );
function gsl_ran_lognormal( const r : pgsl_rng; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_lognormal_pdf ( const double x , const double zeta , const double sigma );
function gsl_ran_lognormal_pdf( const x : double; const zeta : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_logarithmic ( const gsl_rng * r , const double p );
function gsl_ran_logarithmic( const r : pgsl_rng; const p : double ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_logarithmic_pdf ( const unsignedint k , const double p );
function gsl_ran_logarithmic_pdf( const k : unsignedint; const p : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_multinomial ( const gsl_rng * r , const size_t K , const unsignedint N , const double p [ ] , unsignedint n [ ] );
procedure gsl_ran_multinomial( const r : pgsl_rng; const K : size_t; const Nx : unsignedint; const p : array of  double; n : array of   unsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_multinomial_pdf ( const size_t K , const double p [ ] , const unsignedint n [ ] );
function gsl_ran_multinomial_pdf( const K : size_t; const p : array of  double; const n : array of  unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_multinomial_lnpdf ( const size_t K , const double p [ ] , const unsignedint n [ ] );
function gsl_ran_multinomial_lnpdf( const K : size_t; const p : array of  double; const n : array of  unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_negative_binomial ( const gsl_rng * r , double p , double n );
function gsl_ran_negative_binomial( const r : pgsl_rng; p : double; n : double ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_negative_binomial_pdf ( const unsignedint k , const double p , double n );
function gsl_ran_negative_binomial_pdf( const k : unsignedint; const p : double; n : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_pascal ( const gsl_rng * r , double p , unsignedint n );
function gsl_ran_pascal( const r : pgsl_rng; p : double; n : unsignedint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_pascal_pdf ( const unsignedint k , const double p , unsignedint n );
function gsl_ran_pascal_pdf( const k : unsignedint; const p : double; n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_pareto ( const gsl_rng * r , double a , const double b );
function gsl_ran_pareto( const r : pgsl_rng; a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_pareto_pdf ( const double x , const double a , const double b );
function gsl_ran_pareto_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_ran_poisson ( const gsl_rng * r , double mu );
function gsl_ran_poisson( const r : pgsl_rng; mu : double ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_poisson_array ( const gsl_rng * r , size_t n , unsignedint array [ ] , double mu );
procedure gsl_ran_poisson_array( const r : pgsl_rng; n : size_t; arrays : array of  unsignedint; mu : double ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_poisson_pdf ( const unsignedint k , const double mu );
function gsl_ran_poisson_pdf( const k : unsignedint; const mu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_rayleigh ( const gsl_rng * r , const double sigma );
function gsl_ran_rayleigh( const r : pgsl_rng; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_rayleigh_pdf ( const double x , const double sigma );
function gsl_ran_rayleigh_pdf( const x : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_rayleigh_tail ( const gsl_rng * r , const double a , const double sigma );
function gsl_ran_rayleigh_tail( const r : pgsl_rng; const a : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_rayleigh_tail_pdf ( const double x , const double a , const double sigma );
function gsl_ran_rayleigh_tail_pdf( const x : double; const a : double; const sigma : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_tdist ( const gsl_rng * r , const double nu );
function gsl_ran_tdist( const r : pgsl_rng; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_tdist_pdf ( const double x , const double nu );
function gsl_ran_tdist_pdf( const x : double; const nu : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_laplace ( const gsl_rng * r , const double a );
function gsl_ran_laplace( const r : pgsl_rng; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_laplace_pdf ( const double x , const double a );
function gsl_ran_laplace_pdf( const x : double; const a : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_levy ( const gsl_rng * r , const double c , const double alpha );
function gsl_ran_levy( const r : pgsl_rng; const c : double; const alpha : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_levy_skew ( const gsl_rng * r , const double c , const double alpha , const double beta );
function gsl_ran_levy_skew( const r : pgsl_rng; const c : double; const alpha : double; const beta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_weibull ( const gsl_rng * r , const double a , const double b );
function gsl_ran_weibull( const r : pgsl_rng; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_weibull_pdf ( const double x , const double a , const double b );
function gsl_ran_weibull_pdf( const x : double; const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_dir_2d ( const gsl_rng * r , double * x , double * y );
procedure gsl_ran_dir_2d( const r : pgsl_rng; x : pdouble; y : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_dir_2d_trig_method ( const gsl_rng * r , double * x , double * y );
procedure gsl_ran_dir_2d_trig_method( const r : pgsl_rng; x : pdouble; y : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_dir_3d ( const gsl_rng * r , double * x , double * y , double * z );
procedure gsl_ran_dir_3d( const r : pgsl_rng; x : pdouble; y : pdouble; z : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_dir_nd ( const gsl_rng * r , size_t n , double * x );
procedure gsl_ran_dir_nd( const r : pgsl_rng; n : size_t; x : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_shuffle ( const gsl_rng * r , void * base , size_t nmembm , size_t size );
procedure gsl_ran_shuffle( const r : pgsl_rng; base : pvoid; nmembm : size_t; size : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_ran_choose ( const gsl_rng * r , void * dest , size_t k , void * src , size_t n , size_t size );
function gsl_ran_choose( const r : pgsl_rng; dest : pvoid; k : size_t; src : pvoid; n : size_t; size : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_sample ( const gsl_rng * r , void * dest , size_t k , void * src , size_t n , size_t size );
procedure gsl_ran_sample( const r : pgsl_rng; dest : pvoid; k : size_t; src : pvoid; n : size_t; size : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_ran_discrete_t * gsl_ran_discrete_preproc ( size_t K , const double * P );
function gsl_ran_discrete_preproc( K : size_t; const P : pdouble ) : pgsl_ran_discrete_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_ran_discrete_free ( gsl_ran_discrete_t * g );
procedure gsl_ran_discrete_free( g : pgsl_ran_discrete_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_ran_discrete ( const gsl_rng * r , const gsl_ran_discrete_t * g );
function gsl_ran_discrete( const r : pgsl_rng; const g : pgsl_ran_discrete_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ran_discrete_pdf ( size_t k , const gsl_ran_discrete_t * g );
function gsl_ran_discrete_pdf( k : size_t; const g : pgsl_ran_discrete_t ) : double; cdecl; external gsl_dll;

//gsl_rng.h
//GSL_EXPORT const gsl_rng_type * * gsl_rng_types_setup ( void );
function gsl_rng_types_setup : ppgsl_rng_type; cdecl; external gsl_dll;
//GSL_EXPORT gsl_rng * gsl_rng_alloc ( const gsl_rng_type * T );
function gsl_rng_alloc( const T : pgsl_rng_type ) : pgsl_rng; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_rng_memcpy ( gsl_rng * dest , const gsl_rng * src );
function gsl_rng_memcpy( dest : pgsl_rng; const src : pgsl_rng ) : int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_rng * gsl_rng_clone ( const gsl_rng * r );
function gsl_rng_clone( const r : pgsl_rng ) : pgsl_rng; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_rng_free ( gsl_rng * r );
procedure gsl_rng_free( r : pgsl_rng ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_rng_set ( const gsl_rng * r , unsignedlong int seed );
procedure gsl_rng_set( const r : pgsl_rng; seed : unsignedLongInt ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedLongInt gsl_rng_max ( const gsl_rng * r );
function gsl_rng_max( const r : pgsl_rng ) : unsignedLongInt; cdecl; external gsl_dll;
//GSL_EXPORT unsignedLongInt gsl_rng_min ( const gsl_rng * r );
function gsl_rng_min( const r : pgsl_rng ) : unsignedLongInt; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_rng_name ( const gsl_rng * r );
function gsl_rng_name( const r : pgsl_rng ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_rng_fread ( FILE * stream , gsl_rng * r );
function gsl_rng_fread( stream : pFILE; r : pgsl_rng ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_rng_fwrite ( FILE * stream , const gsl_rng * r );
function gsl_rng_fwrite( stream : pFILE; const r : pgsl_rng ) : int; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_rng_size ( const gsl_rng * r );
function gsl_rng_size( const r : pgsl_rng ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void * gsl_rng_state ( const gsl_rng * r );
function gsl_rng_state( const r : pgsl_rng ) : pvoid; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_rng_print_state ( const gsl_rng * r );
procedure gsl_rng_print_state( const r : pgsl_rng ); cdecl; external gsl_dll;
//GSL_EXPORT const gsl_rng_type * gsl_rng_env_setup ( void );
function gsl_rng_env_setup : pgsl_rng_type; cdecl; external gsl_dll;
//GSL_EXPORT unsignedLongInt gsl_rng_get ( const gsl_rng * r );
function gsl_rng_get( const r : pgsl_rng ) : unsignedLongInt; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_rng_uniform ( const gsl_rng * r );
function gsl_rng_uniform( const r : pgsl_rng ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_rng_uniform_pos ( const gsl_rng * r );
function gsl_rng_uniform_pos( const r : pgsl_rng ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedLongInt gsl_rng_uniform_int ( const gsl_rng * r , unsignedLongInt n );
function gsl_rng_uniform_int( const r : pgsl_rng; n : unsignedLongInt ) : unsignedLongInt; cdecl; external gsl_dll;

//gsl_roots.h
//GSL_EXPORT gsl_root_fsolver * gsl_root_fsolver_alloc ( const gsl_root_fsolver_type * T );
function gsl_root_fsolver_alloc( const T : pgsl_root_fsolver_type ) : pgsl_root_fsolver ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_root_fsolver_free ( gsl_root_fsolver * s );
procedure gsl_root_fsolver_free( s : pgsl_root_fsolver ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_fsolver_set ( gsl_root_fsolver * s , gsl_function * f , double x_lower , double x_upper );
function gsl_root_fsolver_set( s : pgsl_root_fsolver; f : pgsl_function; x_lower : double; x_upper : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_fsolver_iterate ( gsl_root_fsolver * s );
function gsl_root_fsolver_iterate( s : pgsl_root_fsolver ) : int; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_root_fsolver_name ( const gsl_root_fsolver * s );
function gsl_root_fsolver_name( const s : pgsl_root_fsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_root_fsolver_root ( const gsl_root_fsolver * s );
function gsl_root_fsolver_root( const s : pgsl_root_fsolver ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_root_fsolver_x_lower ( const gsl_root_fsolver * s );
function gsl_root_fsolver_x_lower( const s : pgsl_root_fsolver ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_root_fsolver_x_upper ( const gsl_root_fsolver * s );
function gsl_root_fsolver_x_upper( const s : pgsl_root_fsolver ) : double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_root_fdfsolver * gsl_root_fdfsolver_alloc ( const gsl_root_fdfsolver_type * T );
function gsl_root_fdfsolver_alloc( const T : pgsl_root_fdfsolver_type ) : pgsl_root_fdfsolver ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_fdfsolver_set ( gsl_root_fdfsolver * s , gsl_function_fdf * fdf , double root );
function gsl_root_fdfsolver_set( s : pgsl_root_fdfsolver; fdf : pgsl_function_fdf; root : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_fdfsolver_iterate ( gsl_root_fdfsolver * s );
function gsl_root_fdfsolver_iterate( s : pgsl_root_fdfsolver ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_root_fdfsolver_free ( gsl_root_fdfsolver * s );
procedure gsl_root_fdfsolver_free( s : pgsl_root_fdfsolver ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_root_fdfsolver_name ( const gsl_root_fdfsolver * s );
function gsl_root_fdfsolver_name( const s : pgsl_root_fdfsolver ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_root_fdfsolver_root ( const gsl_root_fdfsolver * s );
function gsl_root_fdfsolver_root( const s : pgsl_root_fdfsolver ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_test_interval ( double x_lower , double x_upper , double epsabs , double epsrel );
function gsl_root_test_interval( x_lower : double; x_upper : double; epsabs : double; epsrel : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_test_residual ( double f , double epsabs );
function gsl_root_test_residual( f : double; epsabs : double ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_root_test_delta ( double x1 , double x0 , double epsabs , double epsrel );
function gsl_root_test_delta( x1 : double; x0 : double; epsabs : double; epsrel : double ) : int ; cdecl; external gsl_dll;

//gsl_sf.h

//gsl_sf_airy.h
//GSL_EXPORT int gsl_sf_airy_Ai_e ( const double x , const gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Ai_e( const x : double; const mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Ai ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Ai( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Bi_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Bi_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Bi ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Bi( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Ai_scaled_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Ai_scaled_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Ai_scaled ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Ai_scaled( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Bi_scaled_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Bi_scaled_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Bi_scaled ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Bi_scaled( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Ai_deriv_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Ai_deriv_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Ai_deriv ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Ai_deriv( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Bi_deriv_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Bi_deriv_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Bi_deriv ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Bi_deriv( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Ai_deriv_scaled_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Ai_deriv_scaled_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Ai_deriv_scaled ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Ai_deriv_scaled( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_Bi_deriv_scaled_e ( const double x , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_airy_Bi_deriv_scaled_e( const x : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_Bi_deriv_scaled ( const double x , gsl_mode_t mode );
function gsl_sf_airy_Bi_deriv_scaled( const x : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_zero_Ai_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_airy_zero_Ai_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_zero_Ai ( unsignedint s );
function gsl_sf_airy_zero_Ai( s : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_zero_Bi_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_airy_zero_Bi_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_zero_Bi ( unsignedint s );
function gsl_sf_airy_zero_Bi( s : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_zero_Ai_deriv_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_airy_zero_Ai_deriv_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_zero_Ai_deriv ( unsignedint s );
function gsl_sf_airy_zero_Ai_deriv( s : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_airy_zero_Bi_deriv_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_airy_zero_Bi_deriv_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_airy_zero_Bi_deriv ( unsignedint s );
function gsl_sf_airy_zero_Bi_deriv( s : unsignedint ) : double; cdecl; external gsl_dll;

//gsl_sf_bessel.h
//GSL_EXPORT int gsl_sf_bessel_J0_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_J0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_J0 ( const double x );
function gsl_sf_bessel_J0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_J1_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_J1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_J1 ( const double x );
function gsl_sf_bessel_J1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Jn_e ( int n , double x , gsl_sf_result * result );
function gsl_sf_bessel_Jn_e( n : int; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Jn ( const int n , const double x );
function gsl_sf_bessel_Jn( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Jn_array ( int nmin , int nmax , double x , double * result_array );
function gsl_sf_bessel_Jn_array( nmin : int; nmax : int; x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Y0_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_Y0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Y0 ( const double x );
function gsl_sf_bessel_Y0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Y1_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_Y1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Y1 ( const double x );
function gsl_sf_bessel_Y1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Yn_e ( int n , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Yn_e( n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Yn ( const int n , const double x );
function gsl_sf_bessel_Yn( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Yn_array ( const int nmin , const int nmax , const double x , double * result_array );
function gsl_sf_bessel_Yn_array( const nmin : int; const nmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_I0_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_I0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_I0 ( const double x );
function gsl_sf_bessel_I0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_I1_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_I1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_I1 ( const double x );
function gsl_sf_bessel_I1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_In_e ( const int n , const double x , gsl_sf_result * result );
function gsl_sf_bessel_In_e( const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_In ( const int n , const double x );
function gsl_sf_bessel_In( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_In_array ( const int nmin , const int nmax , const double x , double * result_array );
function gsl_sf_bessel_In_array( const nmin : int; const nmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_I0_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_I0_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_I0_scaled ( const double x );
function gsl_sf_bessel_I0_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_I1_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_I1_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_I1_scaled ( const double x );
function gsl_sf_bessel_I1_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_In_scaled_e ( int n , const double x , gsl_sf_result * result );
function gsl_sf_bessel_In_scaled_e( n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_In_scaled ( const int n , const double x );
function gsl_sf_bessel_In_scaled( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_In_scaled_array ( const int nmin , const int nmax , const double x , double * result_array );
function gsl_sf_bessel_In_scaled_array( const nmin : int; const nmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_K0_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_K0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_K0 ( const double x );
function gsl_sf_bessel_K0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_K1_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_K1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_K1 ( const double x );
function gsl_sf_bessel_K1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Kn_e ( const int n , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Kn_e( const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Kn ( const int n , const double x );
function gsl_sf_bessel_Kn( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Kn_array ( const int nmin , const int nmax , const double x , double * result_array );
function gsl_sf_bessel_Kn_array( const nmin : int; const nmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_K0_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_K0_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_K0_scaled ( const double x );
function gsl_sf_bessel_K0_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_K1_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_K1_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_K1_scaled ( const double x );
function gsl_sf_bessel_K1_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Kn_scaled_e ( int n , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Kn_scaled_e( n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Kn_scaled ( const int n , const double x );
function gsl_sf_bessel_Kn_scaled( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Kn_scaled_array ( const int nmin , const int nmax , const double x , double * result_array );
function gsl_sf_bessel_Kn_scaled_array( const nmin : int; const nmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;

//GSL_EXPORT int gsl_sf_bessel_j0_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_j0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_j0 ( const double x );
//function gsl_sf_bessel_j0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_j1_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_j1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_j1 ( const double x );
//function gsl_sf_bessel_j1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_j2_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_j2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_j2 ( const double x );
//function gsl_sf_bessel_j2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_jl_e ( const int l , const double x , gsl_sf_result * result );
function gsl_sf_bessel_jl_e( const l : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_jl ( const int l , const double x );
function gsl_sf_bessel_jl( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_jl_array ( const int lmax , const double x , double * result_array );
function gsl_sf_bessel_jl_array( const lmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_jl_steed_array ( const int lmax , const double x , double * jl_x_array );
function gsl_sf_bessel_jl_steed_array( const lmax : int; const x : double; jl_x_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_y0_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_y0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_y0 ( const double x );
//function gsl_sf_bessel_y0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_y1_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_y1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_y1 ( const double x );
//function gsl_sf_bessel_y1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_y2_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_y2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_y2 ( const double x );
function gsl_sf_bessel_y2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_yl_e ( int l , const double x , gsl_sf_result * result );
function gsl_sf_bessel_yl_e( l : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_yl ( const int l , const double x );
function gsl_sf_bessel_yl( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_yl_array ( const int lmax , const double x , double * result_array );
function gsl_sf_bessel_yl_array( const lmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_i0_scaled_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_i0_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_i0_scaled ( const double x );
//function gsl_sf_bessel_i0_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_i1_scaled_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_i1_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_i1_scaled ( const double x );
//function gsl_sf_bessel_i1_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_i2_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_i2_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_i2_scaled ( const double x );
function gsl_sf_bessel_i2_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_il_scaled_e ( const int l , double x , gsl_sf_result * result );
function gsl_sf_bessel_il_scaled_e( const l : int; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_il_scaled ( const int l , const double x );
function gsl_sf_bessel_il_scaled( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_il_scaled_array ( const int lmax , const double x , double * result_array );
function gsl_sf_bessel_il_scaled_array( const lmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_k0_scaled_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_k0_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_k0_scaled ( const double x );
//function gsl_sf_bessel_k0_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_k1_scaled_e ( const double x , gsl_sf_result * result );
//function gsl_sf_bessel_k1_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_k1_scaled ( const double x );
//function gsl_sf_bessel_k1_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_k2_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_bessel_k2_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_k2_scaled ( const double x );
function gsl_sf_bessel_k2_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_kl_scaled_e ( int l , const double x , gsl_sf_result * result );
function gsl_sf_bessel_kl_scaled_e( l : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_kl_scaled ( const int l , const double x );
function gsl_sf_bessel_kl_scaled( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_kl_scaled_array ( const int lmax , const double x , double * result_array );
function gsl_sf_bessel_kl_scaled_array( const lmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Jnu_e ( const double nu , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Jnu_e( const nu : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Jnu ( const double nu , const double x );
function gsl_sf_bessel_Jnu( const nu : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Ynu_e ( double nu , double x , gsl_sf_result * result );
function gsl_sf_bessel_Ynu_e( nu : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Ynu ( const double nu , const double x );
function gsl_sf_bessel_Ynu( const nu : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_sequence_Jnu_e ( double nu , gsl_mode_t mode , size_t size , double * v );
function gsl_sf_bessel_sequence_Jnu_e( nu : double; mode : gsl_mode_t; size : size_t; v : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Inu_scaled_e ( double nu , double x , gsl_sf_result * result );
function gsl_sf_bessel_Inu_scaled_e( nu : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Inu_scaled ( double nu , double x );
function gsl_sf_bessel_Inu_scaled( nu : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Inu_e ( double nu , double x , gsl_sf_result * result );
function gsl_sf_bessel_Inu_e( nu : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Inu ( double nu , double x );
function gsl_sf_bessel_Inu( nu : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Knu_scaled_e ( const double nu , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Knu_scaled_e( const nu : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Knu_scaled ( const double nu , const double x );
function gsl_sf_bessel_Knu_scaled( const nu : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_Knu_e ( const double nu , const double x , gsl_sf_result * result );
function gsl_sf_bessel_Knu_e( const nu : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_Knu ( const double nu , const double x );
function gsl_sf_bessel_Knu( const nu : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_lnKnu_e ( const double nu , const double x , gsl_sf_result * result );
function gsl_sf_bessel_lnKnu_e( const nu : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_lnKnu ( const double nu , const double x );
function gsl_sf_bessel_lnKnu( const nu : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_zero_J0_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_bessel_zero_J0_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_zero_J0 ( unsignedint s );
function gsl_sf_bessel_zero_J0( s : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_zero_J1_e ( unsignedint s , gsl_sf_result * result );
function gsl_sf_bessel_zero_J1_e( s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_zero_J1 ( unsignedint s );
function gsl_sf_bessel_zero_J1( s : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_bessel_zero_Jnu_e ( double nu , unsignedint s , gsl_sf_result * result );
function gsl_sf_bessel_zero_Jnu_e( nu : double; s : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_bessel_zero_Jnu ( double nu , unsignedint s );
function gsl_sf_bessel_zero_Jnu( nu : double; s : unsignedint ) : double; cdecl; external gsl_dll;

//gsl_sf_clausen.h
//GSL_EXPORT int gsl_sf_clausen_e ( double x , gsl_sf_result * result );
function gsl_sf_clausen_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_clausen ( const double x );
function gsl_sf_clausen( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_coulomb.h
//GSL_EXPORT int gsl_sf_hydrogenicR_1_e ( const double Z , const double r , gsl_sf_result * result );
function gsl_sf_hydrogenicR_1_e( const Z : double; const r : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hydrogenicR_1 ( const double Z , const double r );
function gsl_sf_hydrogenicR_1( const Z : double; const r : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hydrogenicR_e ( const int n , const int l , const double Z , const double r , gsl_sf_result * result );
function gsl_sf_hydrogenicR_e( const n : int; const l : int; const Z : double; const r : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hydrogenicR ( const int n , const int l , const double Z , const double r );
function gsl_sf_hydrogenicR( const n : int; const l : int; const Z : double; const r : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_wave_FG_e ( const double eta , const double x , const double lam_F , const int k_lam_G , gsl_sf_result * F , gsl_sf_result * Fp , gsl_sf_result * G , gsl_sf_result * Gp , double * exp_F , double * exp_G );
function gsl_sf_coulomb_wave_FG_e( const eta : double; const x : double; const lam_F : double; const k_lam_G : int; F : pgsl_sf_result; Fp : pgsl_sf_result; G : pgsl_sf_result; Gp : pgsl_sf_result; exp_F : pdouble; exp_G : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_wave_F_array ( double lam_min , int kmax , double eta , double x , double * fc_array , double * F_exponent );
function gsl_sf_coulomb_wave_F_array( lam_min : double; kmax : int; eta : double; x : double; fc_arrays : pdouble; F_exponent : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_wave_FG_array ( double lam_min , int kmax , double eta , double x , double * fc_array , double * gc_array , double * F_exponent , double * G_exponent );
function gsl_sf_coulomb_wave_FG_array( lam_min : double; kmax : int; eta : double; x : double; fc_arrays : pdouble; gc_arrays : pdouble; F_exponent : pdouble; G_exponent : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_wave_FGp_array ( double lam_min , int kmax , double eta , double x , double * fc_array , double * fcp_array , double * gc_array , double * gcp_array , double * F_exponent , double * G_exponent );
function gsl_sf_coulomb_wave_FGp_array( lam_min : double; kmax : int; eta : double; x : double; fc_arrays : pdouble; fcp_arrays : pdouble; gc_arrays : pdouble; gcp_arrays : pdouble; F_exponent : pdouble; G_exponent : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_wave_sphF_array ( double lam_min , int kmax , double eta , double x , double * fc_array , double * F_exponent );
function gsl_sf_coulomb_wave_sphF_array( lam_min : double; kmax : int; eta : double; x : double; fc_arrays : pdouble; F_exponent : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_CL_e ( double L , double eta , gsl_sf_result * result );
function gsl_sf_coulomb_CL_e( L : double; eta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coulomb_CL_array ( double Lmin , int kmax , double eta , double * cl );
function gsl_sf_coulomb_CL_array( Lmin : double; kmax : int; eta : double; cl : pdouble ) : int; cdecl; external gsl_dll;

//gsl_sf_coupling.h
//GSL_EXPORT int gsl_sf_coupling_3j_e ( int two_ja , int two_jb , int two_jc , int two_ma , int two_mb , int two_mc , gsl_sf_result * result );
function gsl_sf_coupling_3j_e( two_ja : int; two_jb : int; two_jc : int; two_ma : int; two_mb : int; two_mc : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_coupling_3j ( int two_ja , int two_jb , int two_jc , int two_ma , int two_mb , int two_mc );
function gsl_sf_coupling_3j( two_ja : int; two_jb : int; two_jc : int; two_ma : int; two_mb : int; two_mc : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coupling_6j_e ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf , gsl_sf_result * result );
function gsl_sf_coupling_6j_e( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_coupling_6j ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf );
function gsl_sf_coupling_6j( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coupling_RacahW_e ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf , gsl_sf_result * result );
function gsl_sf_coupling_RacahW_e( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_coupling_RacahW ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf );
function gsl_sf_coupling_RacahW( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coupling_9j_e ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf , int two_jg , int two_jh , int two_ji , gsl_sf_result * result );
function gsl_sf_coupling_9j_e( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int; two_jg : int; two_jh : int; two_ji : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_coupling_9j ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf , int two_jg , int two_jh , int two_ji );
function gsl_sf_coupling_9j( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int; two_jg : int; two_jh : int; two_ji : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_coupling_6j_INCORRECT_e ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf , gsl_sf_result * result );
function gsl_sf_coupling_6j_INCORRECT_e( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_coupling_6j_INCORRECT ( int two_ja , int two_jb , int two_jc , int two_jd , int two_je , int two_jf );
function gsl_sf_coupling_6j_INCORRECT( two_ja : int; two_jb : int; two_jc : int; two_jd : int; two_je : int; two_jf : int ) : double; cdecl; external gsl_dll;

//gsl_sf_dawson.h
//GSL_EXPORT int gsl_sf_dawson_e ( double x , gsl_sf_result * result );
function gsl_sf_dawson_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_dawson ( double x );
function gsl_sf_dawson( x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_debye.h
//GSL_EXPORT int gsl_sf_debye_1_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_1 ( const double x );
function gsl_sf_debye_1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_debye_2_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_2 ( const double x );
function gsl_sf_debye_2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_debye_3_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_3_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_3 ( const double x );
function gsl_sf_debye_3( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_debye_4_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_4_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_4 ( const double x );
function gsl_sf_debye_4( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_debye_5_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_5_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_5 ( const double x );
function gsl_sf_debye_5( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_debye_6_e ( const double x , gsl_sf_result * result );
function gsl_sf_debye_6_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_debye_6 ( const double x );
function gsl_sf_debye_6( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_dilog.h
//GSL_EXPORT int gsl_sf_dilog_e ( const double x , gsl_sf_result * result );
function gsl_sf_dilog_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_dilog ( const double x );
function gsl_sf_dilog( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_dilog_xy_e ( const double x , const double y , gsl_sf_result * result_re , gsl_sf_result * result_im );
function gsl_sf_complex_dilog_xy_e( const x : double; const y : double; result_re : pgsl_sf_result; result_im : pgsl_sf_result ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_dilog_e ( const double r , const double theta , gsl_sf_result * result_re , gsl_sf_result * result_im );
function gsl_sf_complex_dilog_e( const r : double; const theta : double; result_re : pgsl_sf_result; result_im : pgsl_sf_result ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_spence_xy_e ( const double x , const double y , gsl_sf_result * real_sp , gsl_sf_result * imag_sp );
function gsl_sf_complex_spence_xy_e( const x : double; const y : double; real_sp : pgsl_sf_result; imag_sp : pgsl_sf_result ) : int ; cdecl; external gsl_dll;

//gsl_sf_elementary.h
//GSL_EXPORT int gsl_sf_multiply_e ( const double x , const double y , gsl_sf_result * result );
function gsl_sf_multiply_e( const x : double; const y : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_multiply ( const double x , const double y );
function gsl_sf_multiply( const x : double; const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_multiply_err_e ( const double x , const double dx , const double y , const double dy , gsl_sf_result * result );
function gsl_sf_multiply_err_e( const x : double; const dx : double; const y : double; const dy : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;

//gsl_sf_ellint.h
//GSL_EXPORT int gsl_sf_ellint_Kcomp_e ( double k , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_Kcomp_e( k : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_Kcomp ( double k , gsl_mode_t mode );
function gsl_sf_ellint_Kcomp( k : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_Ecomp_e ( double k , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_Ecomp_e( k : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_Ecomp ( double k , gsl_mode_t mode );
function gsl_sf_ellint_Ecomp( k : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_F_e ( double phi , double k , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_F_e( phi : double; k : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_F ( double phi , double k , gsl_mode_t mode );
function gsl_sf_ellint_F( phi : double; k : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_E_e ( double phi , double k , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_E_e( phi : double; k : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_E ( double phi , double k , gsl_mode_t mode );
function gsl_sf_ellint_E( phi : double; k : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_P_e ( double phi , double k , double n , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_P_e( phi : double; k : double; n : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_P ( double phi , double k , double n , gsl_mode_t mode );
function gsl_sf_ellint_P( phi : double; k : double; n : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_D_e ( double phi , double k , double n , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_D_e( phi : double; k : double; n : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_D ( double phi , double k , double n , gsl_mode_t mode );
function gsl_sf_ellint_D( phi : double; k : double; n : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_RC_e ( double x , double y , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_RC_e( x : double; y : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_RC ( double x , double y , gsl_mode_t mode );
function gsl_sf_ellint_RC( x : double; y : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_RD_e ( double x , double y , double z , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_RD_e( x : double; y : double; z : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_RD ( double x , double y , double z , gsl_mode_t mode );
function gsl_sf_ellint_RD( x : double; y : double; z : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_RF_e ( double x , double y , double z , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_RF_e( x : double; y : double; z : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_RF ( double x , double y , double z , gsl_mode_t mode );
function gsl_sf_ellint_RF( x : double; y : double; z : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_ellint_RJ_e ( double x , double y , double z , double p , gsl_mode_t mode , gsl_sf_result * result );
function gsl_sf_ellint_RJ_e( x : double; y : double; z : double; p : double; mode : gsl_mode_t; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_ellint_RJ ( double x , double y , double z , double p , gsl_mode_t mode );
function gsl_sf_ellint_RJ( x : double; y : double; z : double; p : double; mode : gsl_mode_t ) : double; cdecl; external gsl_dll;

//gsl_sf_elljac.h
//GSL_EXPORT int gsl_sf_elljac_e ( double u , double m , double * sn , double * cn , double * dn );
function gsl_sf_elljac_e( u : double; m : double; sn : pdouble; cn : pdouble; dn : pdouble ) : int; cdecl; external gsl_dll;

//gsl_sf_erf.h
//GSL_EXPORT int gsl_sf_erfc_e ( double x , gsl_sf_result * result );
function gsl_sf_erfc_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_erfc ( double x );
function gsl_sf_erfc( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_log_erfc_e ( double x , gsl_sf_result * result );
function gsl_sf_log_erfc_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_log_erfc ( double x );
function gsl_sf_log_erfc( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_erf_e ( double x , gsl_sf_result * result );
function gsl_sf_erf_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_erf ( double x );
function gsl_sf_erf( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_erf_Z_e ( double x , gsl_sf_result * result );
function gsl_sf_erf_Z_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_erf_Q_e ( double x , gsl_sf_result * result );
function gsl_sf_erf_Q_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_erf_Z ( double x );
function gsl_sf_erf_Z( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_erf_Q ( double x );
function gsl_sf_erf_Q( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hazard_e ( double x , gsl_sf_result * result );
function gsl_sf_hazard_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hazard ( double x );
function gsl_sf_hazard( x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_exp.h
//GSL_EXPORT int gsl_sf_exp_e ( const double x , gsl_sf_result * result );
function gsl_sf_exp_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_exp ( const double x );
function gsl_sf_exp( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_e10_e ( const double x , gsl_sf_result_e10 * result );
function gsl_sf_exp_e10_e( const x : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_mult_e ( const double x , const double y , gsl_sf_result * result );
function gsl_sf_exp_mult_e( const x : double; const y : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_exp_mult ( const double x , const double y );
function gsl_sf_exp_mult( const x : double; const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_mult_e10_e ( const double x , const double y , gsl_sf_result_e10 * result );
function gsl_sf_exp_mult_e10_e( const x : double; const y : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expm1_e ( const double x , gsl_sf_result * result );
function gsl_sf_expm1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expm1 ( const double x );
function gsl_sf_expm1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exprel_e ( const double x , gsl_sf_result * result );
function gsl_sf_exprel_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_exprel ( const double x );
function gsl_sf_exprel( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exprel_2_e ( double x , gsl_sf_result * result );
function gsl_sf_exprel_2_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_exprel_2 ( const double x );
function gsl_sf_exprel_2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exprel_n_e ( const int n , const double x , gsl_sf_result * result );
function gsl_sf_exprel_n_e( const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_exprel_n ( const int n , const double x );
function gsl_sf_exprel_n( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_err_e ( const double x , const double dx , gsl_sf_result * result );
function gsl_sf_exp_err_e( const x : double; const dx : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_err_e10_e ( const double x , const double dx , gsl_sf_result_e10 * result );
function gsl_sf_exp_err_e10_e( const x : double; const dx : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_mult_err_e ( const double x , const double dx , const double y , const double dy , gsl_sf_result * result );
function gsl_sf_exp_mult_err_e( const x : double; const dx : double; const y : double; const dy : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_exp_mult_err_e10_e ( const double x , const double dx , const double y , const double dy , gsl_sf_result_e10 * result );
function gsl_sf_exp_mult_err_e10_e( const x : double; const dx : double; const y : double; const dy : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;

//gsl_sf_expint.h
//GSL_EXPORT int gsl_sf_expint_E1_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_E1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_E1 ( const double x );
function gsl_sf_expint_E1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_E2_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_E2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_E2 ( const double x );
function gsl_sf_expint_E2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_E1_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_E1_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_E1_scaled ( const double x );
function gsl_sf_expint_E1_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_E2_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_E2_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_E2_scaled ( const double x );
function gsl_sf_expint_E2_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_Ei_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_Ei_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_Ei ( const double x );
function gsl_sf_expint_Ei( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_Ei_scaled_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_Ei_scaled_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_Ei_scaled ( const double x );
function gsl_sf_expint_Ei_scaled( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_Shi_e ( const double x , gsl_sf_result * result );
function gsl_sf_Shi_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_Shi ( const double x );
function gsl_sf_Shi( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_Chi_e ( const double x , gsl_sf_result * result );
function gsl_sf_Chi_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_Chi ( const double x );
function gsl_sf_Chi( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_expint_3_e ( const double x , gsl_sf_result * result );
function gsl_sf_expint_3_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_expint_3 ( double x );
function gsl_sf_expint_3( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_Si_e ( const double x , gsl_sf_result * result );
function gsl_sf_Si_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_Si ( const double x );
function gsl_sf_Si( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_Ci_e ( const double x , gsl_sf_result * result );
function gsl_sf_Ci_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_Ci ( const double x );
function gsl_sf_Ci( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_atanint_e ( const double x , gsl_sf_result * result );
function gsl_sf_atanint_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_atanint ( const double x );
function gsl_sf_atanint( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_fermi_dirac.h
//GSL_EXPORT int gsl_sf_fermi_dirac_m1_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_m1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_m1 ( const double x );
function gsl_sf_fermi_dirac_m1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_0_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_0 ( const double x );
function gsl_sf_fermi_dirac_0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_1_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_1 ( const double x );
function gsl_sf_fermi_dirac_1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_2_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_2 ( const double x );
function gsl_sf_fermi_dirac_2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_int_e ( const int j , const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_int_e( const j : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_int ( const int j , const double x );
function gsl_sf_fermi_dirac_int( const j : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_mhalf_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_mhalf_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_mhalf ( const double x );
function gsl_sf_fermi_dirac_mhalf( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_half_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_half_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_half ( const double x );
function gsl_sf_fermi_dirac_half( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_3half_e ( const double x , gsl_sf_result * result );
function gsl_sf_fermi_dirac_3half_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_3half ( const double x );
function gsl_sf_fermi_dirac_3half( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fermi_dirac_inc_0_e ( const double x , const double b , gsl_sf_result * result );
function gsl_sf_fermi_dirac_inc_0_e( const x : double; const b : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fermi_dirac_inc_0 ( const double x , const double b );
function gsl_sf_fermi_dirac_inc_0( const x : double; const b : double ) : double; cdecl; external gsl_dll;

//gsl_sf_gamma.h
//GSL_EXPORT int gsl_sf_lngamma_e ( double x , gsl_sf_result * result );
function gsl_sf_lngamma_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lngamma ( const double x );
function gsl_sf_lngamma( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lngamma_sgn_e ( double x , gsl_sf_result * result_lg , double * sgn );
function gsl_sf_lngamma_sgn_e( x : double; result_lg : pgsl_sf_result; sgn : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gamma_e ( const double x , gsl_sf_result * result );
function gsl_sf_gamma_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gamma ( const double x );
function gsl_sf_gamma( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gammastar_e ( const double x , gsl_sf_result * result );
function gsl_sf_gammastar_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gammastar ( const double x );
function gsl_sf_gammastar( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gammainv_e ( const double x , gsl_sf_result * result );
function gsl_sf_gammainv_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gammainv ( const double x );
function gsl_sf_gammainv( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lngamma_complex_e ( double zr , double zi , gsl_sf_result * lnr , gsl_sf_result * arg );
function gsl_sf_lngamma_complex_e( zr : double; zi : double; lnr : pgsl_sf_result; arg : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_taylorcoeff_e ( const int n , const double x , gsl_sf_result * result );
function gsl_sf_taylorcoeff_e( const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_taylorcoeff ( const int n , const double x );
function gsl_sf_taylorcoeff( const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_fact_e ( const unsignedint n , gsl_sf_result * result );
function gsl_sf_fact_e( const n : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_fact ( const unsignedint n );
function gsl_sf_fact( const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_doublefact_e ( const unsignedint n , gsl_sf_result * result );
function gsl_sf_doublefact_e( const n : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_doublefact ( const unsignedint n );
function gsl_sf_doublefact( const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnfact_e ( const unsignedint n , gsl_sf_result * result );
function gsl_sf_lnfact_e( const n : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lnfact ( const unsignedint n );
function gsl_sf_lnfact( const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lndoublefact_e ( const unsignedint n , gsl_sf_result * result );
function gsl_sf_lndoublefact_e( const n : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lndoublefact ( const unsignedint n );
function gsl_sf_lndoublefact( const n : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnchoose_e ( unsignedint n , unsignedint m , gsl_sf_result * result );
function gsl_sf_lnchoose_e( n : unsignedint; m : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lnchoose ( unsignedint n , unsignedint m );
function gsl_sf_lnchoose( n : unsignedint; m : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_choose_e ( unsignedint n , unsignedint m , gsl_sf_result * result );
function gsl_sf_choose_e( n : unsignedint; m : unsignedint; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_choose ( unsignedint n , unsignedint m );
function gsl_sf_choose( n : unsignedint; m : unsignedint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnpoch_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_lnpoch_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lnpoch ( const double a , const double x );
function gsl_sf_lnpoch( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnpoch_sgn_e ( const double a , const double x , gsl_sf_result * result , double * sgn );
function gsl_sf_lnpoch_sgn_e( const a : double; const x : double; result : pgsl_sf_result; sgn : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_poch_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_poch_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_poch ( const double a , const double x );
function gsl_sf_poch( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_pochrel_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_pochrel_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_pochrel ( const double a , const double x );
function gsl_sf_pochrel( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gamma_inc_Q_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_gamma_inc_Q_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gamma_inc_Q ( const double a , const double x );
function gsl_sf_gamma_inc_Q( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gamma_inc_P_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_gamma_inc_P_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gamma_inc_P ( const double a , const double x );
function gsl_sf_gamma_inc_P( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gamma_inc_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_gamma_inc_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gamma_inc ( const double a , const double x );
function gsl_sf_gamma_inc( const a : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnbeta_e ( const double a , const double b , gsl_sf_result * result );
function gsl_sf_lnbeta_e( const a : double; const b : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lnbeta ( const double a , const double b );
function gsl_sf_lnbeta( const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_beta_e ( const double a , const double b , gsl_sf_result * result );
function gsl_sf_beta_e( const a : double; const b : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_beta ( const double a , const double b );
function gsl_sf_beta( const a : double; const b : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_beta_inc_e ( const double a , const double b , const double x , gsl_sf_result * result );
function gsl_sf_beta_inc_e( const a : double; const b : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_beta_inc ( const double a , const double b , const double x );
function gsl_sf_beta_inc( const a : double; const b : double; const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_gegenbauer.h
//GSL_EXPORT int gsl_sf_gegenpoly_1_e ( double lambda , double x , gsl_sf_result * result );
function gsl_sf_gegenpoly_1_e( lambda : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gegenpoly_2_e ( double lambda , double x , gsl_sf_result * result );
function gsl_sf_gegenpoly_2_e( lambda : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gegenpoly_3_e ( double lambda , double x , gsl_sf_result * result );
function gsl_sf_gegenpoly_3_e( lambda : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gegenpoly_1 ( double lambda , double x );
function gsl_sf_gegenpoly_1( lambda : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gegenpoly_2 ( double lambda , double x );
function gsl_sf_gegenpoly_2( lambda : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gegenpoly_3 ( double lambda , double x );
function gsl_sf_gegenpoly_3( lambda : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gegenpoly_n_e ( int n , double lambda , double x , gsl_sf_result * result );
function gsl_sf_gegenpoly_n_e( n : int; lambda : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_gegenpoly_n ( int n , double lambda , double x );
function gsl_sf_gegenpoly_n( n : int; lambda : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_gegenpoly_array ( int nmax , double lambda , double x , double * result_array );
function gsl_sf_gegenpoly_array( nmax : int; lambda : double; x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;

//gsl_sf_hyperg.h
//GSL_EXPORT int gsl_sf_hyperg_0F1_e ( double c , double x , gsl_sf_result * result );
function gsl_sf_hyperg_0F1_e( c : double; x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_0F1 ( const double c , const double x );
function gsl_sf_hyperg_0F1( const c : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_1F1_int_e ( const int m , const int n , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_1F1_int_e( const m : int; const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_1F1_int ( const int m , const int n , double x );
function gsl_sf_hyperg_1F1_int( const m : int; const n : int; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_1F1_e ( const double a , const double b , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_1F1_e( const a : double; const b : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_1F1 ( double a , double b , double x );
function gsl_sf_hyperg_1F1( a : double; b : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_U_int_e ( const int m , const int n , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_U_int_e( const m : int; const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_U_int ( const int m , const int n , const double x );
function gsl_sf_hyperg_U_int( const m : int; const n : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_U_int_e10_e ( const int m , const int n , const double x , gsl_sf_result_e10 * result );
function gsl_sf_hyperg_U_int_e10_e( const m : int; const n : int; const x : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_U_e ( const double a , const double b , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_U_e( const a : double; const b : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_U ( const double a , const double b , const double x );
function gsl_sf_hyperg_U( const a : double; const b : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_U_e10_e ( const double a , const double b , const double x , gsl_sf_result_e10 * result );
function gsl_sf_hyperg_U_e10_e( const a : double; const b : double; const x : double; result : pgsl_sf_result_e10 ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_2F1_e ( double a , double b , const double c , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_2F1_e( a : double; b : double; const c : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_2F1 ( double a , double b , double c , double x );
function gsl_sf_hyperg_2F1( a : double; b : double; c : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_2F1_conj_e ( const double aR , const double aI , const double c , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_2F1_conj_e( const aR : double; const aI : double; const c : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_2F1_conj ( double aR , double aI , double c , double x );
function gsl_sf_hyperg_2F1_conj( aR : double; aI : double; c : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_2F1_renorm_e ( const double a , const double b , const double c , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_2F1_renorm_e( const a : double; const b : double; const c : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_2F1_renorm ( double a , double b , double c , double x );
function gsl_sf_hyperg_2F1_renorm( a : double; b : double; c : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_2F1_conj_renorm_e ( const double aR , const double aI , const double c , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_2F1_conj_renorm_e( const aR : double; const aI : double; const c : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_2F1_conj_renorm ( double aR , double aI , double c , double x );
function gsl_sf_hyperg_2F1_conj_renorm( aR : double; aI : double; c : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hyperg_2F0_e ( const double a , const double b , const double x , gsl_sf_result * result );
function gsl_sf_hyperg_2F0_e( const a : double; const b : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hyperg_2F0 ( const double a , const double b , const double x );
function gsl_sf_hyperg_2F0( const a : double; const b : double; const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_laguerre.h
//GSL_EXPORT int gsl_sf_laguerre_1_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_laguerre_1_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_laguerre_2_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_laguerre_2_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_laguerre_3_e ( const double a , const double x , gsl_sf_result * result );
function gsl_sf_laguerre_3_e( const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_laguerre_1 ( double a , double x );
function gsl_sf_laguerre_1( a : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_laguerre_2 ( double a , double x );
function gsl_sf_laguerre_2( a : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_laguerre_3 ( double a , double x );
function gsl_sf_laguerre_3( a : double; x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_laguerre_n_e ( const int n , const double a , const double x , gsl_sf_result * result );
function gsl_sf_laguerre_n_e( const n : int; const a : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_laguerre_n ( int n , double a , double x );
function gsl_sf_laguerre_n( n : int; a : double; x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_lambert.h
//GSL_EXPORT int gsl_sf_lambert_W0_e ( double x , gsl_sf_result * result );
function gsl_sf_lambert_W0_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lambert_W0 ( double x );
function gsl_sf_lambert_W0( x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lambert_Wm1_e ( double x , gsl_sf_result * result );
function gsl_sf_lambert_Wm1_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lambert_Wm1 ( double x );
function gsl_sf_lambert_Wm1( x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_legendre.h
//GSL_EXPORT int gsl_sf_legendre_Pl_e ( const int l , const double x , gsl_sf_result * result );
function gsl_sf_legendre_Pl_e( const l : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_Pl ( const int l , const double x );
function gsl_sf_legendre_Pl( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Pl_array ( const int lmax , const double x , double * result_array );
function gsl_sf_legendre_Pl_array( const lmax : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Pl_deriv_array ( const int lmax , const double x , double * result_array , double * result_deriv_array );
function gsl_sf_legendre_Pl_deriv_array( const lmax : int; const x : double; result_arrays : pdouble; result_deriv_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_P1_e ( double x , gsl_sf_result * result );
function gsl_sf_legendre_P1_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_P2_e ( double x , gsl_sf_result * result );
function gsl_sf_legendre_P2_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_P3_e ( double x , gsl_sf_result * result );
function gsl_sf_legendre_P3_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_P1 ( const double x );
function gsl_sf_legendre_P1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_P2 ( const double x );
function gsl_sf_legendre_P2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_P3 ( const double x );
function gsl_sf_legendre_P3( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Q0_e ( const double x , gsl_sf_result * result );
function gsl_sf_legendre_Q0_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_Q0 ( const double x );
function gsl_sf_legendre_Q0( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Q1_e ( const double x , gsl_sf_result * result );
function gsl_sf_legendre_Q1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_Q1 ( const double x );
function gsl_sf_legendre_Q1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Ql_e ( const int l , const double x , gsl_sf_result * result );
function gsl_sf_legendre_Ql_e( const l : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_Ql ( const int l , const double x );
function gsl_sf_legendre_Ql( const l : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Plm_e ( const int l , const int m , const double x , gsl_sf_result * result );
function gsl_sf_legendre_Plm_e( const l : int; const m : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_Plm ( const int l , const int m , const double x );
function gsl_sf_legendre_Plm( const l : int; const m : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Plm_array ( const int lmax , const int m , const double x , double * result_array );
function gsl_sf_legendre_Plm_array( const lmax : int; const m : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_Plm_deriv_array ( const int lmax , const int m , const double x , double * result_array , double * result_deriv_array );
function gsl_sf_legendre_Plm_deriv_array( const lmax : int; const m : int; const x : double; result_arrays : pdouble; result_deriv_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_sphPlm_e ( const int l , int m , const double x , gsl_sf_result * result );
function gsl_sf_legendre_sphPlm_e( const l : int; m : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_sphPlm ( const int l , const int m , const double x );
function gsl_sf_legendre_sphPlm( const l : int; const m : int; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_sphPlm_array ( const int lmax , int m , const double x , double * result_array );
function gsl_sf_legendre_sphPlm_array( const lmax : int; m : int; const x : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_sphPlm_deriv_array ( const int lmax , const int m , const double x , double * result_array , double * result_deriv_array );
function gsl_sf_legendre_sphPlm_deriv_array( const lmax : int; const m : int; const x : double; result_arrays : pdouble; result_deriv_arrays : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_array_size ( const int lmax , const int m );
function gsl_sf_legendre_array_size( const lmax : int; const m : int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_half_e ( const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_half_e( const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_half ( const double lambda , const double x );
function gsl_sf_conicalP_half( const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_mhalf_e ( const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_mhalf_e( const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_mhalf ( const double lambda , const double x );
function gsl_sf_conicalP_mhalf( const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_0_e ( const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_0_e( const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_0 ( const double lambda , const double x );
function gsl_sf_conicalP_0( const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_1_e ( const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_1_e( const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_1 ( const double lambda , const double x );
function gsl_sf_conicalP_1( const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_sph_reg_e ( const int l , const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_sph_reg_e( const l : int; const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_sph_reg ( const int l , const double lambda , const double x );
function gsl_sf_conicalP_sph_reg( const l : int; const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_conicalP_cyl_reg_e ( const int m , const double lambda , const double x , gsl_sf_result * result );
function gsl_sf_conicalP_cyl_reg_e( const m : int; const lambda : double; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_conicalP_cyl_reg ( const int m , const double lambda , const double x );
function gsl_sf_conicalP_cyl_reg( const m : int; const lambda : double; const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_H3d_0_e ( const double lambda , const double eta , gsl_sf_result * result );
function gsl_sf_legendre_H3d_0_e( const lambda : double; const eta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_H3d_0 ( const double lambda , const double eta );
function gsl_sf_legendre_H3d_0( const lambda : double; const eta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_H3d_1_e ( const double lambda , const double eta , gsl_sf_result * result );
function gsl_sf_legendre_H3d_1_e( const lambda : double; const eta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_H3d_1 ( const double lambda , const double eta );
function gsl_sf_legendre_H3d_1( const lambda : double; const eta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_H3d_e ( const int l , const double lambda , const double eta , gsl_sf_result * result );
function gsl_sf_legendre_H3d_e( const l : int; const lambda : double; const eta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_legendre_H3d ( const int l , const double lambda , const double eta );
function gsl_sf_legendre_H3d( const l : int; const lambda : double; const eta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_legendre_H3d_array ( const int lmax , const double lambda , const double eta , double * result_array );
function gsl_sf_legendre_H3d_array( const lmax : int; const lambda : double; const eta : double; result_arrays : pdouble ) : int; cdecl; external gsl_dll;

//gsl_sf_log.h
//GSL_EXPORT int gsl_sf_log_e ( const double x , gsl_sf_result * result );
function gsl_sf_log_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_log ( const double x );
function gsl_sf_log( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_log_abs_e ( const double x , gsl_sf_result * result );
function gsl_sf_log_abs_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_log_abs ( const double x );
function gsl_sf_log_abs( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_log_e ( const double zr , const double zi , gsl_sf_result * lnr , gsl_sf_result * theta );
function gsl_sf_complex_log_e( const zr : double; const zi : double; lnr : pgsl_sf_result; theta : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_log_1plusx_e ( const double x , gsl_sf_result * result );
function gsl_sf_log_1plusx_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_log_1plusx ( const double x );
function gsl_sf_log_1plusx( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_log_1plusx_mx_e ( const double x , gsl_sf_result * result );
function gsl_sf_log_1plusx_mx_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_log_1plusx_mx ( const double x );
function gsl_sf_log_1plusx_mx( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_pow_int.h
//GSL_EXPORT int gsl_sf_pow_int_e ( double x , int n , gsl_sf_result * result );
function gsl_sf_pow_int_e( x : double; n : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_pow_int ( const double x , const int n );
function gsl_sf_pow_int( const x : double; const n : int ) : double; cdecl; external gsl_dll;

//gsl_sf_psi.h
//GSL_EXPORT int gsl_sf_psi_int_e ( const int n , gsl_sf_result * result );
function gsl_sf_psi_int_e( const n : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi_int ( const int n );
function gsl_sf_psi_int( const n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_psi_e ( const double x , gsl_sf_result * result );
function gsl_sf_psi_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi ( const double x );
function gsl_sf_psi( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_psi_1piy_e ( const double y , gsl_sf_result * result );
function gsl_sf_psi_1piy_e( const y : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi_1piy ( const double y );
function gsl_sf_psi_1piy( const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_psi_1_int_e ( const int n , gsl_sf_result * result );
function gsl_sf_psi_1_int_e( const n : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi_1_int ( const int n );
function gsl_sf_psi_1_int( const n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_psi_1_e ( const double x , gsl_sf_result * result );
function gsl_sf_psi_1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi_1 ( const double x );
function gsl_sf_psi_1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_psi_n_e ( const int n , const double x , gsl_sf_result * result );
function gsl_sf_psi_n_e( const n : int; const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_psi_n ( const int n , const double x );
function gsl_sf_psi_n( const n : int; const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_result.h
//GSL_EXPORT int gsl_sf_result_smash_e ( const gsl_sf_result_e10 * re , gsl_sf_result * r );
function gsl_sf_result_smash_e( const re : pgsl_sf_result_e10; r : pgsl_sf_result ) : int; cdecl; external gsl_dll;

//gsl_sf_synchrotron.h
//GSL_EXPORT int gsl_sf_synchrotron_1_e ( const double x , gsl_sf_result * result );
function gsl_sf_synchrotron_1_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_synchrotron_1 ( const double x );
function gsl_sf_synchrotron_1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_synchrotron_2_e ( const double x , gsl_sf_result * result );
function gsl_sf_synchrotron_2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_synchrotron_2 ( const double x );
function gsl_sf_synchrotron_2( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_transport.h
//GSL_EXPORT int gsl_sf_transport_2_e ( const double x , gsl_sf_result * result );
function gsl_sf_transport_2_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_transport_2 ( const double x );
function gsl_sf_transport_2( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_transport_3_e ( const double x , gsl_sf_result * result );
function gsl_sf_transport_3_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_transport_3 ( const double x );
function gsl_sf_transport_3( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_transport_4_e ( const double x , gsl_sf_result * result );
function gsl_sf_transport_4_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_transport_4 ( const double x );
function gsl_sf_transport_4( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_transport_5_e ( const double x , gsl_sf_result * result );
function gsl_sf_transport_5_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_transport_5 ( const double x );
function gsl_sf_transport_5( const x : double ) : double; cdecl; external gsl_dll;

//gsl_sf_trig.h
//GSL_EXPORT int gsl_sf_sin_e ( double x , gsl_sf_result * result );
function gsl_sf_sin_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_sin ( const double x );
function gsl_sf_sin( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_cos_e ( double x , gsl_sf_result * result );
function gsl_sf_cos_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_cos ( const double x );
function gsl_sf_cos( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hypot_e ( const double x , const double y , gsl_sf_result * result );
function gsl_sf_hypot_e( const x : double; const y : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hypot ( const double x , const double y );
function gsl_sf_hypot( const x : double; const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_sin_e ( const double zr , const double zi , gsl_sf_result * szr , gsl_sf_result * szi );
function gsl_sf_complex_sin_e( const zr : double; const zi : double; szr : pgsl_sf_result; szi : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_cos_e ( const double zr , const double zi , gsl_sf_result * czr , gsl_sf_result * czi );
function gsl_sf_complex_cos_e( const zr : double; const zi : double; czr : pgsl_sf_result; czi : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_complex_logsin_e ( const double zr , const double zi , gsl_sf_result * lszr , gsl_sf_result * lszi );
function gsl_sf_complex_logsin_e( const zr : double; const zi : double; lszr : pgsl_sf_result; lszi : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_sinc_e ( double x , gsl_sf_result * result );
function gsl_sf_sinc_e( x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_sinc ( const double x );
function gsl_sf_sinc( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lnsinh_e ( const double x , gsl_sf_result * result );
function gsl_sf_lnsinh_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lnsinh ( const double x );
function gsl_sf_lnsinh( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_lncosh_e ( const double x , gsl_sf_result * result );
function gsl_sf_lncosh_e( const x : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_lncosh ( const double x );
function gsl_sf_lncosh( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_polar_to_rect ( const double r , const double theta , gsl_sf_result * x , gsl_sf_result * y );
function gsl_sf_polar_to_rect( const r : double; const theta : double; x : pgsl_sf_result; y : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_rect_to_polar ( const double x , const double y , gsl_sf_result * r , gsl_sf_result * theta );
function gsl_sf_rect_to_polar( const x : double; const y : double; r : pgsl_sf_result; theta : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_sin_err_e ( const double x , const double dx , gsl_sf_result * result );
function gsl_sf_sin_err_e( const x : double; const dx : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_cos_err_e ( const double x , const double dx , gsl_sf_result * result );
function gsl_sf_cos_err_e( const x : double; const dx : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_angle_restrict_symm_e ( double * theta );
function gsl_sf_angle_restrict_symm_e( theta : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_angle_restrict_symm ( const double theta );
function gsl_sf_angle_restrict_symm( const theta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_angle_restrict_pos_e ( double * theta );
function gsl_sf_angle_restrict_pos_e( theta : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_angle_restrict_pos ( const double theta );
function gsl_sf_angle_restrict_pos( const theta : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_angle_restrict_symm_err_e ( const double theta , gsl_sf_result * result );
function gsl_sf_angle_restrict_symm_err_e( const theta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_angle_restrict_pos_err_e ( const double theta , gsl_sf_result * result );
function gsl_sf_angle_restrict_pos_err_e( const theta : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;

//gsl_sf_zeta.h
//GSL_EXPORT int gsl_sf_zeta_int_e ( const int n , gsl_sf_result * result );
function gsl_sf_zeta_int_e( const n : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_zeta_int ( const int n );
function gsl_sf_zeta_int( const n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_zeta_e ( const double s , gsl_sf_result * result );
function gsl_sf_zeta_e( const s : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_zeta ( const double s );
function gsl_sf_zeta( const s : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_zetam1_e ( const double s , gsl_sf_result * result );
function gsl_sf_zetam1_e( const s : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_zetam1 ( const double s );
function gsl_sf_zetam1( const s : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_zetam1_int_e ( const int s , gsl_sf_result * result );
function gsl_sf_zetam1_int_e( const s : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_zetam1_int ( const int s );
function gsl_sf_zetam1_int( const s : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_hzeta_e ( const double s , const double q , gsl_sf_result * result );
function gsl_sf_hzeta_e( const s : double; const q : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_hzeta ( const double s , const double q );
function gsl_sf_hzeta( const s : double; const q : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_eta_int_e ( int n , gsl_sf_result * result );
function gsl_sf_eta_int_e( n : int; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_eta_int ( const int n );
function gsl_sf_eta_int( const n : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sf_eta_e ( const double s , gsl_sf_result * result );
function gsl_sf_eta_e( const s : double; result : pgsl_sf_result ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_sf_eta ( const double s );
function gsl_sf_eta( const s : double ) : double; cdecl; external gsl_dll;

//gsl_siman.h
//GSL_EXPORT void gsl_siman_solve ( const gsl_rng * r , void * x0_p , gsl_siman_Efunc_t Ef , gsl_siman_step_t take_step , gsl_siman_metric_t distance , gsl_siman_print_t print_position , gsl_siman_copy_t copyfunc , gsl_siman_copy_construct_t copy_constructor , gsl_siman_destroy_t destructor , size_t element_size , gsl_siman_params_t params );
procedure gsl_siman_solve( const r : pgsl_rng; x0_p : pvoid; Ef : pgsl_siman_Efunc_t; take_step : pgsl_siman_step_t; distance : pgsl_siman_metric_t; print_position : gsl_siman_print_t; copyfunc : gsl_siman_copy_t; copy_constructor : gsl_siman_copy_construct_t; destructorF : gsl_siman_destroy_t; element_size : size_t; params : gsl_siman_params_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_siman_solve_many ( const gsl_rng * r , void * x0_p , gsl_siman_Efunc_t Ef , gsl_siman_step_t take_step , gsl_siman_metric_t distance , gsl_siman_print_t print_position , size_t element_size , gsl_siman_params_t params );
procedure gsl_siman_solve_many( const r : pgsl_rng; x0_p : pvoid; Ef : pgsl_siman_Efunc_t; take_step : pgsl_siman_step_t; distance : pgsl_siman_metric_t; print_position : gsl_siman_print_t; element_size : size_t; params : gsl_siman_params_t ); cdecl; external gsl_dll;

//gsl_sort.h

//gsl_sort_char.h
//GSL_EXPORT void gsl_sort_char ( char * data , const size_t stride , const size_t n );
procedure gsl_sort_char( data : pchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_char_index ( size_t * p , const char * data , const size_t stride , const size_t n );
procedure gsl_sort_char_index( p : psize_t; const data : pchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_char_smallest ( char * dest , const size_t k , const char * src , const size_t stride , const size_t n );
function gsl_sort_char_smallest( dest : pchar; const k : size_t; const src : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_char_smallest_index ( size_t * p , const size_t k , const char * src , const size_t stride , const size_t n );
function gsl_sort_char_smallest_index( p : psize_t; const k : size_t; const src : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_char_largest ( char * dest , const size_t k , const char * src , const size_t stride , const size_t n );
function gsl_sort_char_largest( dest : pchar; const k : size_t; const src : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_char_largest_index ( size_t * p , const size_t k , const char * src , const size_t stride , const size_t n );
function gsl_sort_char_largest_index( p : psize_t; const k : size_t; const src : pchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_double.h
//GSL_EXPORT void gsl_sort ( double * data , const size_t stride , const size_t n );
procedure gsl_sort( data : pdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_index ( size_t * p , const double * data , const size_t stride , const size_t n );
procedure gsl_sort_index( p : psize_t; const data : pdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_smallest ( double * dest , const size_t k , const double * src , const size_t stride , const size_t n );
function gsl_sort_smallest( dest : pdouble; const k : size_t; const src : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_smallest_index ( size_t * p , const size_t k , const double * src , const size_t stride , const size_t n );
function gsl_sort_smallest_index( p : psize_t; const k : size_t; const src : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_largest ( double * dest , const size_t k , const double * src , const size_t stride , const size_t n );
function gsl_sort_largest( dest : pdouble; const k : size_t; const src : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_largest_index ( size_t * p , const size_t k , const double * src , const size_t stride , const size_t n );
function gsl_sort_largest_index( p : psize_t; const k : size_t; const src : pdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_float.h
//GSL_EXPORT void gsl_sort_float ( float * data , const size_t stride , const size_t n );
procedure gsl_sort_float( data : pfloat; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_float_index ( size_t * p , const float * data , const size_t stride , const size_t n );
procedure gsl_sort_float_index( p : psize_t; const data : pfloat; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_float_smallest ( float * dest , const size_t k , const float * src , const size_t stride , const size_t n );
function gsl_sort_float_smallest( dest : pfloat; const k : size_t; const src : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_float_smallest_index ( size_t * p , const size_t k , const float * src , const size_t stride , const size_t n );
function gsl_sort_float_smallest_index( p : psize_t; const k : size_t; const src : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_float_largest ( float * dest , const size_t k , const float * src , const size_t stride , const size_t n );
function gsl_sort_float_largest( dest : pfloat; const k : size_t; const src : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_float_largest_index ( size_t * p , const size_t k , const float * src , const size_t stride , const size_t n );
function gsl_sort_float_largest_index( p : psize_t; const k : size_t; const src : pfloat; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_int.h
//GSL_EXPORT void gsl_sort_int ( int * data , const size_t stride , const size_t n );
procedure gsl_sort_int( data : pint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_int_index ( size_t * p , const int * data , const size_t stride , const size_t n );
procedure gsl_sort_int_index( p : psize_t; const data : pint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_int_smallest ( int * dest , const size_t k , const int * src , const size_t stride , const size_t n );
function gsl_sort_int_smallest( dest : pint; const k : size_t; const src : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_int_smallest_index ( size_t * p , const size_t k , const int * src , const size_t stride , const size_t n );
function gsl_sort_int_smallest_index( p : psize_t; const k : size_t; const src : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_int_largest ( int * dest , const size_t k , const int * src , const size_t stride , const size_t n );
function gsl_sort_int_largest( dest : pint; const k : size_t; const src : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_int_largest_index ( size_t * p , const size_t k , const int * src , const size_t stride , const size_t n );
function gsl_sort_int_largest_index( p : psize_t; const k : size_t; const src : pint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_long.h
//GSL_EXPORT void gsl_sort_long ( long * data , const size_t stride , const size_t n );
procedure gsl_sort_long( data : plong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_long_index ( size_t * p , const long * data , const size_t stride , const size_t n );
procedure gsl_sort_long_index( p : psize_t; const data : plong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_smallest ( long * dest , const size_t k , const long * src , const size_t stride , const size_t n );
function gsl_sort_long_smallest( dest : plong; const k : size_t; const src : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_smallest_index ( size_t * p , const size_t k , const long * src , const size_t stride , const size_t n );
function gsl_sort_long_smallest_index( p : psize_t; const k : size_t; const src : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_largest ( long * dest , const size_t k , const long * src , const size_t stride , const size_t n );
function gsl_sort_long_largest( dest : plong; const k : size_t; const src : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_largest_index ( size_t * p , const size_t k , const long * src , const size_t stride , const size_t n );
function gsl_sort_long_largest_index( p : psize_t; const k : size_t; const src : plong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_long_double.h
//GSL_EXPORT void gsl_sort_long_double ( long double * data , const size_t stride , const size_t n );
procedure gsl_sort_long_double( data : plongdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_long_double_index ( size_t * p , const long double * data , const size_t stride , const size_t n );
procedure gsl_sort_long_double_index( p : psize_t; const data : plongdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_double_smallest ( long double * dest , const size_t k , const long double * src , const size_t stride , const size_t n );
function gsl_sort_long_double_smallest( dest : plongdouble; const k : size_t; const src : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_double_smallest_index ( size_t * p , const size_t k , const long double * src , const size_t stride , const size_t n );
function gsl_sort_long_double_smallest_index( p : psize_t; const k : size_t; const src : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_double_largest ( long double * dest , const size_t k , const long double * src , const size_t stride , const size_t n );
function gsl_sort_long_double_largest( dest : plongdouble; const k : size_t; const src : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_long_double_largest_index ( size_t * p , const size_t k , const long double * src , const size_t stride , const size_t n );
function gsl_sort_long_double_largest_index( p : psize_t; const k : size_t; const src : plongdouble; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_short.h
//GSL_EXPORT void gsl_sort_short ( short * data , const size_t stride , const size_t n );
procedure gsl_sort_short( data : pshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_short_index ( size_t * p , const short * data , const size_t stride , const size_t n );
procedure gsl_sort_short_index( p : psize_t; const data : pshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_short_smallest ( short * dest , const size_t k , const short * src , const size_t stride , const size_t n );
function gsl_sort_short_smallest( dest : pshort; const k : size_t; const src : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_short_smallest_index ( size_t * p , const size_t k , const short * src , const size_t stride , const size_t n );
function gsl_sort_short_smallest_index( p : psize_t; const k : size_t; const src : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_short_largest ( short * dest , const size_t k , const short * src , const size_t stride , const size_t n );
function gsl_sort_short_largest( dest : pshort; const k : size_t; const src : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_short_largest_index ( size_t * p , const size_t k , const short * src , const size_t stride , const size_t n );
function gsl_sort_short_largest_index( p : psize_t; const k : size_t; const src : pshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_uchar.h
//GSL_EXPORT void gsl_sort_uchar ( unsignedchar * data , const size_t stride , const size_t n );
procedure gsl_sort_uchar( data : punsignedchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_uchar_index ( size_t * p , const unsignedchar * data , const size_t stride , const size_t n );
procedure gsl_sort_uchar_index( p : psize_t; const data : punsignedchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uchar_smallest ( unsignedchar * dest , const size_t k , const unsignedchar * src , const size_t stride , const size_t n );
function gsl_sort_uchar_smallest( dest : punsignedchar; const k : size_t; const src : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uchar_smallest_index ( size_t * p , const size_t k , const unsignedchar * src , const size_t stride , const size_t n );
function gsl_sort_uchar_smallest_index( p : psize_t; const k : size_t; const src : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uchar_largest ( unsignedchar * dest , const size_t k , const unsignedchar * src , const size_t stride , const size_t n );
function gsl_sort_uchar_largest( dest : punsignedchar; const k : size_t; const src : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uchar_largest_index ( size_t * p , const size_t k , const unsignedchar * src , const size_t stride , const size_t n );
function gsl_sort_uchar_largest_index( p : psize_t; const k : size_t; const src : punsignedchar; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_uint.h
//GSL_EXPORT void gsl_sort_uint ( unsignedint * data , const size_t stride , const size_t n );
procedure gsl_sort_uint( data : punsignedint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_uint_index ( size_t * p , const unsignedint * data , const size_t stride , const size_t n );
procedure gsl_sort_uint_index( p : psize_t; const data : punsignedint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uint_smallest ( unsignedint * dest , const size_t k , const unsignedint * src , const size_t stride , const size_t n );
function gsl_sort_uint_smallest( dest : punsignedint; const k : size_t; const src : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uint_smallest_index ( size_t * p , const size_t k , const unsignedint * src , const size_t stride , const size_t n );
function gsl_sort_uint_smallest_index( p : psize_t; const k : size_t; const src : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uint_largest ( unsignedint * dest , const size_t k , const unsignedint * src , const size_t stride , const size_t n );
function gsl_sort_uint_largest( dest : punsignedint; const k : size_t; const src : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_uint_largest_index ( size_t * p , const size_t k , const unsignedint * src , const size_t stride , const size_t n );
function gsl_sort_uint_largest_index( p : psize_t; const k : size_t; const src : punsignedint; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_ulong.h
//GSL_EXPORT void gsl_sort_ulong ( unsignedlong * data , const size_t stride , const size_t n );
procedure gsl_sort_ulong( data : punsignedlong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_ulong_index ( size_t * p , const unsignedlong * data , const size_t stride , const size_t n );
procedure gsl_sort_ulong_index( p : psize_t; const data : punsignedlong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ulong_smallest ( unsignedlong * dest , const size_t k , const unsignedlong * src , const size_t stride , const size_t n );
function gsl_sort_ulong_smallest( dest : punsignedlong; const k : size_t; const src : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ulong_smallest_index ( size_t * p , const size_t k , const unsignedlong * src , const size_t stride , const size_t n );
function gsl_sort_ulong_smallest_index( p : psize_t; const k : size_t; const src : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ulong_largest ( unsignedlong * dest , const size_t k , const unsignedlong * src , const size_t stride , const size_t n );
function gsl_sort_ulong_largest( dest : punsignedlong; const k : size_t; const src : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ulong_largest_index ( size_t * p , const size_t k , const unsignedlong * src , const size_t stride , const size_t n );
function gsl_sort_ulong_largest_index( p : psize_t; const k : size_t; const src : punsignedlong; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_ushort.h
//GSL_EXPORT void gsl_sort_ushort ( unsignedshort * data , const size_t stride , const size_t n );
procedure gsl_sort_ushort( data : punsignedshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sort_ushort_index ( size_t * p , const unsignedshort * data , const size_t stride , const size_t n );
procedure gsl_sort_ushort_index( p : psize_t; const data : punsignedshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ushort_smallest ( unsignedshort * dest , const size_t k , const unsignedshort * src , const size_t stride , const size_t n );
function gsl_sort_ushort_smallest( dest : punsignedshort; const k : size_t; const src : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ushort_smallest_index ( size_t * p , const size_t k , const unsignedshort * src , const size_t stride , const size_t n );
function gsl_sort_ushort_smallest_index( p : psize_t; const k : size_t; const src : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ushort_largest ( unsignedshort * dest , const size_t k , const unsignedshort * src , const size_t stride , const size_t n );
function gsl_sort_ushort_largest( dest : punsignedshort; const k : size_t; const src : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_ushort_largest_index ( size_t * p , const size_t k , const unsignedshort * src , const size_t stride , const size_t n );
function gsl_sort_ushort_largest_index( p : psize_t; const k : size_t; const src : punsignedshort; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;

//gsl_sort_vector.h

//gsl_sort_vector_char.h
//GSL_EXPORT void gsl_sort_vector_char ( gsl_vector_char * v );
procedure gsl_sort_vector_char( v : pgsl_vector_char ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_char_index ( gsl_permutation * p , const gsl_vector_char * v );
function gsl_sort_vector_char_index( p : pgsl_permutation; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_char_smallest ( char * dest , const size_t k , const gsl_vector_char * v );
function gsl_sort_vector_char_smallest( dest : pchar; const k : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_char_largest ( char * dest , const size_t k , const gsl_vector_char * v );
function gsl_sort_vector_char_largest( dest : pchar; const k : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_char_smallest_index ( size_t * p , const size_t k , const gsl_vector_char * v );
function gsl_sort_vector_char_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_char_largest_index ( size_t * p , const size_t k , const gsl_vector_char * v );
function gsl_sort_vector_char_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_double.h
//GSL_EXPORT void gsl_sort_vector ( gsl_vector * v );
procedure gsl_sort_vector( v : pgsl_vector ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_index ( gsl_permutation * p , const gsl_vector * v );
function gsl_sort_vector_index( p : pgsl_permutation; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_smallest ( double * dest , const size_t k , const gsl_vector * v );
function gsl_sort_vector_smallest( dest : pdouble; const k : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_largest ( double * dest , const size_t k , const gsl_vector * v );
function gsl_sort_vector_largest( dest : pdouble; const k : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_smallest_index ( size_t * p , const size_t k , const gsl_vector * v );
function gsl_sort_vector_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_largest_index ( size_t * p , const size_t k , const gsl_vector * v );
function gsl_sort_vector_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_float.h
//GSL_EXPORT void gsl_sort_vector_float ( gsl_vector_float * v );
procedure gsl_sort_vector_float( v : pgsl_vector_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_float_index ( gsl_permutation * p , const gsl_vector_float * v );
function gsl_sort_vector_float_index( p : pgsl_permutation; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_float_smallest ( float * dest , const size_t k , const gsl_vector_float * v );
function gsl_sort_vector_float_smallest( dest : pfloat; const k : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_float_largest ( float * dest , const size_t k , const gsl_vector_float * v );
function gsl_sort_vector_float_largest( dest : pfloat; const k : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_float_smallest_index ( size_t * p , const size_t k , const gsl_vector_float * v );
function gsl_sort_vector_float_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_float_largest_index ( size_t * p , const size_t k , const gsl_vector_float * v );
function gsl_sort_vector_float_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_int.h
//GSL_EXPORT void gsl_sort_vector_int ( gsl_vector_int * v );
procedure gsl_sort_vector_int( v : pgsl_vector_int ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_int_index ( gsl_permutation * p , const gsl_vector_int * v );
function gsl_sort_vector_int_index( p : pgsl_permutation; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_int_smallest ( int * dest , const size_t k , const gsl_vector_int * v );
function gsl_sort_vector_int_smallest( dest : pint; const k : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_int_largest ( int * dest , const size_t k , const gsl_vector_int * v );
function gsl_sort_vector_int_largest( dest : pint; const k : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_int_smallest_index ( size_t * p , const size_t k , const gsl_vector_int * v );
function gsl_sort_vector_int_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_int_largest_index ( size_t * p , const size_t k , const gsl_vector_int * v );
function gsl_sort_vector_int_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_long.h
//GSL_EXPORT void gsl_sort_vector_long ( gsl_vector_long * v );
procedure gsl_sort_vector_long( v : pgsl_vector_long ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_index ( gsl_permutation * p , const gsl_vector_long * v );
function gsl_sort_vector_long_index( p : pgsl_permutation; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_smallest ( long * dest , const size_t k , const gsl_vector_long * v );
function gsl_sort_vector_long_smallest( dest : plong; const k : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_largest ( long * dest , const size_t k , const gsl_vector_long * v );
function gsl_sort_vector_long_largest( dest : plong; const k : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_smallest_index ( size_t * p , const size_t k , const gsl_vector_long * v );
function gsl_sort_vector_long_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_largest_index ( size_t * p , const size_t k , const gsl_vector_long * v );
function gsl_sort_vector_long_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_long_double.h
//GSL_EXPORT void gsl_sort_vector_long_double ( gsl_vector_long_double * v );
procedure gsl_sort_vector_long_double( v : pgsl_vector_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_double_index ( gsl_permutation * p , const gsl_vector_long_double * v );
function gsl_sort_vector_long_double_index( p : pgsl_permutation; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_double_smallest ( long double * dest , const size_t k , const gsl_vector_long_double * v );
function gsl_sort_vector_long_double_smallest( dest : plongdouble; const k : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_double_largest ( long double * dest , const size_t k , const gsl_vector_long_double * v );
function gsl_sort_vector_long_double_largest( dest : plongdouble; const k : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_double_smallest_index ( size_t * p , const size_t k , const gsl_vector_long_double * v );
function gsl_sort_vector_long_double_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_long_double_largest_index ( size_t * p , const size_t k , const gsl_vector_long_double * v );
function gsl_sort_vector_long_double_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_short.h
//GSL_EXPORT void gsl_sort_vector_short ( gsl_vector_short * v );
procedure gsl_sort_vector_short( v : pgsl_vector_short ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_short_index ( gsl_permutation * p , const gsl_vector_short * v );
function gsl_sort_vector_short_index( p : pgsl_permutation; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_short_smallest ( short * dest , const size_t k , const gsl_vector_short * v );
function gsl_sort_vector_short_smallest( dest : pshort; const k : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_short_largest ( short * dest , const size_t k , const gsl_vector_short * v );
function gsl_sort_vector_short_largest( dest : pshort; const k : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_short_smallest_index ( size_t * p , const size_t k , const gsl_vector_short * v );
function gsl_sort_vector_short_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_short_largest_index ( size_t * p , const size_t k , const gsl_vector_short * v );
function gsl_sort_vector_short_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_uchar.h
//GSL_EXPORT void gsl_sort_vector_uchar ( gsl_vector_uchar * v );
procedure gsl_sort_vector_uchar( v : pgsl_vector_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uchar_index ( gsl_permutation * p , const gsl_vector_uchar * v );
function gsl_sort_vector_uchar_index( p : pgsl_permutation; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uchar_smallest ( unsignedchar * dest , const size_t k , const gsl_vector_uchar * v );
function gsl_sort_vector_uchar_smallest( dest : punsignedchar; const k : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uchar_largest ( unsignedchar * dest , const size_t k , const gsl_vector_uchar * v );
function gsl_sort_vector_uchar_largest( dest : punsignedchar; const k : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uchar_smallest_index ( size_t * p , const size_t k , const gsl_vector_uchar * v );
function gsl_sort_vector_uchar_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uchar_largest_index ( size_t * p , const size_t k , const gsl_vector_uchar * v );
function gsl_sort_vector_uchar_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_uint.h
//GSL_EXPORT void gsl_sort_vector_uint ( gsl_vector_uint * v );
procedure gsl_sort_vector_uint( v : pgsl_vector_uint ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uint_index ( gsl_permutation * p , const gsl_vector_uint * v );
function gsl_sort_vector_uint_index( p : pgsl_permutation; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uint_smallest ( unsignedint * dest , const size_t k , const gsl_vector_uint * v );
function gsl_sort_vector_uint_smallest( dest : punsignedint; const k : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uint_largest ( unsignedint * dest , const size_t k , const gsl_vector_uint * v );
function gsl_sort_vector_uint_largest( dest : punsignedint; const k : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uint_smallest_index ( size_t * p , const size_t k , const gsl_vector_uint * v );
function gsl_sort_vector_uint_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_uint_largest_index ( size_t * p , const size_t k , const gsl_vector_uint * v );
function gsl_sort_vector_uint_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_ulong.h
//GSL_EXPORT void gsl_sort_vector_ulong ( gsl_vector_ulong * v );
procedure gsl_sort_vector_ulong( v : pgsl_vector_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ulong_index ( gsl_permutation * p , const gsl_vector_ulong * v );
function gsl_sort_vector_ulong_index( p : pgsl_permutation; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ulong_smallest ( unsignedlong * dest , const size_t k , const gsl_vector_ulong * v );
function gsl_sort_vector_ulong_smallest( dest : punsignedlong; const k : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ulong_largest ( unsignedlong * dest , const size_t k , const gsl_vector_ulong * v );
function gsl_sort_vector_ulong_largest( dest : punsignedlong; const k : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ulong_smallest_index ( size_t * p , const size_t k , const gsl_vector_ulong * v );
function gsl_sort_vector_ulong_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ulong_largest_index ( size_t * p , const size_t k , const gsl_vector_ulong * v );
function gsl_sort_vector_ulong_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;

//gsl_sort_vector_ushort.h
//GSL_EXPORT void gsl_sort_vector_ushort ( gsl_vector_ushort * v );
procedure gsl_sort_vector_ushort( v : pgsl_vector_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ushort_index ( gsl_permutation * p , const gsl_vector_ushort * v );
function gsl_sort_vector_ushort_index( p : pgsl_permutation; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ushort_smallest ( unsignedshort * dest , const size_t k , const gsl_vector_ushort * v );
function gsl_sort_vector_ushort_smallest( dest : punsignedshort; const k : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ushort_largest ( unsignedshort * dest , const size_t k , const gsl_vector_ushort * v );
function gsl_sort_vector_ushort_largest( dest : punsignedshort; const k : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ushort_smallest_index ( size_t * p , const size_t k , const gsl_vector_ushort * v );
function gsl_sort_vector_ushort_smallest_index( p : psize_t; const k : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sort_vector_ushort_largest_index ( size_t * p , const size_t k , const gsl_vector_ushort * v );
function gsl_sort_vector_ushort_largest_index( p : psize_t; const k : size_t; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;

//gsl_specfunc.h
function gsl_interp_cspline : pgsl_interp_type;
function gsl_interp_linear : pgsl_interp_type;
function gsl_interp_polynomial : pgsl_interp_type;
function gsl_interp_cspline_periodic : pgsl_interp_type;
function gsl_interp_akima : pgsl_interp_type;
function gsl_interp_akima_periodic : pgsl_interp_type;
function gsl_interp_steffen : pgsl_interp_type;
//gsl_spline.h
//GSL_EXPORT gsl_spline * gsl_spline_alloc ( const gsl_interp_type * T , size_t size );
function gsl_spline_alloc( const T : pgsl_interp_type; size : size_t ) : pgsl_spline ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_spline_init ( gsl_spline * spline , const double xa [ ] , const double ya [ ] , size_t size );
function gsl_spline_init( spline : pgsl_spline; const xa : Pointer{array of  double}; const ya : pointer{array of  double}; size : size_t ) : int ; cdecl; external gsl_dll;
//function gsl_spline_init( spline : pgsl_spline; const xa; const ya; size : size_t ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_spline_name ( const gsl_spline * spline );
function gsl_spline_name( const spline : pgsl_spline ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_spline_min_size ( const gsl_spline * spline );
function gsl_spline_min_size( const spline : pgsl_spline ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_spline_eval_e ( const gsl_spline * spline , double x , gsl_interp_accel * a , double * y );
function gsl_spline_eval_e( const spline : pgsl_spline; x : double; a : pgsl_interp_accel; y : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_spline_eval ( const gsl_spline * spline , double x , gsl_interp_accel * a );
function gsl_spline_eval( const spline : pgsl_spline; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_spline_eval_deriv_e ( const gsl_spline * spline , double x , gsl_interp_accel * a , double * y );
function gsl_spline_eval_deriv_e( const spline : pgsl_spline; x : double; a : pgsl_interp_accel; y : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_spline_eval_deriv ( const gsl_spline * spline , double x , gsl_interp_accel * a );
function gsl_spline_eval_deriv( const spline : pgsl_spline; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_spline_eval_deriv2_e ( const gsl_spline * spline , double x , gsl_interp_accel * a , double * y );
function gsl_spline_eval_deriv2_e( const spline : pgsl_spline; x : double; a : pgsl_interp_accel; y : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_spline_eval_deriv2 ( const gsl_spline * spline , double x , gsl_interp_accel * a );
function gsl_spline_eval_deriv2( const spline : pgsl_spline; x : double; a : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_spline_eval_integ_e ( const gsl_spline * spline , double a , double b , gsl_interp_accel * acc , double * y );
function gsl_spline_eval_integ_e( const spline : pgsl_spline; a : double; b : double; acc : pgsl_interp_accel; y : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_spline_eval_integ ( const gsl_spline * spline , double a , double b , gsl_interp_accel * acc );
function gsl_spline_eval_integ( const spline : pgsl_spline; a : double; b : double; acc : pgsl_interp_accel ) : double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_spline_free ( gsl_spline * spline );
procedure gsl_spline_free( spline : pgsl_spline ); cdecl; external gsl_dll;

//gsl_statistics.h

//gsl_statistics_char.h
//GSL_EXPORT double gsl_stats_char_mean ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_mean( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_variance ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_variance( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_sd ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_sd( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_variance_with_fixed_mean ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_variance_with_fixed_mean( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_sd_with_fixed_mean ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_sd_with_fixed_mean( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_absdev ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_absdev( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_skew ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_skew( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_kurtosis ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_kurtosis( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_lag1_autocorrelation ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_lag1_autocorrelation( const data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_covariance ( const char data1 [ ] , const size_t stride1 , const char data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_char_covariance( const data1 : array of  char; const stride1 : size_t; const data2 : array of  char; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_variance_m ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_variance_m( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_sd_m ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_sd_m( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_absdev_m ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_absdev_m( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_skew_m_sd ( const char data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_char_skew_m_sd( const data : array of  char; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_kurtosis_m_sd ( const char data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_char_kurtosis_m_sd( const data : array of  char; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_lag1_autocorrelation_m ( const char data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_char_lag1_autocorrelation_m( const data : array of  char; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_covariance_m ( const char data1 [ ] , const size_t stride1 , const char data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_char_covariance_m( const data1 : array of  char; const stride1 : size_t; const data2 : array of  char; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_pvariance ( const char data1 [ ] , const size_t stride1 , const size_t n1 , const char data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_char_pvariance( const data1 : array of  char; const stride1 : size_t; const n1 : size_t; const data2 : array of  char; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_ttest ( const char data1 [ ] , const size_t stride1 , const size_t n1 , const char data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_char_ttest( const data1 : array of  char; const stride1 : size_t; const n1 : size_t; const data2 : array of  char; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_stats_char_max ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_max( const data : array of  char; const stride : size_t; const n : size_t ) : char; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_stats_char_min ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_min( const data : array of  char; const stride : size_t; const n : size_t ) : char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_char_minmax ( char * min , char * max , const char data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_char_minmax( min : pchar; max : pchar; const data : array of  char; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_char_max_index ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_max_index( const data : array of  char; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_char_min_index ( const char data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_min_index( const data : array of  char; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_char_minmax_index ( size_t * min_index , size_t * max_index , const char data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_char_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  char; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_median_from_sorted_data ( const char sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_char_median_from_sorted_data( const sorted_data : array of  char; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_char_quantile_from_sorted_data ( const char sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_char_quantile_from_sorted_data( const sorted_data : array of  char; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_double.h
//GSL_EXPORT double gsl_stats_mean ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_mean( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_variance ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_variance( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_sd ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_sd( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_variance_with_fixed_mean ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_variance_with_fixed_mean( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_sd_with_fixed_mean ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_sd_with_fixed_mean( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_absdev ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_absdev( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_skew ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_skew( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_kurtosis ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_kurtosis( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_lag1_autocorrelation ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_lag1_autocorrelation( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_covariance ( const double data1 [ ] , const size_t stride1 , const double data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_covariance( const data1 : array of  double; const stride1 : size_t; const data2 : array of  double; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_variance_m ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_variance_m( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_sd_m ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_sd_m( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_absdev_m ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_absdev_m( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_skew_m_sd ( const double data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_skew_m_sd( const data : array of  double; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_kurtosis_m_sd ( const double data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_kurtosis_m_sd( const data : array of  double; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_lag1_autocorrelation_m ( const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_lag1_autocorrelation_m( const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_covariance_m ( const double data1 [ ] , const size_t stride1 , const double data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_covariance_m( const data1 : array of  double; const stride1 : size_t; const data2 : array of  double; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wmean ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wmean( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wvariance ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wvariance( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wsd ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wsd( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wvariance_with_fixed_mean ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_wvariance_with_fixed_mean( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wsd_with_fixed_mean ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_wsd_with_fixed_mean( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wabsdev ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wabsdev( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wskew ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wskew( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wkurtosis ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_wkurtosis( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wvariance_m ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_wvariance_m( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wsd_m ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_wsd_m( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wabsdev_m ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_wabsdev_m( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wskew_m_sd ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_wskew_m_sd( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_wkurtosis_m_sd ( const double w [ ] , const size_t wstride , const double data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_wkurtosis_m_sd( const w : array of  double; const wstride : size_t; const data : array of  double; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_pvariance ( const double data1 [ ] , const size_t stride1 , const size_t n1 , const double data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_pvariance( const data1 : array of  double; const stride1 : size_t; const n1 : size_t; const data2 : array of  double; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ttest ( const double data1 [ ] , const size_t stride1 , const size_t n1 , const double data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_ttest( const data1 : array of  double; const stride1 : size_t; const n1 : size_t; const data2 : array of  double; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_max ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_max( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_min ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_min( const data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_minmax ( double * min , double * max , const double data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_minmax( min : pdouble; max : pdouble; const data : array of  double; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_max_index ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_max_index( const data : array of  double; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_min_index ( const double data [ ] , const size_t stride , const size_t n );
function gsl_stats_min_index( const data : array of  double; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_minmax_index ( size_t * min_index , size_t * max_index , const double data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  double; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_median_from_sorted_data ( const double sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_median_from_sorted_data( const sorted_data : array of  double; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_quantile_from_sorted_data ( const double sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_quantile_from_sorted_data( const sorted_data : array of  double; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_float.h
//GSL_EXPORT double gsl_stats_float_mean ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_mean( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_variance ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_variance( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_sd ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_sd( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_variance_with_fixed_mean ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_variance_with_fixed_mean( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_sd_with_fixed_mean ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_sd_with_fixed_mean( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_absdev ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_absdev( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_skew ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_skew( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_kurtosis ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_kurtosis( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_lag1_autocorrelation ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_lag1_autocorrelation( const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_covariance ( const float data1 [ ] , const size_t stride1 , const float data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_float_covariance( const data1 : array of  float; const stride1 : size_t; const data2 : array of  float; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_variance_m ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_variance_m( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_sd_m ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_sd_m( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_absdev_m ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_absdev_m( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_skew_m_sd ( const float data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_float_skew_m_sd( const data : array of  float; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_kurtosis_m_sd ( const float data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_float_kurtosis_m_sd( const data : array of  float; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_lag1_autocorrelation_m ( const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_lag1_autocorrelation_m( const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_covariance_m ( const float data1 [ ] , const size_t stride1 , const float data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_float_covariance_m( const data1 : array of  float; const stride1 : size_t; const data2 : array of  float; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wmean ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wmean( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wvariance ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wvariance( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wsd ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wsd( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wvariance_with_fixed_mean ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_wvariance_with_fixed_mean( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wsd_with_fixed_mean ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_float_wsd_with_fixed_mean( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wabsdev ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wabsdev( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wskew ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wskew( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wkurtosis ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_wkurtosis( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wvariance_m ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_float_wvariance_m( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wsd_m ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_float_wsd_m( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wabsdev_m ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_float_wabsdev_m( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wskew_m_sd ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_float_wskew_m_sd( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_wkurtosis_m_sd ( const float w [ ] , const size_t wstride , const float data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_float_wkurtosis_m_sd( const w : array of  float; const wstride : size_t; const data : array of  float; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_pvariance ( const float data1 [ ] , const size_t stride1 , const size_t n1 , const float data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_float_pvariance( const data1 : array of  float; const stride1 : size_t; const n1 : size_t; const data2 : array of  float; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_ttest ( const float data1 [ ] , const size_t stride1 , const size_t n1 , const float data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_float_ttest( const data1 : array of  float; const stride1 : size_t; const n1 : size_t; const data2 : array of  float; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_stats_float_max ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_max( const data : array of  float; const stride : size_t; const n : size_t ) : float; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_stats_float_min ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_min( const data : array of  float; const stride : size_t; const n : size_t ) : float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_float_minmax ( float * min , float * max , const float data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_float_minmax( min : pfloat; max : pfloat; const data : array of  float; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_float_max_index ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_max_index( const data : array of  float; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_float_min_index ( const float data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_min_index( const data : array of  float; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_float_minmax_index ( size_t * min_index , size_t * max_index , const float data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_float_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  float; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_median_from_sorted_data ( const float sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_float_median_from_sorted_data( const sorted_data : array of  float; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_float_quantile_from_sorted_data ( const float sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_float_quantile_from_sorted_data( const sorted_data : array of  float; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_int.h
//GSL_EXPORT double gsl_stats_int_mean ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_mean( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_variance ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_variance( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_sd ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_sd( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_variance_with_fixed_mean ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_variance_with_fixed_mean( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_sd_with_fixed_mean ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_sd_with_fixed_mean( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_absdev ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_absdev( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_skew ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_skew( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_kurtosis ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_kurtosis( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_lag1_autocorrelation ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_lag1_autocorrelation( const data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_covariance ( const int data1 [ ] , const size_t stride1 , const int data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_int_covariance( const data1 : array of  int; const stride1 : size_t; const data2 : array of  int; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_variance_m ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_variance_m( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_sd_m ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_sd_m( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_absdev_m ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_absdev_m( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_skew_m_sd ( const int data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_int_skew_m_sd( const data : array of  int; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_kurtosis_m_sd ( const int data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_int_kurtosis_m_sd( const data : array of  int; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_lag1_autocorrelation_m ( const int data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_int_lag1_autocorrelation_m( const data : array of  int; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_covariance_m ( const int data1 [ ] , const size_t stride1 , const int data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_int_covariance_m( const data1 : array of  int; const stride1 : size_t; const data2 : array of  int; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_pvariance ( const int data1 [ ] , const size_t stride1 , const size_t n1 , const int data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_int_pvariance( const data1 : array of  int; const stride1 : size_t; const n1 : size_t; const data2 : array of  int; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_ttest ( const int data1 [ ] , const size_t stride1 , const size_t n1 , const int data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_int_ttest( const data1 : array of  int; const stride1 : size_t; const n1 : size_t; const data2 : array of  int; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_stats_int_max ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_max( const data : array of  int; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_stats_int_min ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_min( const data : array of  int; const stride : size_t; const n : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_int_minmax ( int * min , int * max , const int data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_int_minmax( min : pint; max : pint; const data : array of  int; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_int_max_index ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_max_index( const data : array of  int; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_int_min_index ( const int data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_min_index( const data : array of  int; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_int_minmax_index ( size_t * min_index , size_t * max_index , const int data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_int_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  int; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_median_from_sorted_data ( const int sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_int_median_from_sorted_data( const sorted_data : array of  int; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_int_quantile_from_sorted_data ( const int sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_int_quantile_from_sorted_data( const sorted_data : array of  int; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_long.h
//GSL_EXPORT double gsl_stats_long_mean ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_mean( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_variance ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_variance( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_sd ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_sd( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_variance_with_fixed_mean ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_variance_with_fixed_mean( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_sd_with_fixed_mean ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_sd_with_fixed_mean( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_absdev ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_absdev( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_skew ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_skew( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_kurtosis ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_kurtosis( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_lag1_autocorrelation ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_lag1_autocorrelation( const data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_covariance ( const long data1 [ ] , const size_t stride1 , const long data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_long_covariance( const data1 : array of  long; const stride1 : size_t; const data2 : array of  long; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_variance_m ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_variance_m( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_sd_m ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_sd_m( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_absdev_m ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_absdev_m( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_skew_m_sd ( const long data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_long_skew_m_sd( const data : array of  long; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_kurtosis_m_sd ( const long data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_long_kurtosis_m_sd( const data : array of  long; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_lag1_autocorrelation_m ( const long data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_lag1_autocorrelation_m( const data : array of  long; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_covariance_m ( const long data1 [ ] , const size_t stride1 , const long data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_long_covariance_m( const data1 : array of  long; const stride1 : size_t; const data2 : array of  long; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_pvariance ( const long data1 [ ] , const size_t stride1 , const size_t n1 , const long data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_long_pvariance( const data1 : array of  long; const stride1 : size_t; const n1 : size_t; const data2 : array of  long; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_ttest ( const long data1 [ ] , const size_t stride1 , const size_t n1 , const long data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_long_ttest( const data1 : array of  long; const stride1 : size_t; const n1 : size_t; const data2 : array of  long; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_stats_long_max ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_max( const data : array of  long; const stride : size_t; const n : size_t ) : long; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_stats_long_min ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_min( const data : array of  long; const stride : size_t; const n : size_t ) : long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_long_minmax ( long * min , long * max , const long data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_long_minmax( min : plong; max : plong; const data : array of  long; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_long_max_index ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_max_index( const data : array of  long; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_long_min_index ( const long data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_min_index( const data : array of  long; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_long_minmax_index ( size_t * min_index , size_t * max_index , const long data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_long_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  long; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_median_from_sorted_data ( const long sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_median_from_sorted_data( const sorted_data : array of  long; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_quantile_from_sorted_data ( const long sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_long_quantile_from_sorted_data( const sorted_data : array of  long; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_long_double.h
//GSL_EXPORT double gsl_stats_long_double_mean ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_mean( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_variance ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_variance( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_sd ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_sd( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_variance_with_fixed_mean ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_variance_with_fixed_mean( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_sd_with_fixed_mean ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_sd_with_fixed_mean( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_absdev ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_absdev( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_skew ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_skew( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_kurtosis ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_kurtosis( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_lag1_autocorrelation ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_lag1_autocorrelation( const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_covariance ( const long double data1 [ ] , const size_t stride1 , const long double data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_long_double_covariance( const data1 : array of  longdouble; const stride1 : size_t; const data2 : array of  longdouble; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_variance_m ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_variance_m( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_sd_m ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_sd_m( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_absdev_m ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_absdev_m( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_skew_m_sd ( const long double data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_long_double_skew_m_sd( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_kurtosis_m_sd ( const long double data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_long_double_kurtosis_m_sd( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_lag1_autocorrelation_m ( const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_lag1_autocorrelation_m( const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_covariance_m ( const long double data1 [ ] , const size_t stride1 , const long double data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_long_double_covariance_m( const data1 : array of  longdouble; const stride1 : size_t; const data2 : array of  longdouble; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wmean ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wmean( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wvariance ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wvariance( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wsd ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wsd( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wvariance_with_fixed_mean ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_wvariance_with_fixed_mean( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wsd_with_fixed_mean ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_long_double_wsd_with_fixed_mean( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wabsdev ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wabsdev( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wskew ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wskew( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wkurtosis ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_wkurtosis( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wvariance_m ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_long_double_wvariance_m( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wsd_m ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_long_double_wsd_m( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wabsdev_m ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double wmean );
function gsl_stats_long_double_wabsdev_m( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const wmean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wskew_m_sd ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_long_double_wskew_m_sd( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_wkurtosis_m_sd ( const long double w [ ] , const size_t wstride , const long double data [ ] , const size_t stride , const size_t n , const double wmean , const double wsd );
function gsl_stats_long_double_wkurtosis_m_sd( const w : array of  longdouble; const wstride : size_t; const data : array of  longdouble; const stride : size_t; const n : size_t; const wmean : double; const wsd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_pvariance ( const long double data1 [ ] , const size_t stride1 , const size_t n1 , const long double data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_long_double_pvariance( const data1 : array of  longdouble; const stride1 : size_t; const n1 : size_t; const data2 : array of  longdouble; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_ttest ( const long double data1 [ ] , const size_t stride1 , const size_t n1 , const long double data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_long_double_ttest( const data1 : array of  longdouble; const stride1 : size_t; const n1 : size_t; const data2 : array of  longdouble; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_stats_long_double_max ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_max( const data : array of  longdouble; const stride : size_t; const n : size_t ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_stats_long_double_min ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_min( const data : array of  longdouble; const stride : size_t; const n : size_t ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_long_double_minmax ( long double * min , long double * max , const long double data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_long_double_minmax( min : plongdouble; max : plongdouble; const data : array of  longdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_long_double_max_index ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_max_index( const data : array of  longdouble; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_long_double_min_index ( const long double data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_min_index( const data : array of  longdouble; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_long_double_minmax_index ( size_t * min_index , size_t * max_index , const long double data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_long_double_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  longdouble; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_median_from_sorted_data ( const long double sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_long_double_median_from_sorted_data( const sorted_data : array of  longdouble; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_long_double_quantile_from_sorted_data ( const long double sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_long_double_quantile_from_sorted_data( const sorted_data : array of  longdouble; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_short.h
//GSL_EXPORT double gsl_stats_short_mean ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_mean( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_variance ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_variance( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_sd ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_sd( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_variance_with_fixed_mean ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_variance_with_fixed_mean( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_sd_with_fixed_mean ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_sd_with_fixed_mean( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_absdev ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_absdev( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_skew ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_skew( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_kurtosis ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_kurtosis( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_lag1_autocorrelation ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_lag1_autocorrelation( const data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_covariance ( const short data1 [ ] , const size_t stride1 , const short data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_short_covariance( const data1 : array of  short; const stride1 : size_t; const data2 : array of  short; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_variance_m ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_variance_m( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_sd_m ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_sd_m( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_absdev_m ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_absdev_m( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_skew_m_sd ( const short data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_short_skew_m_sd( const data : array of  short; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_kurtosis_m_sd ( const short data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_short_kurtosis_m_sd( const data : array of  short; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_lag1_autocorrelation_m ( const short data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_short_lag1_autocorrelation_m( const data : array of  short; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_covariance_m ( const short data1 [ ] , const size_t stride1 , const short data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_short_covariance_m( const data1 : array of  short; const stride1 : size_t; const data2 : array of  short; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_pvariance ( const short data1 [ ] , const size_t stride1 , const size_t n1 , const short data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_short_pvariance( const data1 : array of  short; const stride1 : size_t; const n1 : size_t; const data2 : array of  short; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_ttest ( const short data1 [ ] , const size_t stride1 , const size_t n1 , const short data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_short_ttest( const data1 : array of  short; const stride1 : size_t; const n1 : size_t; const data2 : array of  short; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_stats_short_max ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_max( const data : array of  short; const stride : size_t; const n : size_t ) : short; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_stats_short_min ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_min( const data : array of  short; const stride : size_t; const n : size_t ) : short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_short_minmax ( short * min , short * max , const short data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_short_minmax( min : pshort; max : pshort; const data : array of  short; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_short_max_index ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_max_index( const data : array of  short; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_short_min_index ( const short data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_min_index( const data : array of  short; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_short_minmax_index ( size_t * min_index , size_t * max_index , const short data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_short_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  short; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_median_from_sorted_data ( const short sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_short_median_from_sorted_data( const sorted_data : array of  short; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_short_quantile_from_sorted_data ( const short sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_short_quantile_from_sorted_data( const sorted_data : array of  short; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_uchar.h
//GSL_EXPORT double gsl_stats_uchar_mean ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_mean( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_variance ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_variance( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_sd ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_sd( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_variance_with_fixed_mean ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_variance_with_fixed_mean( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_sd_with_fixed_mean ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_sd_with_fixed_mean( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_absdev ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_absdev( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_skew ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_skew( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_kurtosis ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_kurtosis( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_lag1_autocorrelation ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_lag1_autocorrelation( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_covariance ( const unsignedchar data1 [ ] , const size_t stride1 , const unsignedchar data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_uchar_covariance( const data1 : array of  unsignedchar; const stride1 : size_t; const data2 : array of  unsignedchar; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_variance_m ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_variance_m( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_sd_m ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_sd_m( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_absdev_m ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_absdev_m( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_skew_m_sd ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_uchar_skew_m_sd( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_kurtosis_m_sd ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_uchar_kurtosis_m_sd( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_lag1_autocorrelation_m ( const unsignedchar data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uchar_lag1_autocorrelation_m( const data : array of  unsignedchar; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_covariance_m ( const unsignedchar data1 [ ] , const size_t stride1 , const unsignedchar data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_uchar_covariance_m( const data1 : array of  unsignedchar; const stride1 : size_t; const data2 : array of  unsignedchar; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_pvariance ( const unsignedchar data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedchar data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_uchar_pvariance( const data1 : array of  unsignedchar; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedchar; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_ttest ( const unsignedchar data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedchar data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_uchar_ttest( const data1 : array of  unsignedchar; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedchar; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_stats_uchar_max ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_max( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_stats_uchar_min ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_min( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_uchar_minmax ( unsignedchar * min , unsignedchar * max , const unsignedchar data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_uchar_minmax( min : punsignedchar; max : punsignedchar; const data : array of  unsignedchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_uchar_max_index ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_max_index( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_uchar_min_index ( const unsignedchar data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_min_index( const data : array of  unsignedchar; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_uchar_minmax_index ( size_t * min_index , size_t * max_index , const unsignedchar data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_uchar_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  unsignedchar; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_median_from_sorted_data ( const unsignedchar sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_uchar_median_from_sorted_data( const sorted_data : array of  unsignedchar; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uchar_quantile_from_sorted_data ( const unsignedchar sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_uchar_quantile_from_sorted_data( const sorted_data : array of  unsignedchar; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_uint.h
//GSL_EXPORT double gsl_stats_uint_mean ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_mean( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_variance ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_variance( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_sd ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_sd( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_variance_with_fixed_mean ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_variance_with_fixed_mean( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_sd_with_fixed_mean ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_sd_with_fixed_mean( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_absdev ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_absdev( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_skew ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_skew( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_kurtosis ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_kurtosis( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_lag1_autocorrelation ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_lag1_autocorrelation( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_covariance ( const unsignedint data1 [ ] , const size_t stride1 , const unsignedint data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_uint_covariance( const data1 : array of  unsignedint; const stride1 : size_t; const data2 : array of  unsignedint; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_variance_m ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_variance_m( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_sd_m ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_sd_m( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_absdev_m ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_absdev_m( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_skew_m_sd ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_uint_skew_m_sd( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_kurtosis_m_sd ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_uint_kurtosis_m_sd( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_lag1_autocorrelation_m ( const unsignedint data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_uint_lag1_autocorrelation_m( const data : array of  unsignedint; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_covariance_m ( const unsignedint data1 [ ] , const size_t stride1 , const unsignedint data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_uint_covariance_m( const data1 : array of  unsignedint; const stride1 : size_t; const data2 : array of  unsignedint; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_pvariance ( const unsignedint data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedint data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_uint_pvariance( const data1 : array of  unsignedint; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedint; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_ttest ( const unsignedint data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedint data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_uint_ttest( const data1 : array of  unsignedint; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedint; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_stats_uint_max ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_max( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_stats_uint_min ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_min( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_uint_minmax ( unsignedint * min , unsignedint * max , const unsignedint data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_uint_minmax( min : punsignedint; max : punsignedint; const data : array of  unsignedint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_uint_max_index ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_max_index( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_uint_min_index ( const unsignedint data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_min_index( const data : array of  unsignedint; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_uint_minmax_index ( size_t * min_index , size_t * max_index , const unsignedint data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_uint_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  unsignedint; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_median_from_sorted_data ( const unsignedint sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_uint_median_from_sorted_data( const sorted_data : array of  unsignedint; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_uint_quantile_from_sorted_data ( const unsignedint sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_uint_quantile_from_sorted_data( const sorted_data : array of  unsignedint; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_ulong.h
//GSL_EXPORT double gsl_stats_ulong_mean ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_mean( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_variance ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_variance( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_sd ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_sd( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_variance_with_fixed_mean ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_variance_with_fixed_mean( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_sd_with_fixed_mean ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_sd_with_fixed_mean( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_absdev ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_absdev( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_skew ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_skew( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_kurtosis ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_kurtosis( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_lag1_autocorrelation ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_lag1_autocorrelation( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_covariance ( const unsignedlong data1 [ ] , const size_t stride1 , const unsignedlong data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_ulong_covariance( const data1 : array of  unsignedlong; const stride1 : size_t; const data2 : array of  unsignedlong; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_variance_m ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_variance_m( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_sd_m ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_sd_m( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_absdev_m ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_absdev_m( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_skew_m_sd ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_ulong_skew_m_sd( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_kurtosis_m_sd ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_ulong_kurtosis_m_sd( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_lag1_autocorrelation_m ( const unsignedlong data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ulong_lag1_autocorrelation_m( const data : array of  unsignedlong; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_covariance_m ( const unsignedlong data1 [ ] , const size_t stride1 , const unsignedlong data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_ulong_covariance_m( const data1 : array of  unsignedlong; const stride1 : size_t; const data2 : array of  unsignedlong; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_pvariance ( const unsignedlong data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedlong data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_ulong_pvariance( const data1 : array of  unsignedlong; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedlong; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_ttest ( const unsignedlong data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedlong data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_ulong_ttest( const data1 : array of  unsignedlong; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedlong; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_stats_ulong_max ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_max( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_stats_ulong_min ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_min( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_ulong_minmax ( unsignedlong * min , unsignedlong * max , const unsignedlong data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_ulong_minmax( min : punsignedlong; max : punsignedlong; const data : array of  unsignedlong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_ulong_max_index ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_max_index( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_ulong_min_index ( const unsignedlong data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_min_index( const data : array of  unsignedlong; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_ulong_minmax_index ( size_t * min_index , size_t * max_index , const unsignedlong data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_ulong_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  unsignedlong; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_median_from_sorted_data ( const unsignedlong sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_ulong_median_from_sorted_data( const sorted_data : array of  unsignedlong; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ulong_quantile_from_sorted_data ( const unsignedlong sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_ulong_quantile_from_sorted_data( const sorted_data : array of  unsignedlong; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_statistics_ushort.h
//GSL_EXPORT double gsl_stats_ushort_mean ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_mean( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_variance ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_variance( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_sd ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_sd( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_variance_with_fixed_mean ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_variance_with_fixed_mean( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_sd_with_fixed_mean ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_sd_with_fixed_mean( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_absdev ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_absdev( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_skew ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_skew( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_kurtosis ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_kurtosis( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_lag1_autocorrelation ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_lag1_autocorrelation( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_covariance ( const unsignedshort data1 [ ] , const size_t stride1 , const unsignedshort data2 [ ] , const size_t stride2 , const size_t n );
function gsl_stats_ushort_covariance( const data1 : array of  unsignedshort; const stride1 : size_t; const data2 : array of  unsignedshort; const stride2 : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_variance_m ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_variance_m( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_sd_m ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_sd_m( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_absdev_m ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_absdev_m( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_skew_m_sd ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_ushort_skew_m_sd( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_kurtosis_m_sd ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean , const double sd );
function gsl_stats_ushort_kurtosis_m_sd( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double; const sd : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_lag1_autocorrelation_m ( const unsignedshort data [ ] , const size_t stride , const size_t n , const double mean );
function gsl_stats_ushort_lag1_autocorrelation_m( const data : array of  unsignedshort; const stride : size_t; const n : size_t; const mean : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_covariance_m ( const unsignedshort data1 [ ] , const size_t stride1 , const unsignedshort data2 [ ] , const size_t stride2 , const size_t n , const double mean1 , const double mean2 );
function gsl_stats_ushort_covariance_m( const data1 : array of  unsignedshort; const stride1 : size_t; const data2 : array of  unsignedshort; const stride2 : size_t; const n : size_t; const mean1 : double; const mean2 : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_pvariance ( const unsignedshort data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedshort data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_ushort_pvariance( const data1 : array of  unsignedshort; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedshort; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_ttest ( const unsignedshort data1 [ ] , const size_t stride1 , const size_t n1 , const unsignedshort data2 [ ] , const size_t stride2 , const size_t n2 );
function gsl_stats_ushort_ttest( const data1 : array of  unsignedshort; const stride1 : size_t; const n1 : size_t; const data2 : array of  unsignedshort; const stride2 : size_t; const n2 : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_stats_ushort_max ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_max( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_stats_ushort_min ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_min( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_ushort_minmax ( unsignedshort * min , unsignedshort * max , const unsignedshort data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_ushort_minmax( min : punsignedshort; max : punsignedshort; const data : array of  unsignedshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_ushort_max_index ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_max_index( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_stats_ushort_min_index ( const unsignedshort data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_min_index( const data : array of  unsignedshort; const stride : size_t; const n : size_t ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_stats_ushort_minmax_index ( size_t * min_index , size_t * max_index , const unsignedshort data [ ] , const size_t stride , const size_t n );
procedure gsl_stats_ushort_minmax_index( min_index : psize_t; max_index : psize_t; const data : array of  unsignedshort; const stride : size_t; const n : size_t ); cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_median_from_sorted_data ( const unsignedshort sorted_data [ ] , const size_t stride , const size_t n );
function gsl_stats_ushort_median_from_sorted_data( const sorted_data : array of  unsignedshort; const stride : size_t; const n : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_stats_ushort_quantile_from_sorted_data ( const unsignedshort sorted_data [ ] , const size_t stride , const size_t n , const double f );
function gsl_stats_ushort_quantile_from_sorted_data( const sorted_data : array of  unsignedshort; const stride : size_t; const n : size_t; const f : double ) : double; cdecl; external gsl_dll;

//gsl_sum.h
//GSL_EXPORT gsl_sum_levin_u_workspace * gsl_sum_levin_u_alloc ( size_t n );
function gsl_sum_levin_u_alloc( n : size_t ) : pgsl_sum_levin_u_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sum_levin_u_free ( gsl_sum_levin_u_workspace * w );
procedure gsl_sum_levin_u_free( w : pgsl_sum_levin_u_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_u_accel ( const double * array , const size_t n , gsl_sum_levin_u_workspace * w , double * sum_accel , double * abserr );
function gsl_sum_levin_u_accel( const arrays : pdouble; const n : size_t; w : pgsl_sum_levin_u_workspace; sum_accel : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_u_minmax ( const double * array , const size_t n , const size_t min_terms , const size_t max_terms , gsl_sum_levin_u_workspace * w , double * sum_accel , double * abserr );
function gsl_sum_levin_u_minmax( const arrays : pdouble; const n : size_t; const min_terms : size_t; const max_terms : size_t; w : pgsl_sum_levin_u_workspace; sum_accel : pdouble; abserr : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_u_step ( const double term , const size_t n , const size_t nmax , gsl_sum_levin_u_workspace * w , double * sum_accel );
function gsl_sum_levin_u_step( const term : double; const n : size_t; const nmax : size_t; w : pgsl_sum_levin_u_workspace; sum_accel : pdouble ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_sum_levin_utrunc_workspace * gsl_sum_levin_utrunc_alloc ( size_t n );
function gsl_sum_levin_utrunc_alloc( n : size_t ) : pgsl_sum_levin_utrunc_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_sum_levin_utrunc_free ( gsl_sum_levin_utrunc_workspace * w );
procedure gsl_sum_levin_utrunc_free( w : pgsl_sum_levin_utrunc_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_utrunc_accel ( const double * array , const size_t n , gsl_sum_levin_utrunc_workspace * w , double * sum_accel , double * abserr_trunc );
function gsl_sum_levin_utrunc_accel( const arrays : pdouble; const n : size_t; w : pgsl_sum_levin_utrunc_workspace; sum_accel : pdouble; abserr_trunc : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_utrunc_minmax ( const double * array , const size_t n , const size_t min_terms , const size_t max_terms , gsl_sum_levin_utrunc_workspace * w , double * sum_accel , double * abserr_trunc );
function gsl_sum_levin_utrunc_minmax( const arrays : pdouble; const n : size_t; const min_terms : size_t; const max_terms : size_t; w : pgsl_sum_levin_utrunc_workspace; sum_accel : pdouble; abserr_trunc : pdouble ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_sum_levin_utrunc_step ( const double term , const size_t n , gsl_sum_levin_utrunc_workspace * w , double * sum_accel );
function gsl_sum_levin_utrunc_step( const term : double; const n : size_t; w : pgsl_sum_levin_utrunc_workspace; sum_accel : pdouble ) : int; cdecl; external gsl_dll;

//gsl_sys.h
//GSL_EXPORT double gsl_log1p ( const double x );
function gsl_log1p( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_expm1 ( const double x );
function gsl_expm1( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_hypot ( const double x , const double y );
function gsl_hypot( const x : double; const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_acosh ( const double x );
function gsl_acosh( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_asinh ( const double x );
function gsl_asinh( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_atanh ( const double x );
function gsl_atanh( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_isnan ( const double x );
function gsl_isnan( const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_isinf ( const double x );
function gsl_isinf( const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_finite ( const double x );
function gsl_finite( const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_nan ( void );
function gsl_nan : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_posinf ( void );
function gsl_posinf : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_neginf ( void );
function gsl_neginf : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_fdiv ( const double x , const double y );
function gsl_fdiv( const x : double; const y : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_coerce_double ( const double x );
function gsl_coerce_double( const x : double ) : double; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_coerce_float ( const float x );
function gsl_coerce_float( const x : float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_coerce_long_double ( const long double x );
function gsl_coerce_long_double( const x : longdouble ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_ldexp ( const double x , const int e );
function gsl_ldexp( const x : double; const e : int ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_frexp ( const double x , int * e );
function gsl_frexp( const x : double; e : pint ) : double; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_fcmp ( const double x1 , const double x2 , const double epsilon );
function gsl_fcmp( const x1 : double; const x2 : double; const epsilon : double ) : int; cdecl; external gsl_dll;

//gsl_test.h
//GSL_EXPORT void gsl_test ( int status , const char * test_description , ... );
//Open Array
procedure gsl_test( status : int; const test_description : pchar; args : array of const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_rel ( double result , double expected , double relative_error , const char * test_description , . . . );
procedure gsl_test_rel( result : double; expected : double; relative_error : double; const test_description : pchar; args : array of  const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_abs ( double result , double expected , double absolute_error , const char * test_description , . . . );
procedure gsl_test_abs( result : double; expected : double; absolute_error : double; const test_description : pchar; args : array of  const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_factor ( double result , double expected , double factor , const char * test_description , . . . );
procedure gsl_test_factor( result : double; expected : double; factor : double; const test_description : pchar; args : array of  const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_int ( int result , int expected , const char * test_description , . . . );
procedure gsl_test_int( result : int; expected : int; const test_description : pchar; args : array of  const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_str ( const char * result , const char * expected , const char * test_description , . . . );
procedure gsl_test_str( const result : pchar; const expected : pchar; const test_description : pchar; args : array of  const); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_test_verbose ( int verbose );
procedure gsl_test_verbose( verbose : int ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_test_summary ( void );
function gsl_test_summary : int ; cdecl; external gsl_dll;

//gsl_types.h
//gsl_vector.h
//gsl_vector_char.h
//GSL_EXPORT gsl_vector_char * gsl_vector_char_alloc ( const size_t n );
function gsl_vector_char_alloc( const n : size_t ) : pgsl_vector_char; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_char * gsl_vector_char_calloc ( const size_t n );
function gsl_vector_char_calloc( const n : size_t ) : pgsl_vector_char; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_char * gsl_vector_char_alloc_from_block ( gsl_block_char * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_char_alloc_from_block( b : pgsl_block_char; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_char; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_char * gsl_vector_char_alloc_from_vector ( gsl_vector_char * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_char_alloc_from_vector( v : pgsl_vector_char; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_free ( gsl_vector_char * v );
procedure gsl_vector_char_free( v : pgsl_vector_char ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_vector_char_view_array ( char * v , size_t n );
function gsl_vector_char_view_array( v : pchar; n : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_vector_char_view_array_with_stride ( char * base , size_t stride , size_t n );
function gsl_vector_char_view_array_with_stride( base : pchar; stride : size_t; n : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_vector_char_const_view_array ( const char * v , size_t n );
function gsl_vector_char_const_view_array( const v : pchar; n : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_vector_char_const_view_array_with_stride ( const char * base , size_t stride , size_t n );
function gsl_vector_char_const_view_array_with_stride( const base : pchar; stride : size_t; n : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_vector_char_subvector ( gsl_vector_char * v , size_t i , size_t n );
function gsl_vector_char_subvector( v : pgsl_vector_char; i : size_t; n : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_view gsl_vector_char_subvector_with_stride ( gsl_vector_char * v , size_t i , size_t stride , size_t n );
function gsl_vector_char_subvector_with_stride( v : pgsl_vector_char; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_char_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_vector_char_const_subvector ( const gsl_vector_char * v , size_t i , size_t n );
function gsl_vector_char_const_subvector( const v : pgsl_vector_char; i : size_t; n : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_char_const_view gsl_vector_char_const_subvector_with_stride ( const gsl_vector_char * v , size_t i , size_t stride , size_t n );
function gsl_vector_char_const_subvector_with_stride( const v : pgsl_vector_char; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_char_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_vector_char_get ( const gsl_vector_char * v , const size_t i );
function gsl_vector_char_get( const v : pgsl_vector_char; const i : size_t ) : char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_set ( gsl_vector_char * v , const size_t i , char x );
procedure gsl_vector_char_set( v : pgsl_vector_char; const i : size_t; x : char ); cdecl; external gsl_dll;
//GSL_EXPORT char * gsl_vector_char_ptr ( gsl_vector_char * v , const size_t i );
function gsl_vector_char_ptr( v : pgsl_vector_char; const i : size_t ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_vector_char_const_ptr ( const gsl_vector_char * v , const size_t i );
function gsl_vector_char_const_ptr( const v : pgsl_vector_char; const i : size_t ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_set_zero ( gsl_vector_char * v );
procedure gsl_vector_char_set_zero( v : pgsl_vector_char ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_set_all ( gsl_vector_char * v , char x );
procedure gsl_vector_char_set_all( v : pgsl_vector_char; x : char ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_set_basis ( gsl_vector_char * v , size_t i );
function gsl_vector_char_set_basis( v : pgsl_vector_char; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_fread ( FILE * stream , gsl_vector_char * v );
function gsl_vector_char_fread( stream : pFILE; v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_fwrite ( FILE * stream , const gsl_vector_char * v );
function gsl_vector_char_fwrite( stream : pFILE; const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_fscanf ( FILE * stream , gsl_vector_char * v );
function gsl_vector_char_fscanf( stream : pFILE; v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_fprintf ( FILE * stream , const gsl_vector_char * v , const char * format );
function gsl_vector_char_fprintf( stream : pFILE; const v : pgsl_vector_char; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_memcpy ( gsl_vector_char * dest , const gsl_vector_char * src );
function gsl_vector_char_memcpy( dest : pgsl_vector_char; const src : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_reverse ( gsl_vector_char * v );
function gsl_vector_char_reverse( v : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_swap ( gsl_vector_char * v , gsl_vector_char * w );
function gsl_vector_char_swap( v : pgsl_vector_char; w : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_swap_elements ( gsl_vector_char * v , const size_t i , const size_t j );
function gsl_vector_char_swap_elements( v : pgsl_vector_char; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_vector_char_max ( const gsl_vector_char * v );
function gsl_vector_char_max( const v : pgsl_vector_char ) : char; cdecl; external gsl_dll;
//GSL_EXPORT char gsl_vector_char_min ( const gsl_vector_char * v );
function gsl_vector_char_min( const v : pgsl_vector_char ) : char; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_minmax ( const gsl_vector_char * v , char * min_out , char * max_out );
procedure gsl_vector_char_minmax( const v : pgsl_vector_char; min_out : pchar; max_out : pchar ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_char_max_index ( const gsl_vector_char * v );
function gsl_vector_char_max_index( const v : pgsl_vector_char ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_char_min_index ( const gsl_vector_char * v );
function gsl_vector_char_min_index( const v : pgsl_vector_char ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_char_minmax_index ( const gsl_vector_char * v , size_t * imin , size_t * imax );
procedure gsl_vector_char_minmax_index( const v : pgsl_vector_char; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_add ( gsl_vector_char * a , const gsl_vector_char * b );
function gsl_vector_char_add( a : pgsl_vector_char; const b : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_sub ( gsl_vector_char * a , const gsl_vector_char * b );
function gsl_vector_char_sub( a : pgsl_vector_char; const b : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_mul ( gsl_vector_char * a , const gsl_vector_char * b );
function gsl_vector_char_mul( a : pgsl_vector_char; const b : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_div ( gsl_vector_char * a , const gsl_vector_char * b );
function gsl_vector_char_div( a : pgsl_vector_char; const b : pgsl_vector_char ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_scale ( gsl_vector_char * a , const double x );
function gsl_vector_char_scale( a : pgsl_vector_char; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_add_constant ( gsl_vector_char * a , const double x );
function gsl_vector_char_add_constant( a : pgsl_vector_char; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_char_isnull ( const gsl_vector_char * v );
function gsl_vector_char_isnull( const v : pgsl_vector_char ) : int; cdecl; external gsl_dll;

//gsl_vector_complex.h

//gsl_vector_complex_double.h
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_alloc ( const size_t n );
function gsl_vector_complex_alloc( const n : size_t ) : pgsl_vector_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_calloc ( const size_t n );
function gsl_vector_complex_calloc( const n : size_t ) : pgsl_vector_complex; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_alloc_from_block ( gsl_block_complex * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_alloc_from_block( b : pgsl_block_complex; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex * gsl_vector_complex_alloc_from_vector ( gsl_vector_complex * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_alloc_from_vector( v : pgsl_vector_complex; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_free ( gsl_vector_complex * v );
procedure gsl_vector_complex_free( v : pgsl_vector_complex ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_vector_complex_view_array ( double * base , size_t n );
function gsl_vector_complex_view_array( base : pdouble; n : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_vector_complex_view_array_with_stride ( double * base , size_t stride , size_t n );
function gsl_vector_complex_view_array_with_stride( base : pdouble; stride : size_t; n : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_vector_complex_const_view_array ( const double * base , size_t n );
function gsl_vector_complex_const_view_array( const base : pdouble; n : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_vector_complex_const_view_array_with_stride ( const double * base , size_t stride , size_t n );
function gsl_vector_complex_const_view_array_with_stride( const base : pdouble; stride : size_t; n : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_vector_complex_subvector ( gsl_vector_complex * base , size_t i , size_t n );
function gsl_vector_complex_subvector( base : pgsl_vector_complex; i : size_t; n : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_view gsl_vector_complex_subvector_with_stride ( gsl_vector_complex * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_subvector_with_stride( v : pgsl_vector_complex; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_vector_complex_const_subvector ( const gsl_vector_complex * base , size_t i , size_t n );
function gsl_vector_complex_const_subvector( const base : pgsl_vector_complex; i : size_t; n : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_const_view gsl_vector_complex_const_subvector_with_stride ( const gsl_vector_complex * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_const_subvector_with_stride( const v : pgsl_vector_complex; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_complex_real ( gsl_vector_complex * v );
function gsl_vector_complex_real( v : pgsl_vector_complex ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_complex_imag ( gsl_vector_complex * v );
function gsl_vector_complex_imag( v : pgsl_vector_complex ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_complex_const_real ( const gsl_vector_complex * v );
function gsl_vector_complex_const_real( const v : pgsl_vector_complex ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_complex_const_imag ( const gsl_vector_complex * v );
function gsl_vector_complex_const_imag( const v : pgsl_vector_complex ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex gsl_vector_complex_get ( const gsl_vector_complex * v , const size_t i );
function gsl_vector_complex_get( const v : pgsl_vector_complex; const i : size_t ) : gsl_complex ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_set ( gsl_vector_complex * v , const size_t i , gsl_complex z );
procedure gsl_vector_complex_set( v : pgsl_vector_complex; const i : size_t; z : gsl_complex ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex * gsl_vector_complex_ptr ( gsl_vector_complex * v , const size_t i );
function gsl_vector_complex_ptr( v : pgsl_vector_complex; const i : size_t ) : pgsl_complex ; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex * gsl_vector_complex_const_ptr ( const gsl_vector_complex * v , const size_t i );
function gsl_vector_complex_const_ptr( const v : pgsl_vector_complex; const i : size_t ) : pgsl_complex ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_set_zero ( gsl_vector_complex * v );
procedure gsl_vector_complex_set_zero( v : pgsl_vector_complex ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_set_all ( gsl_vector_complex * v , gsl_complex z );
procedure gsl_vector_complex_set_all( v : pgsl_vector_complex; z : gsl_complex ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_set_basis ( gsl_vector_complex * v , size_t i );
function gsl_vector_complex_set_basis( v : pgsl_vector_complex; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_fread ( FILE * stream , gsl_vector_complex * v );
function gsl_vector_complex_fread( stream : pFILE; v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_fwrite ( FILE * stream , const gsl_vector_complex * v );
function gsl_vector_complex_fwrite( stream : pFILE; const v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_fscanf ( FILE * stream , gsl_vector_complex * v );
function gsl_vector_complex_fscanf( stream : pFILE; v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_fprintf ( FILE * stream , const gsl_vector_complex * v , const char * format );
function gsl_vector_complex_fprintf( stream : pFILE; const v : pgsl_vector_complex; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_memcpy ( gsl_vector_complex * dest , const gsl_vector_complex * src );
function gsl_vector_complex_memcpy( dest : pgsl_vector_complex; const src : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_reverse ( gsl_vector_complex * v );
function gsl_vector_complex_reverse( v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_swap ( gsl_vector_complex * v , gsl_vector_complex * w );
function gsl_vector_complex_swap( v : pgsl_vector_complex; w : pgsl_vector_complex ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_swap_elements ( gsl_vector_complex * v , const size_t i , const size_t j );
function gsl_vector_complex_swap_elements( v : pgsl_vector_complex; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_isnull ( const gsl_vector_complex * v );
function gsl_vector_complex_isnull( const v : pgsl_vector_complex ) : int; cdecl; external gsl_dll;

//gsl_vector_complex_float.h
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_alloc ( const size_t n );
function gsl_vector_complex_float_alloc( const n : size_t ) : pgsl_vector_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_calloc ( const size_t n );
function gsl_vector_complex_float_calloc( const n : size_t ) : pgsl_vector_complex_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_alloc_from_block ( gsl_block_complex_float * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_float_alloc_from_block( b : pgsl_block_complex_float; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_float * gsl_vector_complex_float_alloc_from_vector ( gsl_vector_complex_float * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_float_alloc_from_vector( v : pgsl_vector_complex_float; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_float_free ( gsl_vector_complex_float * v );
procedure gsl_vector_complex_float_free( v : pgsl_vector_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_vector_complex_float_view_array ( float * base , size_t n );
function gsl_vector_complex_float_view_array( base : pfloat; n : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_vector_complex_float_view_array_with_stride ( float * base , size_t stride , size_t n );
function gsl_vector_complex_float_view_array_with_stride( base : pfloat; stride : size_t; n : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_vector_complex_float_const_view_array ( const float * base , size_t n );
function gsl_vector_complex_float_const_view_array( const base : pfloat; n : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_vector_complex_float_const_view_array_with_stride ( const float * base , size_t stride , size_t n );
function gsl_vector_complex_float_const_view_array_with_stride( const base : pfloat; stride : size_t; n : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_vector_complex_float_subvector ( gsl_vector_complex_float * base , size_t i , size_t n );
function gsl_vector_complex_float_subvector( base : pgsl_vector_complex_float; i : size_t; n : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_view gsl_vector_complex_float_subvector_with_stride ( gsl_vector_complex_float * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_float_subvector_with_stride( v : pgsl_vector_complex_float; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_vector_complex_float_const_subvector ( const gsl_vector_complex_float * base , size_t i , size_t n );
function gsl_vector_complex_float_const_subvector( const base : pgsl_vector_complex_float; i : size_t; n : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_float_const_view gsl_vector_complex_float_const_subvector_with_stride ( const gsl_vector_complex_float * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_float_const_subvector_with_stride( const v : pgsl_vector_complex_float; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_complex_float_real ( gsl_vector_complex_float * v );
function gsl_vector_complex_float_real( v : pgsl_vector_complex_float ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_complex_float_imag ( gsl_vector_complex_float * v );
function gsl_vector_complex_float_imag( v : pgsl_vector_complex_float ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_complex_float_const_real ( const gsl_vector_complex_float * v );
function gsl_vector_complex_float_const_real( const v : pgsl_vector_complex_float ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_complex_float_const_imag ( const gsl_vector_complex_float * v );
function gsl_vector_complex_float_const_imag( const v : pgsl_vector_complex_float ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_float gsl_vector_complex_float_get ( const gsl_vector_complex_float * v , const size_t i );
function gsl_vector_complex_float_get( const v : pgsl_vector_complex_float; const i : size_t ) : gsl_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_float_set ( gsl_vector_complex_float * v , const size_t i , gsl_complex_float z );
procedure gsl_vector_complex_float_set( v : pgsl_vector_complex_float; const i : size_t; z : gsl_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_float * gsl_vector_complex_float_ptr ( gsl_vector_complex_float * v , const size_t i );
function gsl_vector_complex_float_ptr( v : pgsl_vector_complex_float; const i : size_t ) : pgsl_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex_float * gsl_vector_complex_float_const_ptr ( const gsl_vector_complex_float * v , const size_t i );
function gsl_vector_complex_float_const_ptr( const v : pgsl_vector_complex_float; const i : size_t ) : pgsl_complex_float ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_float_set_zero ( gsl_vector_complex_float * v );
procedure gsl_vector_complex_float_set_zero( v : pgsl_vector_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_float_set_all ( gsl_vector_complex_float * v , gsl_complex_float z );
procedure gsl_vector_complex_float_set_all( v : pgsl_vector_complex_float; z : gsl_complex_float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_set_basis ( gsl_vector_complex_float * v , size_t i );
function gsl_vector_complex_float_set_basis( v : pgsl_vector_complex_float; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_fread ( FILE * stream , gsl_vector_complex_float * v );
function gsl_vector_complex_float_fread( stream : pFILE; v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_fwrite ( FILE * stream , const gsl_vector_complex_float * v );
function gsl_vector_complex_float_fwrite( stream : pFILE; const v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_fscanf ( FILE * stream , gsl_vector_complex_float * v );
function gsl_vector_complex_float_fscanf( stream : pFILE; v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_fprintf ( FILE * stream , const gsl_vector_complex_float * v , const char * format );
function gsl_vector_complex_float_fprintf( stream : pFILE; const v : pgsl_vector_complex_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_memcpy ( gsl_vector_complex_float * dest , const gsl_vector_complex_float * src );
function gsl_vector_complex_float_memcpy( dest : pgsl_vector_complex_float; const src : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_reverse ( gsl_vector_complex_float * v );
function gsl_vector_complex_float_reverse( v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_swap ( gsl_vector_complex_float * v , gsl_vector_complex_float * w );
function gsl_vector_complex_float_swap( v : pgsl_vector_complex_float; w : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_swap_elements ( gsl_vector_complex_float * v , const size_t i , const size_t j );
function gsl_vector_complex_float_swap_elements( v : pgsl_vector_complex_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_float_isnull ( const gsl_vector_complex_float * v );
function gsl_vector_complex_float_isnull( const v : pgsl_vector_complex_float ) : int; cdecl; external gsl_dll;

//gsl_vector_complex_long_double.h
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_alloc ( const size_t n );
function gsl_vector_complex_long_double_alloc( const n : size_t ) : pgsl_vector_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_calloc ( const size_t n );
function gsl_vector_complex_long_double_calloc( const n : size_t ) : pgsl_vector_complex_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_alloc_from_block ( gsl_block_complex_long_double * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_long_double_alloc_from_block( b : pgsl_block_complex_long_double; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_complex_long_double * gsl_vector_complex_long_double_alloc_from_vector ( gsl_vector_complex_long_double * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_complex_long_double_alloc_from_vector( v : pgsl_vector_complex_long_double; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_long_double_free ( gsl_vector_complex_long_double * v );
procedure gsl_vector_complex_long_double_free( v : pgsl_vector_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_vector_complex_long_double_view_array ( long double * base , size_t n );
function gsl_vector_complex_long_double_view_array( base : plongdouble; n : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_vector_complex_long_double_view_array_with_stride ( long double * base , size_t stride , size_t n );
function gsl_vector_complex_long_double_view_array_with_stride( base : plongdouble; stride : size_t; n : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_vector_complex_long_double_const_view_array ( const long double * base , size_t n );
function gsl_vector_complex_long_double_const_view_array( const base : plongdouble; n : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_vector_complex_long_double_const_view_array_with_stride ( const long double * base , size_t stride , size_t n );
function gsl_vector_complex_long_double_const_view_array_with_stride( const base : plongdouble; stride : size_t; n : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_vector_complex_long_double_subvector ( gsl_vector_complex_long_double * base , size_t i , size_t n );
function gsl_vector_complex_long_double_subvector( base : pgsl_vector_complex_long_double; i : size_t; n : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_view gsl_vector_complex_long_double_subvector_with_stride ( gsl_vector_complex_long_double * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_long_double_subvector_with_stride( v : pgsl_vector_complex_long_double; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_vector_complex_long_double_const_subvector ( const gsl_vector_complex_long_double * base , size_t i , size_t n );
function gsl_vector_complex_long_double_const_subvector( const base : pgsl_vector_complex_long_double; i : size_t; n : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_complex_long_double_const_view gsl_vector_complex_long_double_const_subvector_with_stride ( const gsl_vector_complex_long_double * v , size_t i , size_t stride , size_t n );
function gsl_vector_complex_long_double_const_subvector_with_stride( const v : pgsl_vector_complex_long_double; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_complex_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_complex_long_double_real ( gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_real( v : pgsl_vector_complex_long_double ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_complex_long_double_imag ( gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_imag( v : pgsl_vector_complex_long_double ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_complex_long_double_const_real ( const gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_const_real( const v : pgsl_vector_complex_long_double ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_complex_long_double_const_imag ( const gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_const_imag( const v : pgsl_vector_complex_long_double ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_long_double gsl_vector_complex_long_double_get ( const gsl_vector_complex_long_double * v , const size_t i );
function gsl_vector_complex_long_double_get( const v : pgsl_vector_complex_long_double; const i : size_t ) : gsl_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_long_double_set ( gsl_vector_complex_long_double * v , const size_t i , gsl_complex_long_double z );
procedure gsl_vector_complex_long_double_set( v : pgsl_vector_complex_long_double; const i : size_t; z : gsl_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT gsl_complex_long_double * gsl_vector_complex_long_double_ptr ( gsl_vector_complex_long_double * v , const size_t i );
function gsl_vector_complex_long_double_ptr( v : pgsl_vector_complex_long_double; const i : size_t ) : pgsl_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT const gsl_complex_long_double * gsl_vector_complex_long_double_const_ptr ( const gsl_vector_complex_long_double * v , const size_t i );
function gsl_vector_complex_long_double_const_ptr( const v : pgsl_vector_complex_long_double; const i : size_t ) : pgsl_complex_long_double ; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_long_double_set_zero ( gsl_vector_complex_long_double * v );
procedure gsl_vector_complex_long_double_set_zero( v : pgsl_vector_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_complex_long_double_set_all ( gsl_vector_complex_long_double * v , gsl_complex_long_double z );
procedure gsl_vector_complex_long_double_set_all( v : pgsl_vector_complex_long_double; z : gsl_complex_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_set_basis ( gsl_vector_complex_long_double * v , size_t i );
function gsl_vector_complex_long_double_set_basis( v : pgsl_vector_complex_long_double; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_fread ( FILE * stream , gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_fread( stream : pFILE; v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_fwrite ( FILE * stream , const gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_fwrite( stream : pFILE; const v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_fscanf ( FILE * stream , gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_fscanf( stream : pFILE; v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_fprintf ( FILE * stream , const gsl_vector_complex_long_double * v , const char * format );
function gsl_vector_complex_long_double_fprintf( stream : pFILE; const v : pgsl_vector_complex_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_memcpy ( gsl_vector_complex_long_double * dest , const gsl_vector_complex_long_double * src );
function gsl_vector_complex_long_double_memcpy( dest : pgsl_vector_complex_long_double; const src : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_reverse ( gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_reverse( v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_swap ( gsl_vector_complex_long_double * v , gsl_vector_complex_long_double * w );
function gsl_vector_complex_long_double_swap( v : pgsl_vector_complex_long_double; w : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_swap_elements ( gsl_vector_complex_long_double * v , const size_t i , const size_t j );
function gsl_vector_complex_long_double_swap_elements( v : pgsl_vector_complex_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_complex_long_double_isnull ( const gsl_vector_complex_long_double * v );
function gsl_vector_complex_long_double_isnull( const v : pgsl_vector_complex_long_double ) : int; cdecl; external gsl_dll;

//gsl_vector_double.h
//GSL_EXPORT gsl_vector * gsl_vector_alloc ( const size_t n );
function gsl_vector_alloc( const n : size_t ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_vector_calloc ( const size_t n );
function gsl_vector_calloc( const n : size_t ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_vector_alloc_from_block ( gsl_block * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_alloc_from_block( b : pgsl_block; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector * gsl_vector_alloc_from_vector ( gsl_vector * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_alloc_from_vector( v : pgsl_vector; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_free ( gsl_vector * v );
procedure gsl_vector_free( v : pgsl_vector ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_view_array ( double * v , size_t n );
function gsl_vector_view_array( v : pdouble; n : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_view_array_with_stride ( double * base , size_t stride , size_t n );
function gsl_vector_view_array_with_stride( base : pdouble; stride : size_t; n : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_const_view_array ( const double * v , size_t n );
function gsl_vector_const_view_array( const v : pdouble; n : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_const_view_array_with_stride ( const double * base , size_t stride , size_t n );
function gsl_vector_const_view_array_with_stride( const base : pdouble; stride : size_t; n : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_subvector ( gsl_vector * v , size_t i , size_t n );
function gsl_vector_subvector( v : pgsl_vector; i : size_t; n : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_view gsl_vector_subvector_with_stride ( gsl_vector * v , size_t i , size_t stride , size_t n );
function gsl_vector_subvector_with_stride( v : pgsl_vector; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_const_subvector ( const gsl_vector * v , size_t i , size_t n );
function gsl_vector_const_subvector( const v : pgsl_vector; i : size_t; n : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_const_view gsl_vector_const_subvector_with_stride ( const gsl_vector * v , size_t i , size_t stride , size_t n );
function gsl_vector_const_subvector_with_stride( const v : pgsl_vector; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_vector_get ( const gsl_vector * v , const size_t i );
function gsl_vector_get( const v : pgsl_vector; const i : size_t ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_set ( gsl_vector * v , const size_t i , double x );
procedure gsl_vector_set( v : pgsl_vector; const i : size_t; x : double ); cdecl; external gsl_dll;
//GSL_EXPORT double * gsl_vector_ptr ( gsl_vector * v , const size_t i );
function gsl_vector_ptr( v : pgsl_vector; const i : size_t ) : pdouble; cdecl; external gsl_dll;
//GSL_EXPORT const double * gsl_vector_const_ptr ( const gsl_vector * v , const size_t i );
function gsl_vector_const_ptr( const v : pgsl_vector; const i : size_t ) : pdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_set_zero ( gsl_vector * v );
procedure gsl_vector_set_zero( v : pgsl_vector ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_set_all ( gsl_vector * v , double x );
procedure gsl_vector_set_all( v : pgsl_vector; x : double ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_set_basis ( gsl_vector * v , size_t i );
function gsl_vector_set_basis( v : pgsl_vector; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_fread ( FILE * stream , gsl_vector * v );
function gsl_vector_fread( stream : pFILE; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_fwrite ( FILE * stream , const gsl_vector * v );
function gsl_vector_fwrite( stream : pFILE; const v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_fscanf ( FILE * stream , gsl_vector * v );
function gsl_vector_fscanf( stream : pFILE; v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_fprintf ( FILE * stream , const gsl_vector * v , const char * format );
function gsl_vector_fprintf( stream : pFILE; const v : pgsl_vector; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_memcpy ( gsl_vector * dest , const gsl_vector * src );
function gsl_vector_memcpy( dest : pgsl_vector; const src : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_reverse ( gsl_vector * v );
function gsl_vector_reverse( v : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_swap ( gsl_vector * v , gsl_vector * w );
function gsl_vector_swap( v : pgsl_vector; w : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_swap_elements ( gsl_vector * v , const size_t i , const size_t j );
function gsl_vector_swap_elements( v : pgsl_vector; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_vector_max ( const gsl_vector * v );
function gsl_vector_max( const v : pgsl_vector ) : double; cdecl; external gsl_dll;
//GSL_EXPORT double gsl_vector_min ( const gsl_vector * v );
function gsl_vector_min( const v : pgsl_vector ) : double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_minmax ( const gsl_vector * v , double * min_out , double * max_out );
procedure gsl_vector_minmax( const v : pgsl_vector; min_out : pdouble; max_out : pdouble ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_max_index ( const gsl_vector * v );
function gsl_vector_max_index( const v : pgsl_vector ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_min_index ( const gsl_vector * v );
function gsl_vector_min_index( const v : pgsl_vector ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_minmax_index ( const gsl_vector * v , size_t * imin , size_t * imax );
procedure gsl_vector_minmax_index( const v : pgsl_vector; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_add ( gsl_vector * a , const gsl_vector * b );
function gsl_vector_add( a : pgsl_vector; const b : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_sub ( gsl_vector * a , const gsl_vector * b );
function gsl_vector_sub( a : pgsl_vector; const b : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_mul ( gsl_vector * a , const gsl_vector * b );
function gsl_vector_mul( a : pgsl_vector; const b : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_div ( gsl_vector * a , const gsl_vector * b );
function gsl_vector_div( a : pgsl_vector; const b : pgsl_vector ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_scale ( gsl_vector * a , const double x );
function gsl_vector_scale( a : pgsl_vector; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_add_constant ( gsl_vector * a , const double x );
function gsl_vector_add_constant( a : pgsl_vector; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_isnull ( const gsl_vector * v );
function gsl_vector_isnull( const v : pgsl_vector ) : int; cdecl; external gsl_dll;

//gsl_vector_float.h
//GSL_EXPORT gsl_vector_float * gsl_vector_float_alloc ( const size_t n );
function gsl_vector_float_alloc( const n : size_t ) : pgsl_vector_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_float * gsl_vector_float_calloc ( const size_t n );
function gsl_vector_float_calloc( const n : size_t ) : pgsl_vector_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_float * gsl_vector_float_alloc_from_block ( gsl_block_float * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_float_alloc_from_block( b : pgsl_block_float; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_float; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_float * gsl_vector_float_alloc_from_vector ( gsl_vector_float * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_float_alloc_from_vector( v : pgsl_vector_float; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_free ( gsl_vector_float * v );
procedure gsl_vector_float_free( v : pgsl_vector_float ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_float_view_array ( float * v , size_t n );
function gsl_vector_float_view_array( v : pfloat; n : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_float_view_array_with_stride ( float * base , size_t stride , size_t n );
function gsl_vector_float_view_array_with_stride( base : pfloat; stride : size_t; n : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_float_const_view_array ( const float * v , size_t n );
function gsl_vector_float_const_view_array( const v : pfloat; n : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_float_const_view_array_with_stride ( const float * base , size_t stride , size_t n );
function gsl_vector_float_const_view_array_with_stride( const base : pfloat; stride : size_t; n : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_float_subvector ( gsl_vector_float * v , size_t i , size_t n );
function gsl_vector_float_subvector( v : pgsl_vector_float; i : size_t; n : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_view gsl_vector_float_subvector_with_stride ( gsl_vector_float * v , size_t i , size_t stride , size_t n );
function gsl_vector_float_subvector_with_stride( v : pgsl_vector_float; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_float_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_float_const_subvector ( const gsl_vector_float * v , size_t i , size_t n );
function gsl_vector_float_const_subvector( const v : pgsl_vector_float; i : size_t; n : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_float_const_view gsl_vector_float_const_subvector_with_stride ( const gsl_vector_float * v , size_t i , size_t stride , size_t n );
function gsl_vector_float_const_subvector_with_stride( const v : pgsl_vector_float; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_float_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_vector_float_get ( const gsl_vector_float * v , const size_t i );
function gsl_vector_float_get( const v : pgsl_vector_float; const i : size_t ) : float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_set ( gsl_vector_float * v , const size_t i , float x );
procedure gsl_vector_float_set( v : pgsl_vector_float; const i : size_t; x : float ); cdecl; external gsl_dll;
//GSL_EXPORT float * gsl_vector_float_ptr ( gsl_vector_float * v , const size_t i );
function gsl_vector_float_ptr( v : pgsl_vector_float; const i : size_t ) : pfloat; cdecl; external gsl_dll;
//GSL_EXPORT const float * gsl_vector_float_const_ptr ( const gsl_vector_float * v , const size_t i );
function gsl_vector_float_const_ptr( const v : pgsl_vector_float; const i : size_t ) : pfloat; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_set_zero ( gsl_vector_float * v );
procedure gsl_vector_float_set_zero( v : pgsl_vector_float ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_set_all ( gsl_vector_float * v , float x );
procedure gsl_vector_float_set_all( v : pgsl_vector_float; x : float ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_set_basis ( gsl_vector_float * v , size_t i );
function gsl_vector_float_set_basis( v : pgsl_vector_float; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_fread ( FILE * stream , gsl_vector_float * v );
function gsl_vector_float_fread( stream : pFILE; v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_fwrite ( FILE * stream , const gsl_vector_float * v );
function gsl_vector_float_fwrite( stream : pFILE; const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_fscanf ( FILE * stream , gsl_vector_float * v );
function gsl_vector_float_fscanf( stream : pFILE; v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_fprintf ( FILE * stream , const gsl_vector_float * v , const char * format );
function gsl_vector_float_fprintf( stream : pFILE; const v : pgsl_vector_float; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_memcpy ( gsl_vector_float * dest , const gsl_vector_float * src );
function gsl_vector_float_memcpy( dest : pgsl_vector_float; const src : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_reverse ( gsl_vector_float * v );
function gsl_vector_float_reverse( v : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_swap ( gsl_vector_float * v , gsl_vector_float * w );
function gsl_vector_float_swap( v : pgsl_vector_float; w : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_swap_elements ( gsl_vector_float * v , const size_t i , const size_t j );
function gsl_vector_float_swap_elements( v : pgsl_vector_float; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_vector_float_max ( const gsl_vector_float * v );
function gsl_vector_float_max( const v : pgsl_vector_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT float gsl_vector_float_min ( const gsl_vector_float * v );
function gsl_vector_float_min( const v : pgsl_vector_float ) : float; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_minmax ( const gsl_vector_float * v , float * min_out , float * max_out );
procedure gsl_vector_float_minmax( const v : pgsl_vector_float; min_out : pfloat; max_out : pfloat ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_float_max_index ( const gsl_vector_float * v );
function gsl_vector_float_max_index( const v : pgsl_vector_float ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_float_min_index ( const gsl_vector_float * v );
function gsl_vector_float_min_index( const v : pgsl_vector_float ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_float_minmax_index ( const gsl_vector_float * v , size_t * imin , size_t * imax );
procedure gsl_vector_float_minmax_index( const v : pgsl_vector_float; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_add ( gsl_vector_float * a , const gsl_vector_float * b );
function gsl_vector_float_add( a : pgsl_vector_float; const b : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_sub ( gsl_vector_float * a , const gsl_vector_float * b );
function gsl_vector_float_sub( a : pgsl_vector_float; const b : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_mul ( gsl_vector_float * a , const gsl_vector_float * b );
function gsl_vector_float_mul( a : pgsl_vector_float; const b : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_div ( gsl_vector_float * a , const gsl_vector_float * b );
function gsl_vector_float_div( a : pgsl_vector_float; const b : pgsl_vector_float ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_scale ( gsl_vector_float * a , const double x );
function gsl_vector_float_scale( a : pgsl_vector_float; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_add_constant ( gsl_vector_float * a , const double x );
function gsl_vector_float_add_constant( a : pgsl_vector_float; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_float_isnull ( const gsl_vector_float * v );
function gsl_vector_float_isnull( const v : pgsl_vector_float ) : int; cdecl; external gsl_dll;

//gsl_vector_int.h
//GSL_EXPORT gsl_vector_int * gsl_vector_int_alloc ( const size_t n );
function gsl_vector_int_alloc( const n : size_t ) : pgsl_vector_int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_int * gsl_vector_int_calloc ( const size_t n );
function gsl_vector_int_calloc( const n : size_t ) : pgsl_vector_int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_int * gsl_vector_int_alloc_from_block ( gsl_block_int * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_int_alloc_from_block( b : pgsl_block_int; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_int; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_int * gsl_vector_int_alloc_from_vector ( gsl_vector_int * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_int_alloc_from_vector( v : pgsl_vector_int; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_free ( gsl_vector_int * v );
procedure gsl_vector_int_free( v : pgsl_vector_int ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_vector_int_view_array ( int * v , size_t n );
function gsl_vector_int_view_array( v : pint; n : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_vector_int_view_array_with_stride ( int * base , size_t stride , size_t n );
function gsl_vector_int_view_array_with_stride( base : pint; stride : size_t; n : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_vector_int_const_view_array ( const int * v , size_t n );
function gsl_vector_int_const_view_array( const v : pint; n : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_vector_int_const_view_array_with_stride ( const int * base , size_t stride , size_t n );
function gsl_vector_int_const_view_array_with_stride( const base : pint; stride : size_t; n : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_vector_int_subvector ( gsl_vector_int * v , size_t i , size_t n );
function gsl_vector_int_subvector( v : pgsl_vector_int; i : size_t; n : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_view gsl_vector_int_subvector_with_stride ( gsl_vector_int * v , size_t i , size_t stride , size_t n );
function gsl_vector_int_subvector_with_stride( v : pgsl_vector_int; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_int_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_vector_int_const_subvector ( const gsl_vector_int * v , size_t i , size_t n );
function gsl_vector_int_const_subvector( const v : pgsl_vector_int; i : size_t; n : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_int_const_view gsl_vector_int_const_subvector_with_stride ( const gsl_vector_int * v , size_t i , size_t stride , size_t n );
function gsl_vector_int_const_subvector_with_stride( const v : pgsl_vector_int; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_int_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_get ( const gsl_vector_int * v , const size_t i );
function gsl_vector_int_get( const v : pgsl_vector_int; const i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_set ( gsl_vector_int * v , const size_t i , int x );
procedure gsl_vector_int_set( v : pgsl_vector_int; const i : size_t; x : int ); cdecl; external gsl_dll;
//GSL_EXPORT int * gsl_vector_int_ptr ( gsl_vector_int * v , const size_t i );
function gsl_vector_int_ptr( v : pgsl_vector_int; const i : size_t ) : pint; cdecl; external gsl_dll;
//GSL_EXPORT const int * gsl_vector_int_const_ptr ( const gsl_vector_int * v , const size_t i );
function gsl_vector_int_const_ptr( const v : pgsl_vector_int; const i : size_t ) : pint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_set_zero ( gsl_vector_int * v );
procedure gsl_vector_int_set_zero( v : pgsl_vector_int ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_set_all ( gsl_vector_int * v , int x );
procedure gsl_vector_int_set_all( v : pgsl_vector_int; x : int ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_set_basis ( gsl_vector_int * v , size_t i );
function gsl_vector_int_set_basis( v : pgsl_vector_int; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_fread ( FILE * stream , gsl_vector_int * v );
function gsl_vector_int_fread( stream : pFILE; v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_fwrite ( FILE * stream , const gsl_vector_int * v );
function gsl_vector_int_fwrite( stream : pFILE; const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_fscanf ( FILE * stream , gsl_vector_int * v );
function gsl_vector_int_fscanf( stream : pFILE; v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_fprintf ( FILE * stream , const gsl_vector_int * v , const char * format );
function gsl_vector_int_fprintf( stream : pFILE; const v : pgsl_vector_int; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_memcpy ( gsl_vector_int * dest , const gsl_vector_int * src );
function gsl_vector_int_memcpy( dest : pgsl_vector_int; const src : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_reverse ( gsl_vector_int * v );
function gsl_vector_int_reverse( v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_swap ( gsl_vector_int * v , gsl_vector_int * w );
function gsl_vector_int_swap( v : pgsl_vector_int; w : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_swap_elements ( gsl_vector_int * v , const size_t i , const size_t j );
function gsl_vector_int_swap_elements( v : pgsl_vector_int; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_max ( const gsl_vector_int * v );
function gsl_vector_int_max( const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_min ( const gsl_vector_int * v );
function gsl_vector_int_min( const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_minmax ( const gsl_vector_int * v , int * min_out , int * max_out );
procedure gsl_vector_int_minmax( const v : pgsl_vector_int; min_out : pint; max_out : pint ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_int_max_index ( const gsl_vector_int * v );
function gsl_vector_int_max_index( const v : pgsl_vector_int ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_int_min_index ( const gsl_vector_int * v );
function gsl_vector_int_min_index( const v : pgsl_vector_int ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_int_minmax_index ( const gsl_vector_int * v , size_t * imin , size_t * imax );
procedure gsl_vector_int_minmax_index( const v : pgsl_vector_int; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_add ( gsl_vector_int * a , const gsl_vector_int * b );
function gsl_vector_int_add( a : pgsl_vector_int; const b : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_sub ( gsl_vector_int * a , const gsl_vector_int * b );
function gsl_vector_int_sub( a : pgsl_vector_int; const b : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_mul ( gsl_vector_int * a , const gsl_vector_int * b );
function gsl_vector_int_mul( a : pgsl_vector_int; const b : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_div ( gsl_vector_int * a , const gsl_vector_int * b );
function gsl_vector_int_div( a : pgsl_vector_int; const b : pgsl_vector_int ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_scale ( gsl_vector_int * a , const double x );
function gsl_vector_int_scale( a : pgsl_vector_int; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_add_constant ( gsl_vector_int * a , const double x );
function gsl_vector_int_add_constant( a : pgsl_vector_int; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_int_isnull ( const gsl_vector_int * v );
function gsl_vector_int_isnull( const v : pgsl_vector_int ) : int; cdecl; external gsl_dll;

//gsl_vector_long.h
//GSL_EXPORT gsl_vector_long * gsl_vector_long_alloc ( const size_t n );
function gsl_vector_long_alloc( const n : size_t ) : pgsl_vector_long; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long * gsl_vector_long_calloc ( const size_t n );
function gsl_vector_long_calloc( const n : size_t ) : pgsl_vector_long; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long * gsl_vector_long_alloc_from_block ( gsl_block_long * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_long_alloc_from_block( b : pgsl_block_long; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_long; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long * gsl_vector_long_alloc_from_vector ( gsl_vector_long * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_long_alloc_from_vector( v : pgsl_vector_long; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_free ( gsl_vector_long * v );
procedure gsl_vector_long_free( v : pgsl_vector_long ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_vector_long_view_array ( long * v , size_t n );
function gsl_vector_long_view_array( v : plong; n : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_vector_long_view_array_with_stride ( long * base , size_t stride , size_t n );
function gsl_vector_long_view_array_with_stride( base : plong; stride : size_t; n : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_vector_long_const_view_array ( const long * v , size_t n );
function gsl_vector_long_const_view_array( const v : plong; n : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_vector_long_const_view_array_with_stride ( const long * base , size_t stride , size_t n );
function gsl_vector_long_const_view_array_with_stride( const base : plong; stride : size_t; n : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_vector_long_subvector ( gsl_vector_long * v , size_t i , size_t n );
function gsl_vector_long_subvector( v : pgsl_vector_long; i : size_t; n : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_view gsl_vector_long_subvector_with_stride ( gsl_vector_long * v , size_t i , size_t stride , size_t n );
function gsl_vector_long_subvector_with_stride( v : pgsl_vector_long; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_long_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_vector_long_const_subvector ( const gsl_vector_long * v , size_t i , size_t n );
function gsl_vector_long_const_subvector( const v : pgsl_vector_long; i : size_t; n : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_const_view gsl_vector_long_const_subvector_with_stride ( const gsl_vector_long * v , size_t i , size_t stride , size_t n );
function gsl_vector_long_const_subvector_with_stride( const v : pgsl_vector_long; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_long_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_vector_long_get ( const gsl_vector_long * v , const size_t i );
function gsl_vector_long_get( const v : pgsl_vector_long; const i : size_t ) : long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_set ( gsl_vector_long * v , const size_t i , long x );
procedure gsl_vector_long_set( v : pgsl_vector_long; const i : size_t; x : long ); cdecl; external gsl_dll;
//GSL_EXPORT long * gsl_vector_long_ptr ( gsl_vector_long * v , const size_t i );
function gsl_vector_long_ptr( v : pgsl_vector_long; const i : size_t ) : plong; cdecl; external gsl_dll;
//GSL_EXPORT const long * gsl_vector_long_const_ptr ( const gsl_vector_long * v , const size_t i );
function gsl_vector_long_const_ptr( const v : pgsl_vector_long; const i : size_t ) : plong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_set_zero ( gsl_vector_long * v );
procedure gsl_vector_long_set_zero( v : pgsl_vector_long ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_set_all ( gsl_vector_long * v , long x );
procedure gsl_vector_long_set_all( v : pgsl_vector_long; x : long ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_set_basis ( gsl_vector_long * v , size_t i );
function gsl_vector_long_set_basis( v : pgsl_vector_long; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_fread ( FILE * stream , gsl_vector_long * v );
function gsl_vector_long_fread( stream : pFILE; v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_fwrite ( FILE * stream , const gsl_vector_long * v );
function gsl_vector_long_fwrite( stream : pFILE; const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_fscanf ( FILE * stream , gsl_vector_long * v );
function gsl_vector_long_fscanf( stream : pFILE; v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_fprintf ( FILE * stream , const gsl_vector_long * v , const char * format );
function gsl_vector_long_fprintf( stream : pFILE; const v : pgsl_vector_long; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_memcpy ( gsl_vector_long * dest , const gsl_vector_long * src );
function gsl_vector_long_memcpy( dest : pgsl_vector_long; const src : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_reverse ( gsl_vector_long * v );
function gsl_vector_long_reverse( v : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_swap ( gsl_vector_long * v , gsl_vector_long * w );
function gsl_vector_long_swap( v : pgsl_vector_long; w : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_swap_elements ( gsl_vector_long * v , const size_t i , const size_t j );
function gsl_vector_long_swap_elements( v : pgsl_vector_long; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_vector_long_max ( const gsl_vector_long * v );
function gsl_vector_long_max( const v : pgsl_vector_long ) : long; cdecl; external gsl_dll;
//GSL_EXPORT long gsl_vector_long_min ( const gsl_vector_long * v );
function gsl_vector_long_min( const v : pgsl_vector_long ) : long; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_minmax ( const gsl_vector_long * v , long * min_out , long * max_out );
procedure gsl_vector_long_minmax( const v : pgsl_vector_long; min_out : plong; max_out : plong ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_long_max_index ( const gsl_vector_long * v );
function gsl_vector_long_max_index( const v : pgsl_vector_long ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_long_min_index ( const gsl_vector_long * v );
function gsl_vector_long_min_index( const v : pgsl_vector_long ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_minmax_index ( const gsl_vector_long * v , size_t * imin , size_t * imax );
procedure gsl_vector_long_minmax_index( const v : pgsl_vector_long; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_add ( gsl_vector_long * a , const gsl_vector_long * b );
function gsl_vector_long_add( a : pgsl_vector_long; const b : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_sub ( gsl_vector_long * a , const gsl_vector_long * b );
function gsl_vector_long_sub( a : pgsl_vector_long; const b : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_mul ( gsl_vector_long * a , const gsl_vector_long * b );
function gsl_vector_long_mul( a : pgsl_vector_long; const b : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_div ( gsl_vector_long * a , const gsl_vector_long * b );
function gsl_vector_long_div( a : pgsl_vector_long; const b : pgsl_vector_long ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_scale ( gsl_vector_long * a , const double x );
function gsl_vector_long_scale( a : pgsl_vector_long; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_add_constant ( gsl_vector_long * a , const double x );
function gsl_vector_long_add_constant( a : pgsl_vector_long; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_isnull ( const gsl_vector_long * v );
function gsl_vector_long_isnull( const v : pgsl_vector_long ) : int; cdecl; external gsl_dll;

//gsl_vector_long_double.h
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_alloc ( const size_t n );
function gsl_vector_long_double_alloc( const n : size_t ) : pgsl_vector_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_calloc ( const size_t n );
function gsl_vector_long_double_calloc( const n : size_t ) : pgsl_vector_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_alloc_from_block ( gsl_block_long_double * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_long_double_alloc_from_block( b : pgsl_block_long_double; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_long_double; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_long_double * gsl_vector_long_double_alloc_from_vector ( gsl_vector_long_double * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_long_double_alloc_from_vector( v : pgsl_vector_long_double; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_long_double; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_free ( gsl_vector_long_double * v );
procedure gsl_vector_long_double_free( v : pgsl_vector_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_long_double_view_array ( long double * v , size_t n );
function gsl_vector_long_double_view_array( v : plongdouble; n : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_long_double_view_array_with_stride ( long double * base , size_t stride , size_t n );
function gsl_vector_long_double_view_array_with_stride( base : plongdouble; stride : size_t; n : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_long_double_const_view_array ( const long double * v , size_t n );
function gsl_vector_long_double_const_view_array( const v : plongdouble; n : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_long_double_const_view_array_with_stride ( const long double * base , size_t stride , size_t n );
function gsl_vector_long_double_const_view_array_with_stride( const base : plongdouble; stride : size_t; n : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_long_double_subvector ( gsl_vector_long_double * v , size_t i , size_t n );
function gsl_vector_long_double_subvector( v : pgsl_vector_long_double; i : size_t; n : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_view gsl_vector_long_double_subvector_with_stride ( gsl_vector_long_double * v , size_t i , size_t stride , size_t n );
function gsl_vector_long_double_subvector_with_stride( v : pgsl_vector_long_double; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_long_double_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_long_double_const_subvector ( const gsl_vector_long_double * v , size_t i , size_t n );
function gsl_vector_long_double_const_subvector( const v : pgsl_vector_long_double; i : size_t; n : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_long_double_const_view gsl_vector_long_double_const_subvector_with_stride ( const gsl_vector_long_double * v , size_t i , size_t stride , size_t n );
function gsl_vector_long_double_const_subvector_with_stride( const v : pgsl_vector_long_double; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_long_double_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_vector_long_double_get ( const gsl_vector_long_double * v , const size_t i );
function gsl_vector_long_double_get( const v : pgsl_vector_long_double; const i : size_t ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_set ( gsl_vector_long_double * v , const size_t i , long double x );
procedure gsl_vector_long_double_set( v : pgsl_vector_long_double; const i : size_t; x : longdouble ); cdecl; external gsl_dll;
//GSL_EXPORT long double * gsl_vector_long_double_ptr ( gsl_vector_long_double * v , const size_t i );
function gsl_vector_long_double_ptr( v : pgsl_vector_long_double; const i : size_t ) : plongdouble; cdecl; external gsl_dll;
//GSL_EXPORT const long double * gsl_vector_long_double_const_ptr ( const gsl_vector_long_double * v , const size_t i );
function gsl_vector_long_double_const_ptr( const v : pgsl_vector_long_double; const i : size_t ) : plongdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_set_zero ( gsl_vector_long_double * v );
procedure gsl_vector_long_double_set_zero( v : pgsl_vector_long_double ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_set_all ( gsl_vector_long_double * v , long double x );
procedure gsl_vector_long_double_set_all( v : pgsl_vector_long_double; x : longdouble ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_set_basis ( gsl_vector_long_double * v , size_t i );
function gsl_vector_long_double_set_basis( v : pgsl_vector_long_double; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_fread ( FILE * stream , gsl_vector_long_double * v );
function gsl_vector_long_double_fread( stream : pFILE; v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_fwrite ( FILE * stream , const gsl_vector_long_double * v );
function gsl_vector_long_double_fwrite( stream : pFILE; const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_fscanf ( FILE * stream , gsl_vector_long_double * v );
function gsl_vector_long_double_fscanf( stream : pFILE; v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_fprintf ( FILE * stream , const gsl_vector_long_double * v , const char * format );
function gsl_vector_long_double_fprintf( stream : pFILE; const v : pgsl_vector_long_double; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_memcpy ( gsl_vector_long_double * dest , const gsl_vector_long_double * src );
function gsl_vector_long_double_memcpy( dest : pgsl_vector_long_double; const src : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_reverse ( gsl_vector_long_double * v );
function gsl_vector_long_double_reverse( v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_swap ( gsl_vector_long_double * v , gsl_vector_long_double * w );
function gsl_vector_long_double_swap( v : pgsl_vector_long_double; w : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_swap_elements ( gsl_vector_long_double * v , const size_t i , const size_t j );
function gsl_vector_long_double_swap_elements( v : pgsl_vector_long_double; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_vector_long_double_max ( const gsl_vector_long_double * v );
function gsl_vector_long_double_max( const v : pgsl_vector_long_double ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT long double gsl_vector_long_double_min ( const gsl_vector_long_double * v );
function gsl_vector_long_double_min( const v : pgsl_vector_long_double ) : longdouble; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_minmax ( const gsl_vector_long_double * v , long double * min_out , long double * max_out );
procedure gsl_vector_long_double_minmax( const v : pgsl_vector_long_double; min_out : plongdouble; max_out : plongdouble ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_long_double_max_index ( const gsl_vector_long_double * v );
function gsl_vector_long_double_max_index( const v : pgsl_vector_long_double ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_long_double_min_index ( const gsl_vector_long_double * v );
function gsl_vector_long_double_min_index( const v : pgsl_vector_long_double ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_long_double_minmax_index ( const gsl_vector_long_double * v , size_t * imin , size_t * imax );
procedure gsl_vector_long_double_minmax_index( const v : pgsl_vector_long_double; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_add ( gsl_vector_long_double * a , const gsl_vector_long_double * b );
function gsl_vector_long_double_add( a : pgsl_vector_long_double; const b : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_sub ( gsl_vector_long_double * a , const gsl_vector_long_double * b );
function gsl_vector_long_double_sub( a : pgsl_vector_long_double; const b : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_mul ( gsl_vector_long_double * a , const gsl_vector_long_double * b );
function gsl_vector_long_double_mul( a : pgsl_vector_long_double; const b : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_div ( gsl_vector_long_double * a , const gsl_vector_long_double * b );
function gsl_vector_long_double_div( a : pgsl_vector_long_double; const b : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_scale ( gsl_vector_long_double * a , const double x );
function gsl_vector_long_double_scale( a : pgsl_vector_long_double; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_add_constant ( gsl_vector_long_double * a , const double x );
function gsl_vector_long_double_add_constant( a : pgsl_vector_long_double; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_long_double_isnull ( const gsl_vector_long_double * v );
function gsl_vector_long_double_isnull( const v : pgsl_vector_long_double ) : int; cdecl; external gsl_dll;

//gsl_vector_short.h
//GSL_EXPORT gsl_vector_short * gsl_vector_short_alloc ( const size_t n );
function gsl_vector_short_alloc( const n : size_t ) : pgsl_vector_short; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_short * gsl_vector_short_calloc ( const size_t n );
function gsl_vector_short_calloc( const n : size_t ) : pgsl_vector_short; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_short * gsl_vector_short_alloc_from_block ( gsl_block_short * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_short_alloc_from_block( b : pgsl_block_short; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_short; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_short * gsl_vector_short_alloc_from_vector ( gsl_vector_short * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_short_alloc_from_vector( v : pgsl_vector_short; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_free ( gsl_vector_short * v );
procedure gsl_vector_short_free( v : pgsl_vector_short ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_vector_short_view_array ( short * v , size_t n );
function gsl_vector_short_view_array( v : pshort; n : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_vector_short_view_array_with_stride ( short * base , size_t stride , size_t n );
function gsl_vector_short_view_array_with_stride( base : pshort; stride : size_t; n : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_vector_short_const_view_array ( const short * v , size_t n );
function gsl_vector_short_const_view_array( const v : pshort; n : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_vector_short_const_view_array_with_stride ( const short * base , size_t stride , size_t n );
function gsl_vector_short_const_view_array_with_stride( const base : pshort; stride : size_t; n : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_vector_short_subvector ( gsl_vector_short * v , size_t i , size_t n );
function gsl_vector_short_subvector( v : pgsl_vector_short; i : size_t; n : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_view gsl_vector_short_subvector_with_stride ( gsl_vector_short * v , size_t i , size_t stride , size_t n );
function gsl_vector_short_subvector_with_stride( v : pgsl_vector_short; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_short_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_vector_short_const_subvector ( const gsl_vector_short * v , size_t i , size_t n );
function gsl_vector_short_const_subvector( const v : pgsl_vector_short; i : size_t; n : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_short_const_view gsl_vector_short_const_subvector_with_stride ( const gsl_vector_short * v , size_t i , size_t stride , size_t n );
function gsl_vector_short_const_subvector_with_stride( const v : pgsl_vector_short; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_short_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_vector_short_get ( const gsl_vector_short * v , const size_t i );
function gsl_vector_short_get( const v : pgsl_vector_short; const i : size_t ) : short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_set ( gsl_vector_short * v , const size_t i , short x );
procedure gsl_vector_short_set( v : pgsl_vector_short; const i : size_t; x : short ); cdecl; external gsl_dll;
//GSL_EXPORT short * gsl_vector_short_ptr ( gsl_vector_short * v , const size_t i );
function gsl_vector_short_ptr( v : pgsl_vector_short; const i : size_t ) : pshort; cdecl; external gsl_dll;
//GSL_EXPORT const short * gsl_vector_short_const_ptr ( const gsl_vector_short * v , const size_t i );
function gsl_vector_short_const_ptr( const v : pgsl_vector_short; const i : size_t ) : pshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_set_zero ( gsl_vector_short * v );
procedure gsl_vector_short_set_zero( v : pgsl_vector_short ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_set_all ( gsl_vector_short * v , short x );
procedure gsl_vector_short_set_all( v : pgsl_vector_short; x : short ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_set_basis ( gsl_vector_short * v , size_t i );
function gsl_vector_short_set_basis( v : pgsl_vector_short; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_fread ( FILE * stream , gsl_vector_short * v );
function gsl_vector_short_fread( stream : pFILE; v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_fwrite ( FILE * stream , const gsl_vector_short * v );
function gsl_vector_short_fwrite( stream : pFILE; const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_fscanf ( FILE * stream , gsl_vector_short * v );
function gsl_vector_short_fscanf( stream : pFILE; v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_fprintf ( FILE * stream , const gsl_vector_short * v , const char * format );
function gsl_vector_short_fprintf( stream : pFILE; const v : pgsl_vector_short; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_memcpy ( gsl_vector_short * dest , const gsl_vector_short * src );
function gsl_vector_short_memcpy( dest : pgsl_vector_short; const src : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_reverse ( gsl_vector_short * v );
function gsl_vector_short_reverse( v : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_swap ( gsl_vector_short * v , gsl_vector_short * w );
function gsl_vector_short_swap( v : pgsl_vector_short; w : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_swap_elements ( gsl_vector_short * v , const size_t i , const size_t j );
function gsl_vector_short_swap_elements( v : pgsl_vector_short; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_vector_short_max ( const gsl_vector_short * v );
function gsl_vector_short_max( const v : pgsl_vector_short ) : short; cdecl; external gsl_dll;
//GSL_EXPORT short gsl_vector_short_min ( const gsl_vector_short * v );
function gsl_vector_short_min( const v : pgsl_vector_short ) : short; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_minmax ( const gsl_vector_short * v , short * min_out , short * max_out );
procedure gsl_vector_short_minmax( const v : pgsl_vector_short; min_out : pshort; max_out : pshort ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_short_max_index ( const gsl_vector_short * v );
function gsl_vector_short_max_index( const v : pgsl_vector_short ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_short_min_index ( const gsl_vector_short * v );
function gsl_vector_short_min_index( const v : pgsl_vector_short ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_short_minmax_index ( const gsl_vector_short * v , size_t * imin , size_t * imax );
procedure gsl_vector_short_minmax_index( const v : pgsl_vector_short; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_add ( gsl_vector_short * a , const gsl_vector_short * b );
function gsl_vector_short_add( a : pgsl_vector_short; const b : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_sub ( gsl_vector_short * a , const gsl_vector_short * b );
function gsl_vector_short_sub( a : pgsl_vector_short; const b : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_mul ( gsl_vector_short * a , const gsl_vector_short * b );
function gsl_vector_short_mul( a : pgsl_vector_short; const b : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_div ( gsl_vector_short * a , const gsl_vector_short * b );
function gsl_vector_short_div( a : pgsl_vector_short; const b : pgsl_vector_short ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_scale ( gsl_vector_short * a , const double x );
function gsl_vector_short_scale( a : pgsl_vector_short; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_add_constant ( gsl_vector_short * a , const double x );
function gsl_vector_short_add_constant( a : pgsl_vector_short; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_short_isnull ( const gsl_vector_short * v );
function gsl_vector_short_isnull( const v : pgsl_vector_short ) : int; cdecl; external gsl_dll;

//gsl_vector_uchar.h
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_alloc ( const size_t n );
function gsl_vector_uchar_alloc( const n : size_t ) : pgsl_vector_uchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_calloc ( const size_t n );
function gsl_vector_uchar_calloc( const n : size_t ) : pgsl_vector_uchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_alloc_from_block ( gsl_block_uchar * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_uchar_alloc_from_block( b : pgsl_block_uchar; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_uchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uchar * gsl_vector_uchar_alloc_from_vector ( gsl_vector_uchar * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_uchar_alloc_from_vector( v : pgsl_vector_uchar; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_uchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_free ( gsl_vector_uchar * v );
procedure gsl_vector_uchar_free( v : pgsl_vector_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_vector_uchar_view_array ( unsignedchar * v , size_t n );
function gsl_vector_uchar_view_array( v : punsignedchar; n : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_vector_uchar_view_array_with_stride ( unsignedchar * base , size_t stride , size_t n );
function gsl_vector_uchar_view_array_with_stride( base : punsignedchar; stride : size_t; n : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_vector_uchar_const_view_array ( const unsignedchar * v , size_t n );
function gsl_vector_uchar_const_view_array( const v : punsignedchar; n : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_vector_uchar_const_view_array_with_stride ( const unsignedchar * base , size_t stride , size_t n );
function gsl_vector_uchar_const_view_array_with_stride( const base : punsignedchar; stride : size_t; n : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_vector_uchar_subvector ( gsl_vector_uchar * v , size_t i , size_t n );
function gsl_vector_uchar_subvector( v : pgsl_vector_uchar; i : size_t; n : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_view gsl_vector_uchar_subvector_with_stride ( gsl_vector_uchar * v , size_t i , size_t stride , size_t n );
function gsl_vector_uchar_subvector_with_stride( v : pgsl_vector_uchar; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_uchar_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_vector_uchar_const_subvector ( const gsl_vector_uchar * v , size_t i , size_t n );
function gsl_vector_uchar_const_subvector( const v : pgsl_vector_uchar; i : size_t; n : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uchar_const_view gsl_vector_uchar_const_subvector_with_stride ( const gsl_vector_uchar * v , size_t i , size_t stride , size_t n );
function gsl_vector_uchar_const_subvector_with_stride( const v : pgsl_vector_uchar; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_uchar_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_vector_uchar_get ( const gsl_vector_uchar * v , const size_t i );
function gsl_vector_uchar_get( const v : pgsl_vector_uchar; const i : size_t ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_set ( gsl_vector_uchar * v , const size_t i , unsignedchar x );
procedure gsl_vector_uchar_set( v : pgsl_vector_uchar; const i : size_t; x : unsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar * gsl_vector_uchar_ptr ( gsl_vector_uchar * v , const size_t i );
function gsl_vector_uchar_ptr( v : pgsl_vector_uchar; const i : size_t ) : punsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedchar * gsl_vector_uchar_const_ptr ( const gsl_vector_uchar * v , const size_t i );
function gsl_vector_uchar_const_ptr( const v : pgsl_vector_uchar; const i : size_t ) : punsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_set_zero ( gsl_vector_uchar * v );
procedure gsl_vector_uchar_set_zero( v : pgsl_vector_uchar ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_set_all ( gsl_vector_uchar * v , unsignedchar x );
procedure gsl_vector_uchar_set_all( v : pgsl_vector_uchar; x : unsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_set_basis ( gsl_vector_uchar * v , size_t i );
function gsl_vector_uchar_set_basis( v : pgsl_vector_uchar; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_fread ( FILE * stream , gsl_vector_uchar * v );
function gsl_vector_uchar_fread( stream : pFILE; v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_fwrite ( FILE * stream , const gsl_vector_uchar * v );
function gsl_vector_uchar_fwrite( stream : pFILE; const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_fscanf ( FILE * stream , gsl_vector_uchar * v );
function gsl_vector_uchar_fscanf( stream : pFILE; v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_fprintf ( FILE * stream , const gsl_vector_uchar * v , const char * format );
function gsl_vector_uchar_fprintf( stream : pFILE; const v : pgsl_vector_uchar; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_memcpy ( gsl_vector_uchar * dest , const gsl_vector_uchar * src );
function gsl_vector_uchar_memcpy( dest : pgsl_vector_uchar; const src : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_reverse ( gsl_vector_uchar * v );
function gsl_vector_uchar_reverse( v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_swap ( gsl_vector_uchar * v , gsl_vector_uchar * w );
function gsl_vector_uchar_swap( v : pgsl_vector_uchar; w : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_swap_elements ( gsl_vector_uchar * v , const size_t i , const size_t j );
function gsl_vector_uchar_swap_elements( v : pgsl_vector_uchar; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_vector_uchar_max ( const gsl_vector_uchar * v );
function gsl_vector_uchar_max( const v : pgsl_vector_uchar ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT unsignedchar gsl_vector_uchar_min ( const gsl_vector_uchar * v );
function gsl_vector_uchar_min( const v : pgsl_vector_uchar ) : unsignedchar; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_minmax ( const gsl_vector_uchar * v , unsignedchar * min_out , unsignedchar * max_out );
procedure gsl_vector_uchar_minmax( const v : pgsl_vector_uchar; min_out : punsignedchar; max_out : punsignedchar ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_uchar_max_index ( const gsl_vector_uchar * v );
function gsl_vector_uchar_max_index( const v : pgsl_vector_uchar ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_uchar_min_index ( const gsl_vector_uchar * v );
function gsl_vector_uchar_min_index( const v : pgsl_vector_uchar ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uchar_minmax_index ( const gsl_vector_uchar * v , size_t * imin , size_t * imax );
procedure gsl_vector_uchar_minmax_index( const v : pgsl_vector_uchar; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_add ( gsl_vector_uchar * a , const gsl_vector_uchar * b );
function gsl_vector_uchar_add( a : pgsl_vector_uchar; const b : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_sub ( gsl_vector_uchar * a , const gsl_vector_uchar * b );
function gsl_vector_uchar_sub( a : pgsl_vector_uchar; const b : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_mul ( gsl_vector_uchar * a , const gsl_vector_uchar * b );
function gsl_vector_uchar_mul( a : pgsl_vector_uchar; const b : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_div ( gsl_vector_uchar * a , const gsl_vector_uchar * b );
function gsl_vector_uchar_div( a : pgsl_vector_uchar; const b : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_scale ( gsl_vector_uchar * a , const double x );
function gsl_vector_uchar_scale( a : pgsl_vector_uchar; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_add_constant ( gsl_vector_uchar * a , const double x );
function gsl_vector_uchar_add_constant( a : pgsl_vector_uchar; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uchar_isnull ( const gsl_vector_uchar * v );
function gsl_vector_uchar_isnull( const v : pgsl_vector_uchar ) : int; cdecl; external gsl_dll;

//gsl_vector_uint.h
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_alloc ( const size_t n );
function gsl_vector_uint_alloc( const n : size_t ) : pgsl_vector_uint; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_calloc ( const size_t n );
function gsl_vector_uint_calloc( const n : size_t ) : pgsl_vector_uint; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_alloc_from_block ( gsl_block_uint * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_uint_alloc_from_block( b : pgsl_block_uint; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_uint; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_uint * gsl_vector_uint_alloc_from_vector ( gsl_vector_uint * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_uint_alloc_from_vector( v : pgsl_vector_uint; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_uint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_free ( gsl_vector_uint * v );
procedure gsl_vector_uint_free( v : pgsl_vector_uint ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_vector_uint_view_array ( unsignedint * v , size_t n );
function gsl_vector_uint_view_array( v : punsignedint; n : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_vector_uint_view_array_with_stride ( unsignedint * base , size_t stride , size_t n );
function gsl_vector_uint_view_array_with_stride( base : punsignedint; stride : size_t; n : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_vector_uint_const_view_array ( const unsignedint * v , size_t n );
function gsl_vector_uint_const_view_array( const v : punsignedint; n : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_vector_uint_const_view_array_with_stride ( const unsignedint * base , size_t stride , size_t n );
function gsl_vector_uint_const_view_array_with_stride( const base : punsignedint; stride : size_t; n : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_vector_uint_subvector ( gsl_vector_uint * v , size_t i , size_t n );
function gsl_vector_uint_subvector( v : pgsl_vector_uint; i : size_t; n : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_view gsl_vector_uint_subvector_with_stride ( gsl_vector_uint * v , size_t i , size_t stride , size_t n );
function gsl_vector_uint_subvector_with_stride( v : pgsl_vector_uint; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_uint_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_vector_uint_const_subvector ( const gsl_vector_uint * v , size_t i , size_t n );
function gsl_vector_uint_const_subvector( const v : pgsl_vector_uint; i : size_t; n : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_uint_const_view gsl_vector_uint_const_subvector_with_stride ( const gsl_vector_uint * v , size_t i , size_t stride , size_t n );
function gsl_vector_uint_const_subvector_with_stride( const v : pgsl_vector_uint; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_uint_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_vector_uint_get ( const gsl_vector_uint * v , const size_t i );
function gsl_vector_uint_get( const v : pgsl_vector_uint; const i : size_t ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_set ( gsl_vector_uint * v , const size_t i , unsignedint x );
procedure gsl_vector_uint_set( v : pgsl_vector_uint; const i : size_t; x : unsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedint * gsl_vector_uint_ptr ( gsl_vector_uint * v , const size_t i );
function gsl_vector_uint_ptr( v : pgsl_vector_uint; const i : size_t ) : punsignedint; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedint * gsl_vector_uint_const_ptr ( const gsl_vector_uint * v , const size_t i );
function gsl_vector_uint_const_ptr( const v : pgsl_vector_uint; const i : size_t ) : punsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_set_zero ( gsl_vector_uint * v );
procedure gsl_vector_uint_set_zero( v : pgsl_vector_uint ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_set_all ( gsl_vector_uint * v , unsignedint x );
procedure gsl_vector_uint_set_all( v : pgsl_vector_uint; x : unsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_set_basis ( gsl_vector_uint * v , size_t i );
function gsl_vector_uint_set_basis( v : pgsl_vector_uint; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_fread ( FILE * stream , gsl_vector_uint * v );
function gsl_vector_uint_fread( stream : pFILE; v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_fwrite ( FILE * stream , const gsl_vector_uint * v );
function gsl_vector_uint_fwrite( stream : pFILE; const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_fscanf ( FILE * stream , gsl_vector_uint * v );
function gsl_vector_uint_fscanf( stream : pFILE; v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_fprintf ( FILE * stream , const gsl_vector_uint * v , const char * format );
function gsl_vector_uint_fprintf( stream : pFILE; const v : pgsl_vector_uint; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_memcpy ( gsl_vector_uint * dest , const gsl_vector_uint * src );
function gsl_vector_uint_memcpy( dest : pgsl_vector_uint; const src : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_reverse ( gsl_vector_uint * v );
function gsl_vector_uint_reverse( v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_swap ( gsl_vector_uint * v , gsl_vector_uint * w );
function gsl_vector_uint_swap( v : pgsl_vector_uint; w : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_swap_elements ( gsl_vector_uint * v , const size_t i , const size_t j );
function gsl_vector_uint_swap_elements( v : pgsl_vector_uint; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_vector_uint_max ( const gsl_vector_uint * v );
function gsl_vector_uint_max( const v : pgsl_vector_uint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT unsignedint gsl_vector_uint_min ( const gsl_vector_uint * v );
function gsl_vector_uint_min( const v : pgsl_vector_uint ) : unsignedint; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_minmax ( const gsl_vector_uint * v , unsignedint * min_out , unsignedint * max_out );
procedure gsl_vector_uint_minmax( const v : pgsl_vector_uint; min_out : punsignedint; max_out : punsignedint ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_uint_max_index ( const gsl_vector_uint * v );
function gsl_vector_uint_max_index( const v : pgsl_vector_uint ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_uint_min_index ( const gsl_vector_uint * v );
function gsl_vector_uint_min_index( const v : pgsl_vector_uint ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_uint_minmax_index ( const gsl_vector_uint * v , size_t * imin , size_t * imax );
procedure gsl_vector_uint_minmax_index( const v : pgsl_vector_uint; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_add ( gsl_vector_uint * a , const gsl_vector_uint * b );
function gsl_vector_uint_add( a : pgsl_vector_uint; const b : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_sub ( gsl_vector_uint * a , const gsl_vector_uint * b );
function gsl_vector_uint_sub( a : pgsl_vector_uint; const b : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_mul ( gsl_vector_uint * a , const gsl_vector_uint * b );
function gsl_vector_uint_mul( a : pgsl_vector_uint; const b : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_div ( gsl_vector_uint * a , const gsl_vector_uint * b );
function gsl_vector_uint_div( a : pgsl_vector_uint; const b : pgsl_vector_uint ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_scale ( gsl_vector_uint * a , const double x );
function gsl_vector_uint_scale( a : pgsl_vector_uint; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_add_constant ( gsl_vector_uint * a , const double x );
function gsl_vector_uint_add_constant( a : pgsl_vector_uint; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_uint_isnull ( const gsl_vector_uint * v );
function gsl_vector_uint_isnull( const v : pgsl_vector_uint ) : int; cdecl; external gsl_dll;

//gsl_vector_ulong.h
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_alloc ( const size_t n );
function gsl_vector_ulong_alloc( const n : size_t ) : pgsl_vector_ulong; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_calloc ( const size_t n );
function gsl_vector_ulong_calloc( const n : size_t ) : pgsl_vector_ulong; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_alloc_from_block ( gsl_block_ulong * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_ulong_alloc_from_block( b : pgsl_block_ulong; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_ulong; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ulong * gsl_vector_ulong_alloc_from_vector ( gsl_vector_ulong * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_ulong_alloc_from_vector( v : pgsl_vector_ulong; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_ulong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_free ( gsl_vector_ulong * v );
procedure gsl_vector_ulong_free( v : pgsl_vector_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_vector_ulong_view_array ( unsignedlong * v , size_t n );
function gsl_vector_ulong_view_array( v : punsignedlong; n : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_vector_ulong_view_array_with_stride ( unsignedlong * base , size_t stride , size_t n );
function gsl_vector_ulong_view_array_with_stride( base : punsignedlong; stride : size_t; n : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_vector_ulong_const_view_array ( const unsignedlong * v , size_t n );
function gsl_vector_ulong_const_view_array( const v : punsignedlong; n : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_vector_ulong_const_view_array_with_stride ( const unsignedlong * base , size_t stride , size_t n );
function gsl_vector_ulong_const_view_array_with_stride( const base : punsignedlong; stride : size_t; n : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_vector_ulong_subvector ( gsl_vector_ulong * v , size_t i , size_t n );
function gsl_vector_ulong_subvector( v : pgsl_vector_ulong; i : size_t; n : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_view gsl_vector_ulong_subvector_with_stride ( gsl_vector_ulong * v , size_t i , size_t stride , size_t n );
function gsl_vector_ulong_subvector_with_stride( v : pgsl_vector_ulong; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_ulong_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_vector_ulong_const_subvector ( const gsl_vector_ulong * v , size_t i , size_t n );
function gsl_vector_ulong_const_subvector( const v : pgsl_vector_ulong; i : size_t; n : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ulong_const_view gsl_vector_ulong_const_subvector_with_stride ( const gsl_vector_ulong * v , size_t i , size_t stride , size_t n );
function gsl_vector_ulong_const_subvector_with_stride( const v : pgsl_vector_ulong; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_ulong_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_vector_ulong_get ( const gsl_vector_ulong * v , const size_t i );
function gsl_vector_ulong_get( const v : pgsl_vector_ulong; const i : size_t ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_set ( gsl_vector_ulong * v , const size_t i , unsignedlong x );
procedure gsl_vector_ulong_set( v : pgsl_vector_ulong; const i : size_t; x : unsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong * gsl_vector_ulong_ptr ( gsl_vector_ulong * v , const size_t i );
function gsl_vector_ulong_ptr( v : pgsl_vector_ulong; const i : size_t ) : punsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedlong * gsl_vector_ulong_const_ptr ( const gsl_vector_ulong * v , const size_t i );
function gsl_vector_ulong_const_ptr( const v : pgsl_vector_ulong; const i : size_t ) : punsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_set_zero ( gsl_vector_ulong * v );
procedure gsl_vector_ulong_set_zero( v : pgsl_vector_ulong ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_set_all ( gsl_vector_ulong * v , unsignedlong x );
procedure gsl_vector_ulong_set_all( v : pgsl_vector_ulong; x : unsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_set_basis ( gsl_vector_ulong * v , size_t i );
function gsl_vector_ulong_set_basis( v : pgsl_vector_ulong; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_fread ( FILE * stream , gsl_vector_ulong * v );
function gsl_vector_ulong_fread( stream : pFILE; v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_fwrite ( FILE * stream , const gsl_vector_ulong * v );
function gsl_vector_ulong_fwrite( stream : pFILE; const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_fscanf ( FILE * stream , gsl_vector_ulong * v );
function gsl_vector_ulong_fscanf( stream : pFILE; v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_fprintf ( FILE * stream , const gsl_vector_ulong * v , const char * format );
function gsl_vector_ulong_fprintf( stream : pFILE; const v : pgsl_vector_ulong; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_memcpy ( gsl_vector_ulong * dest , const gsl_vector_ulong * src );
function gsl_vector_ulong_memcpy( dest : pgsl_vector_ulong; const src : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_reverse ( gsl_vector_ulong * v );
function gsl_vector_ulong_reverse( v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_swap ( gsl_vector_ulong * v , gsl_vector_ulong * w );
function gsl_vector_ulong_swap( v : pgsl_vector_ulong; w : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_swap_elements ( gsl_vector_ulong * v , const size_t i , const size_t j );
function gsl_vector_ulong_swap_elements( v : pgsl_vector_ulong; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_vector_ulong_max ( const gsl_vector_ulong * v );
function gsl_vector_ulong_max( const v : pgsl_vector_ulong ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT unsignedlong gsl_vector_ulong_min ( const gsl_vector_ulong * v );
function gsl_vector_ulong_min( const v : pgsl_vector_ulong ) : unsignedlong; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_minmax ( const gsl_vector_ulong * v , unsignedlong * min_out , unsignedlong * max_out );
procedure gsl_vector_ulong_minmax( const v : pgsl_vector_ulong; min_out : punsignedlong; max_out : punsignedlong ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_ulong_max_index ( const gsl_vector_ulong * v );
function gsl_vector_ulong_max_index( const v : pgsl_vector_ulong ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_ulong_min_index ( const gsl_vector_ulong * v );
function gsl_vector_ulong_min_index( const v : pgsl_vector_ulong ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ulong_minmax_index ( const gsl_vector_ulong * v , size_t * imin , size_t * imax );
procedure gsl_vector_ulong_minmax_index( const v : pgsl_vector_ulong; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_add ( gsl_vector_ulong * a , const gsl_vector_ulong * b );
function gsl_vector_ulong_add( a : pgsl_vector_ulong; const b : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_sub ( gsl_vector_ulong * a , const gsl_vector_ulong * b );
function gsl_vector_ulong_sub( a : pgsl_vector_ulong; const b : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_mul ( gsl_vector_ulong * a , const gsl_vector_ulong * b );
function gsl_vector_ulong_mul( a : pgsl_vector_ulong; const b : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_div ( gsl_vector_ulong * a , const gsl_vector_ulong * b );
function gsl_vector_ulong_div( a : pgsl_vector_ulong; const b : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_scale ( gsl_vector_ulong * a , const double x );
function gsl_vector_ulong_scale( a : pgsl_vector_ulong; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_add_constant ( gsl_vector_ulong * a , const double x );
function gsl_vector_ulong_add_constant( a : pgsl_vector_ulong; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ulong_isnull ( const gsl_vector_ulong * v );
function gsl_vector_ulong_isnull( const v : pgsl_vector_ulong ) : int; cdecl; external gsl_dll;

//gsl_vector_ushort.h
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_alloc ( const size_t n );
function gsl_vector_ushort_alloc( const n : size_t ) : pgsl_vector_ushort; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_calloc ( const size_t n );
function gsl_vector_ushort_calloc( const n : size_t ) : pgsl_vector_ushort; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_alloc_from_block ( gsl_block_ushort * b , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_ushort_alloc_from_block( b : pgsl_block_ushort; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_ushort; cdecl; external gsl_dll;
//GSL_EXPORT gsl_vector_ushort * gsl_vector_ushort_alloc_from_vector ( gsl_vector_ushort * v , const size_t offset , const size_t n , const size_t stride );
function gsl_vector_ushort_alloc_from_vector( v : pgsl_vector_ushort; const offset : size_t; const n : size_t; const stride : size_t ) : pgsl_vector_ushort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_free ( gsl_vector_ushort * v );
procedure gsl_vector_ushort_free( v : pgsl_vector_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_vector_ushort_view_array ( unsignedshort * v , size_t n );
function gsl_vector_ushort_view_array( v : punsignedshort; n : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_vector_ushort_view_array_with_stride ( unsignedshort * base , size_t stride , size_t n );
function gsl_vector_ushort_view_array_with_stride( base : punsignedshort; stride : size_t; n : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_vector_ushort_const_view_array ( const unsignedshort * v , size_t n );
function gsl_vector_ushort_const_view_array( const v : punsignedshort; n : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_vector_ushort_const_view_array_with_stride ( const unsignedshort * base , size_t stride , size_t n );
function gsl_vector_ushort_const_view_array_with_stride( const base : punsignedshort; stride : size_t; n : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_vector_ushort_subvector ( gsl_vector_ushort * v , size_t i , size_t n );
function gsl_vector_ushort_subvector( v : pgsl_vector_ushort; i : size_t; n : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_view gsl_vector_ushort_subvector_with_stride ( gsl_vector_ushort * v , size_t i , size_t stride , size_t n );
function gsl_vector_ushort_subvector_with_stride( v : pgsl_vector_ushort; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_ushort_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_vector_ushort_const_subvector ( const gsl_vector_ushort * v , size_t i , size_t n );
function gsl_vector_ushort_const_subvector( const v : pgsl_vector_ushort; i : size_t; n : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT _gsl_vector_ushort_const_view gsl_vector_ushort_const_subvector_with_stride ( const gsl_vector_ushort * v , size_t i , size_t stride , size_t n );
function gsl_vector_ushort_const_subvector_with_stride( const v : pgsl_vector_ushort; i : size_t; stride : size_t; n : size_t ) : _gsl_vector_ushort_const_view ; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_vector_ushort_get ( const gsl_vector_ushort * v , const size_t i );
function gsl_vector_ushort_get( const v : pgsl_vector_ushort; const i : size_t ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_set ( gsl_vector_ushort * v , const size_t i , unsignedshort x );
procedure gsl_vector_ushort_set( v : pgsl_vector_ushort; const i : size_t; x : unsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort * gsl_vector_ushort_ptr ( gsl_vector_ushort * v , const size_t i );
function gsl_vector_ushort_ptr( v : pgsl_vector_ushort; const i : size_t ) : punsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT const unsignedshort * gsl_vector_ushort_const_ptr ( const gsl_vector_ushort * v , const size_t i );
function gsl_vector_ushort_const_ptr( const v : pgsl_vector_ushort; const i : size_t ) : punsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_set_zero ( gsl_vector_ushort * v );
procedure gsl_vector_ushort_set_zero( v : pgsl_vector_ushort ); cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_set_all ( gsl_vector_ushort * v , unsignedshort x );
procedure gsl_vector_ushort_set_all( v : pgsl_vector_ushort; x : unsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_set_basis ( gsl_vector_ushort * v , size_t i );
function gsl_vector_ushort_set_basis( v : pgsl_vector_ushort; i : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_fread ( FILE * stream , gsl_vector_ushort * v );
function gsl_vector_ushort_fread( stream : pFILE; v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_fwrite ( FILE * stream , const gsl_vector_ushort * v );
function gsl_vector_ushort_fwrite( stream : pFILE; const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_fscanf ( FILE * stream , gsl_vector_ushort * v );
function gsl_vector_ushort_fscanf( stream : pFILE; v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_fprintf ( FILE * stream , const gsl_vector_ushort * v , const char * format );
function gsl_vector_ushort_fprintf( stream : pFILE; const v : pgsl_vector_ushort; const format : pchar ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_memcpy ( gsl_vector_ushort * dest , const gsl_vector_ushort * src );
function gsl_vector_ushort_memcpy( dest : pgsl_vector_ushort; const src : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_reverse ( gsl_vector_ushort * v );
function gsl_vector_ushort_reverse( v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_swap ( gsl_vector_ushort * v , gsl_vector_ushort * w );
function gsl_vector_ushort_swap( v : pgsl_vector_ushort; w : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_swap_elements ( gsl_vector_ushort * v , const size_t i , const size_t j );
function gsl_vector_ushort_swap_elements( v : pgsl_vector_ushort; const i : size_t; const j : size_t ) : int; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_vector_ushort_max ( const gsl_vector_ushort * v );
function gsl_vector_ushort_max( const v : pgsl_vector_ushort ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT unsignedshort gsl_vector_ushort_min ( const gsl_vector_ushort * v );
function gsl_vector_ushort_min( const v : pgsl_vector_ushort ) : unsignedshort; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_minmax ( const gsl_vector_ushort * v , unsignedshort * min_out , unsignedshort * max_out );
procedure gsl_vector_ushort_minmax( const v : pgsl_vector_ushort; min_out : punsignedshort; max_out : punsignedshort ); cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_ushort_max_index ( const gsl_vector_ushort * v );
function gsl_vector_ushort_max_index( const v : pgsl_vector_ushort ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT size_t gsl_vector_ushort_min_index ( const gsl_vector_ushort * v );
function gsl_vector_ushort_min_index( const v : pgsl_vector_ushort ) : size_t; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_vector_ushort_minmax_index ( const gsl_vector_ushort * v , size_t * imin , size_t * imax );
procedure gsl_vector_ushort_minmax_index( const v : pgsl_vector_ushort; imin : psize_t; imax : psize_t ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_add ( gsl_vector_ushort * a , const gsl_vector_ushort * b );
function gsl_vector_ushort_add( a : pgsl_vector_ushort; const b : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_sub ( gsl_vector_ushort * a , const gsl_vector_ushort * b );
function gsl_vector_ushort_sub( a : pgsl_vector_ushort; const b : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_mul ( gsl_vector_ushort * a , const gsl_vector_ushort * b );
function gsl_vector_ushort_mul( a : pgsl_vector_ushort; const b : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_div ( gsl_vector_ushort * a , const gsl_vector_ushort * b );
function gsl_vector_ushort_div( a : pgsl_vector_ushort; const b : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_scale ( gsl_vector_ushort * a , const double x );
function gsl_vector_ushort_scale( a : pgsl_vector_ushort; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_add_constant ( gsl_vector_ushort * a , const double x );
function gsl_vector_ushort_add_constant( a : pgsl_vector_ushort; const x : double ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_vector_ushort_isnull ( const gsl_vector_ushort * v );
function gsl_vector_ushort_isnull( const v : pgsl_vector_ushort ) : int; cdecl; external gsl_dll;

//gsl_version.h

//gsl_wavelet2d.h
//GSL_EXPORT int gsl_wavelet2d_transform ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_direction dir , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; dir : gsl_wavelet_direction; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_transform_forward ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform_forward( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_transform_inverse ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform_inverse( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_direction dir , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; dir : gsl_wavelet_direction; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform_forward ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform_forward( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform_inverse ( const gsl_wavelet * w , double * data , size_t tda , size_t size1 , size_t size2 , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform_inverse( const w : pgsl_wavelet; data : pdouble; tda : size_t; size1 : size_t; size2 : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_transform_matrix ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_direction dir , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform_matrix( const w : pgsl_wavelet; a : pgsl_matrix; dir : gsl_wavelet_direction; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_transform_matrix_forward ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform_matrix_forward( const w : pgsl_wavelet; a : pgsl_matrix; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_transform_matrix_inverse ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_workspace * work );
function gsl_wavelet2d_transform_matrix_inverse( const w : pgsl_wavelet; a : pgsl_matrix; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform_matrix ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_direction dir , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform_matrix( const w : pgsl_wavelet; a : pgsl_matrix; dir : gsl_wavelet_direction; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform_matrix_forward ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform_matrix_forward( const w : pgsl_wavelet; a : pgsl_matrix; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet2d_nstransform_matrix_inverse ( const gsl_wavelet * w , gsl_matrix * a , gsl_wavelet_workspace * work );
function gsl_wavelet2d_nstransform_matrix_inverse( const w : pgsl_wavelet; a : pgsl_matrix; work : pgsl_wavelet_workspace ) : int ; cdecl; external gsl_dll;

//gsl_wavelet.h
//GSL_EXPORT gsl_wavelet * gsl_wavelet_alloc ( const gsl_wavelet_type * T , size_t k );
function gsl_wavelet_alloc( const T : pgsl_wavelet_type; k : size_t ) : pgsl_wavelet; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_wavelet_free ( gsl_wavelet * w );
procedure gsl_wavelet_free( w : pgsl_wavelet ); cdecl; external gsl_dll;
//GSL_EXPORT const char * gsl_wavelet_name ( const gsl_wavelet * w );
function gsl_wavelet_name( const w : pgsl_wavelet ) : pchar; cdecl; external gsl_dll;
//GSL_EXPORT gsl_wavelet_workspace * gsl_wavelet_workspace_alloc ( size_t n );
function gsl_wavelet_workspace_alloc( n : size_t ) : pgsl_wavelet_workspace; cdecl; external gsl_dll;
//GSL_EXPORT void gsl_wavelet_workspace_free ( gsl_wavelet_workspace * work );
procedure gsl_wavelet_workspace_free( work : pgsl_wavelet_workspace ); cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet_transform ( const gsl_wavelet * w , double * data , size_t stride , size_t n , gsl_wavelet_direction dir , gsl_wavelet_workspace * work );
function gsl_wavelet_transform( const w : pgsl_wavelet; data : pdouble; stride : size_t; n : size_t; dir : gsl_wavelet_direction; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet_transform_forward ( const gsl_wavelet * w , double * data , size_t stride , size_t n , gsl_wavelet_workspace * work );
function gsl_wavelet_transform_forward( const w : pgsl_wavelet; data : pdouble; stride : size_t; n : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;
//GSL_EXPORT int gsl_wavelet_transform_inverse ( const gsl_wavelet * w , double * data , size_t stride , size_t n , gsl_wavelet_workspace * work );
function gsl_wavelet_transform_inverse( const w : pgsl_wavelet; data : pdouble; stride : size_t; n : size_t; work : pgsl_wavelet_workspace ) : int; cdecl; external gsl_dll;


implementation

function gsl_multimin_fminimizer_nmsimplex : pGSL_multimin_fminimizer_type;
begin
  result := pGSL_multimin_fminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fminimizer_nmsimplex')^);
end;

function gsl_multimin_fminimizer_nmsimplex2 : pGSL_multimin_fminimizer_type;
begin
  result := pGSL_multimin_fminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fminimizer_nmsimplex2')^);
end;

function gsl_multimin_fminimizer_nmsimplex2rand : pGSL_multimin_fminimizer_type;
begin
  result := pGSL_multimin_fminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fminimizer_nmsimplex2rand')^);
end;

function gsl_multimin_fdfminimizer_vector_bfgs : pgsl_multimin_fdfminimizer_type;
begin
  result := pgsl_multimin_fdfminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fdfminimizer_vector_bfgs')^);
end;

function gsl_multimin_fdfminimizer_conjugate_fr : pgsl_multimin_fdfminimizer_type;
begin
  result := pgsl_multimin_fdfminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fdfminimizer_conjugate_fr')^);
end;

function gsl_multimin_fdfminimizer_conjugate_pr : pgsl_multimin_fdfminimizer_type;
begin
  result := pgsl_multimin_fdfminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fdfminimizer_conjugate_pr')^);
end;

function gsl_multimin_fdfminimizer_steepest_descent : pgsl_multimin_fdfminimizer_type;
begin
  result := pgsl_multimin_fdfminimizer_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multimin_fdfminimizer_steepest_descent')^);
end;

function gsl_rng_default : pgsl_rng_type;
begin
  result := pgsl_rng_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_rng_default')^);
end;

function gsl_multifit_fdfsolver_lmsder : pgsl_multifit_fdfsolver_type;
begin
  result := pgsl_multifit_fdfsolver_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multifit_fdfsolver_lmsder')^);
end;

function gsl_multifit_fdfsolver_lmder : pgsl_multifit_fdfsolver_type;
begin
  result := pgsl_multifit_fdfsolver_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_multifit_fdfsolver_lmder')^);
end;

function gsl_interp_cspline : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_cspline')^);
end;

function gsl_interp_linear : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_linear')^);
end;

function gsl_interp_polynomial : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_polynomial')^);
end;

function gsl_interp_cspline_periodic : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_cspline_periodic')^);
end;

function gsl_interp_akima : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_akima')^);
end;

function gsl_interp_akima_periodic : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_akima_periodic')^);
end;

function gsl_interp_steffen : pgsl_interp_type;
begin
  result := pgsl_interp_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp_steffen')^);
end;

function gsl_interp2d_bilinear : pgsl_interp2d_type;
begin
  result := pgsl_interp2d_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp2d_bilinear')^);
end;

function gsl_interp2d_bicubic : pgsl_interp2d_type;
begin
  result := pgsl_interp2d_type(GetProcAddress(GetModuleHandle(gsl_dll),
  'gsl_interp2d_bicubic')^);
end;

end.
